(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: '['"
p3
sS'layer'
p4
S'/home/adrian/web2py/applications/CygnusCloud/controllers/administrator.py'
p5
sS'code'
p6
S'# coding: utf8\n\n\n@auth.requires_membership(\'Administrator\')\ndef runVM():\n    createAdressBar()\n    return dict()\n    \n@auth.requires_membership(\'Administrator\')\ndef servers():\n    createAdressBar()\n    if(request.args(0) == \'add_remove_servers\'):\n        form = FORM(T(\'Servidores\'),SELECT(\'server1\',\'server 2\'))\n        return dict(form = form)\n\n      \n@auth.requires_membership(\'Administrator\')\ndef users():  \n    createAdressBar()\n    if(request.args(0) == \'add\'):\n        #Creamos el primer formulario\n        form = FORM(HR(),H2(T(\'A\xc3\xb1adir un nuevo usuario\')),DIV( T(\'Nombre: \'),BR(),INPUT(_name = \'name\')),\n                DIV( T(\'Contrase\xc3\xb1a: \'),BR(),INPUT(_name =\'password\')),\n                DIV(T(\'Grupo: \'),BR(),SELECT(_name = \'group\',*[OPTION(row.role,_value = T(str(row.role))) \n                for row in userDB().select(userDB.auth_group.role)])),HR(),CENTER(INPUT(_type=\'submit\',_name = \'add\' ,_value=T(\'A\xc3\xb1adir Usuario\'))))                \n        \n        if form.accepts(request.vars,keepvalues=True) and form.vars.add:\n            if(form.vars.name != None) and (form.vars.name != "") and (form.vars.password != None) and (form.vars.password != ""):\n                #Si el email no esta repetido\n                if(userDB(userDB.auth_user.email == form.vars.name).count() == 0):\n                    #A\xc3\xb1adimos el nuevo usuario a la base de datos\n                    userId = userDB.auth_user.insert(email = form.vars.name,password = userDB.auth_user.password.validate(form.vars.password)[0])\n                    groupId = userDB(userDB.auth_group.role == form.vars.group).select(userDB.auth_group.id)[0]\n                    userDB.auth_membership.insert(group_id = groupId, user_id = userId)\n                    \n            #redireccinamos \n            redirect(URL(c=\'administrator\',f=\'users\',args = [\'add\'],vars = dict(usersFind=request.vars.usersFind) ))\n        #Devolvemos el formulario             \n        return dict(form = form)\n        \n    elif(request.args(0) == \'associate_subjects\'):\n        #creamos el primer formulario\n        form1 = createUserSearchForm(request.args(0))\n        #Creamos el segundo formulario\n        listUsers = request.vars.usersFind or []\n        #Comprobamos si se ha tomado como una lista\n        if(isinstance(listUsers,str)):\n            listUsers = []\n            listUsers.append(request.vars.usersFind)\n        #Creamos el segundo formulario    \n        form2 = FORM(H2(T(\'A\xc3\xb1adir asignatura\')),DIV(T(\'Usuario\'),BR(),SELECT(_name = \'usersFind\', *listUsers)),\n              DIV( T(\'C\xc3\xb3digo: \'),BR(),INPUT(_name = \'code\')),DIV( T(\'Grupo de clase: \'),BR(),\n              INPUT(_name =\'classGroup\')),INPUT(_type = \'submit\',_name = \'add\',_value = T(\'A\xc3\xb1adir\')),\n              INPUT(_type="submit",_name = \'remove\',_value=T("Eliminar")))\n             \n\n\n  \n        #Devolvemos el formulario             \n        return dict(form1 = form1,form2 = form2)\n        \n    elif(request.args(0) == \'remove\'):\n        #Creamos el formulario de busqueda\n        form1 = createUserSearchForm(request.args(0))\n        #Creamos el segundo formulario\n        listUsers = request.vars.usersFind or []\n        #Comprobamos si se ha tomado como una lista\n        if(isinstance(listUsers,str)):\n            listUsers = []\n            listUsers.append(request.vars.usersFind)\n        table = createUserTable(listUsers)\n        #Creamos el formulario\n        form2 = FORM(table,CENTER(INPUT(_type = \'submit\',_name = \'remove\',  _value = T(\'Eliminar seleccionado\'))))\n        \n        if form2.accepts(request.vars,keepvalues=True) and form2.vars.remove:\n            if(form2.vars.selection != ""):\n                #Extraemos el id del usuario\n                userId = userDB(userDB.auth_user.email == listUsers[int(form2.vars.selection)]).select()[0].id\n                #Borramos su referencia en la tabla relacional\n                userDB(userDB.auth_membership.user_id == userId).delete()\n                #Borramos el usuario\n                userDB(userDB.auth_user.id == userId).delete()        \n                #redireccinamos \n                listUsers.remove(listUsers[int(form2.vars.selection)])\n                redirect(URL(c=\'administrator\',f=\'users\',args = [\'remove\'],vars = dict(usersFind=listUsers) ))\n        \n        #Devolvemos los dos formularios\n        return dict(form1 = form1,form2 = form2)\n\n        \n@auth.requires_membership(\'Administrator\')\ndef subjects():\n    createAdressBar()\n    if(request.args(0) == \'add\'):              \n        #Creamos el primer formulario\n        form = FORM(HR(),H2(T(\'A\xc3\xb1adir un nueva asignatura\')),DIV( T(\'C\xc3\xb3digo: \'),BR(),INPUT(_name = \'cod\',_size = \'30px\')),\n                DIV( T(\'Nombre: \'),BR(),INPUT(_name =\'name\')),\n                DIV( T(\'A\xc3\xb1o: \'),BR(),INPUT(_name =\'year\')),\n                DIV( T(\'Curso: \'),BR(),INPUT(_name =\'curse\')),\n                DIV( T(\'Grupo de clase: \'),BR(),INPUT(_name =\'group\')),\n                HR(),CENTER(INPUT(_type=\'submit\',_name = \'add\' ,_value=T(\'A\xc3\xb1adir\'))))                \n        \n        if form.accepts(request.vars) and form.vars.add:\n            if(len(form.vars.cod) >= 4) and (len(form.vars.name) != 0) and (len(form.vars.year) == 4) and (len(form.vars.curse) == 1) and \\\n                (len(form.vars.group) == 1):\n                #Si los valores correspondientes son enteros\n                try:\n                    #Si no existe ya ese grupo\n                    if(userDB((userDB.ClassGroup.cod == form.vars.cod) & (userDB.ClassGroup.curseGroup == form.vars.group)).count() == 0):\n                        #Si no existe la asignatura, la creamos\n                        if(userDB(userDB.Subjects.code == form.vars.cod).count() == 0):\n                            userDB.Subjects.insert(code = int(form.vars.cod),name = form.vars.name)\n                        userDB.ClassGroup.insert(yearGroup = int(form.vars.year),cod = int(form.vars.cod),curse = int(form.vars.curse),\\\n                            curseGroup = form.vars.group)\n                except ValueError:\n                          response.flash = T(\'Formato de n\xc3\xbameros erroneo\')\n            #redireccinamos \n            redirect(URL(c=\'administrator\',f=\'subjects\',args = [\'add\'],vars = dict(usersFind=request.vars.usersFind) ))\n        #Devolvemos el formulario             \n        return dict(form = form)  \n         \n    if(request.args(0) == \'remove\'): \n        #Creamos el formulario de busqueda\n        form1 = createSubjectsSearchForm(request.args(0))\n        #Creamos el segundo formulario\n        listSubjects = request.vars.subjectsFind or []\n        #Comprobamos si se ha tomado como una lista\n        print listSubjects\n        #if((listSubjects != []) and (not isinstance(listSubjects[0],list))):\n            #listSubjects = [eval(request.vars.subjectsFind)]\n            #listSubjects.append(request.vars.subjectsFind)\n        \n        table = createSubjectTable(listSubjects)\n        #Creamos el formulario\n        form2 = FORM(table,CENTER(INPUT(_type = \'submit\',_name = \'remove\',  _value = T(\'Eliminar seleccionado\'))))\n        \n        if form2.accepts(request.vars,keepvalues=True) and form2.vars.remove:\n            if(form2.vars.selection != ""):\n                #Borramos su referencia en la tabla relacional\n                userDB((userDB.UserGroup.cod == listSubjects[int(form2.vars.selection)][0]) & \\\n                (userDB.UserGroup.curseGroup == listSubjects[int(form2.vars.selection)][1])).delete()\n                #Borramos el grupo\n                userDB((userDB.ClassGroup.cod == listSubjects[int(form2.vars.selection)][0]) & \\\n                (userDB.ClassGroup.curseGroup == listSubjects[int(form2.vars.selection)][1])).delete()        \n                #redireccinamos \n                listSubjects.remove(listSubjects[int(form2.vars.selection)])\n                redirect(URL(c=\'administrator\',f=\'subjects\',args = [\'remove\'],vars = {\'subjectsFind\':listSubjects} ))\n        \n        #Devolvemos los dos formularios\n        return dict(form1 = form1,form2 = form2)   \n          \n    \ndef createAdressBar():\n \n    response.menu=[[SPAN(T(\'Arrancar m\xc3\xa1quina\'), _class=\'highlighted\'), False,URL(\'runVM\'),[]],\n                    [SPAN(T(\'Administrar servidores\'), _class=\'highlighted\'), False, URL(f = \'servers\',args = [\'add_remove_servers\']),[\n                        (T(\'A\xc3\xb1adir/Eliminar\'),False,URL(f = \'servers\',args = [\'add_remove_servers\']))]],\n                    [SPAN(T(\'Administrar usuarios\'), _class=\'highlighted\'), False, URL(f = \'initUsers\',args = [\'remove\']),[\n                        (T(\'Eliminar\'),False,URL(f = \'users\',args = [\'remove\'])),\n                        (T(\'A\xc3\xb1adir\'),False,URL(f = \'users\',args = [\'add\'])),\n                        (T(\'Asociar asignaturas\'),False,URL(f = \'users\',args = [\'associate_subjects\']))]],\n                    [SPAN(T(\'Administrar asignaturas\'), _class=\'highlighted\'), False, URL(f = \'subjects\',args = [\'add\']),[\n                       (T(\'A\xc3\xb1adir\'),False,URL(f = \'subjects\',args = [\'add\'])),\n                       (T(\'Eliminar\'),False,URL(f = \'subjects\',args = [\'remove\'])),\n                       (T(\'Admistrar m\xc3\xa1quinas\'),False,URL(f = \'subjects\',args = [\'addVM\']))]]]\n                       \ndef createUserSearchForm(state):        \n    listTypes = []\n    listTypes.append(OPTION(\'all\',_value = T(\'All\')))\n    for row in userDB().select(userDB.auth_group.role):\n        listTypes.append(OPTION(row.role,_value = T(str(row.role)))) \n        \n    form1 = FORM(HR(),H2(T(\'Buscar un usuario\')),DIV( T(\'Nombre: \'),BR(),INPUT(_name = \'name\')),\n           DIV(T(\'Grupo: \'),BR(),SELECT(_name = \'group\', *listTypes)),\n           INPUT(_type=\'submit\',_name = \'search\',_value=T(\'Buscar\'),_onclick=[]),HR())    \n    \n    if form1.accepts(request.vars,keepvalues=True) and form1.vars.search:\n        query = ""\n        if(form1.vars.group != \'All\'):\n            query =  (userDB.auth_group.role  ==  form1.vars.group) & (userDB.auth_group.id == userDB.auth_membership.group_id) \n            query &= userDB.auth_membership.user_id  ==  userDB.auth_user.id\n                \n        rows = userDB(query).select(userDB.auth_user.email)\n\n        #Extraemos la lista de usuarios \n        listUsersAux = [] \n        for row in rows :                  \n            if(form1.vars.name != "") and (form1.vars.name != None):\n                    if (form1.vars.name in row.email):                    \n                        listUsersAux.append(row.email)\n            else:\n                    listUsersAux.append(row.email)\n        #redireccinamos con los resultados\n        redirect(URL(c=\'administrator\',f=\'users\',args = [state],vars = dict(usersFind=listUsersAux) ))\n     \n    return form1\n    \ndef createSubjectsSearchForm(state):        \n\n        \n    form1 = FORM(HR(),H2(T(\'Buscar una asignatura\')),DIV( T(\'Codigo: \'),BR(),INPUT(_name = \'cod\')),\n           DIV(T(\'Nombre: \'),BR(),INPUT(_name = \'name\')),\n           DIV(T(\'A\xc3\xb1o: \'),BR(),INPUT(_name = \'year\')),\n           DIV(T(\'Curso: \'),BR(),INPUT(_name = \'curse\')),\n           DIV(T(\'Grupo de clase: \'),BR(),INPUT(_name = \'group\')),\n           INPUT(_type=\'submit\',_name = \'search\',_value=T(\'Buscar\'),_onclick=[]),HR())    \n    \n    if form1.accepts(request.vars,keepvalues=True) and form1.vars.search:\n        query = ""\n        tag = False\n        if(len(form1.vars.year) != 0):\n            query =  userDB.ClassGroup.yearGroup  ==  form1.vars.year\n            tag = True\n        if(len(form1.vars.curse) != 0):\n            if(tag): \n                query &=  userDB.ClassGroup.curse  ==  form1.vars.curse  \n            else:\n                query =  userDB.ClassGroup.curse  ==  form1.vars.curse\n                tag = True      \n        if(len(form1.vars.group) != 0):\n            if(tag): \n                query &=  userDB.ClassGroup.curseGroup  ==  form1.vars.group  \n            else:\n                query =  userDB.ClassGroup.curseGroup  ==  form1.vars.group\n                tag = True   \n                \n        rows = userDB(query).select(userDB.ClassGroup.cod,userDB.ClassGroup.curseGroup)\n\n        #Extraemos la lista de usuarios \n        listSubjectsAux = [] \n        for row in rows :\n            add = True                  \n            if(form1.vars.name != ""):\n                    add = form1.vars.name in userDB(row.cod == userDB.Subjects.code).select()[0].name \n            if(form1.vars.cod != "") and (add):\n                    add = form1.vars.cod in row.cod                    \n            if(add):\n                    listSubjectsAux.append([row.cod,row.curseGroup])\n        #redireccinamos con los resultados\n        redirect(URL(c=\'administrator\',f=\'subjects\',args = [state],vars = dict(subjectsFind=listSubjectsAux) ))\n     \n    return form1\n\n\ndef createUserTable(listUsers):\n    table = TABLE(_class=\'data\', _name=\'table\')\n    table.append(TR(TH(\'S.\'),TH(T(\'Nombre\')), TH(T(\'Contrase\xc3\xb1a\')), TH(T(\'Grupo\'))))\n    i = 0\n    for l in listUsers:\n        table.append(TR(\\\n        TD(INPUT(_type=\'radio\',_name = \'selection\',_value = i)),\\\n        TD(LABEL(l)),\\\n        TD(LABEL(userDB(userDB.auth_user.email==l).select(userDB.auth_user.password)[0].password)),\\\n        TD(LABEL(userDB((userDB.auth_user.email==l) & (userDB.auth_membership.user_id == userDB.auth_user.id) \\\n         & (userDB.auth_membership.group_id == userDB.auth_group.id)).select(userDB.auth_group.role)[0].role))))\n        i = i + 1\n    pass\n    return table\n    \ndef createSubjectTable(listSubjects):\n    table = TABLE(_class=\'data\', _name=\'table\')\n    table.append(TR(TH(\'S.\'),TH(T(\'Cod-Asignatura\'),TH(T(\'Grupo\')))))\n    i = 0\n    for l in listSubjects:\n        table.append(TR(\\\n        TD(INPUT(_type=\'radio\',_name = \'selection\',_value = i)),\\\n        TD(LABEL(str(l[0]) + \'-\' + userDB(l[0] == userDB.Subjects.code).select()[0].name),_width = \'50%\'),\n        TD(LABEL(l[1]))))\n        i = i + 1\n    pass\n    return table\n\nresponse._vars=response._caller(subjects)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/adrian/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/adrian/web2py/applications/CygnusCloud/controllers/administrator.py", line 273, in <module>\n  File "/home/adrian/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/adrian/web2py/gluon/tools.py", line 2929, in f\n    return action(*a, **b)\n  File "/home/adrian/web2py/applications/CygnusCloud/controllers/administrator.py", line 133, in subjects\n    table = createSubjectTable(listSubjects)\n  File "/home/adrian/web2py/applications/CygnusCloud/controllers/administrator.py", line 267, in createSubjectTable\n    TD(LABEL(str(l[0]) + \'-\' + userDB(l[0] == userDB.Subjects.code).select()[0].name),_width = \'50%\'),\n  File "/home/adrian/web2py/gluon/dal.py", line 8905, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/adrian/web2py/gluon/dal.py", line 1618, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/adrian/web2py/gluon/dal.py", line 1478, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/adrian/web2py/gluon/dal.py", line 1311, in expand\n    return op(first, second)\n  File "/home/adrian/web2py/gluon/dal.py", line 1239, in EQ\n    self.expand(second, first.type))\n  File "/home/adrian/web2py/gluon/dal.py", line 1321, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/adrian/web2py/gluon/dal.py", line 1746, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'[\'\n'
p11
s.