#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "CygnusCloud: provisión de puestos de laboratorio virtuales bajo demanda"
\pdf_author "Luis Barrios Hernández, Adrián Fernández Hernández, Samuel Guayerbas Martín"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 4
\tocdepth 4
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Arquitectura del sistema
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
TODO: 
\end_layout

\begin_layout Itemize
meter referencias noVNC, KVM y Twisted
\end_layout

\begin_layout Itemize
revisar sección red para incluir protocolo orientado a líneas
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introducción 
\begin_inset CommandInset label
LatexCommand label
name "sec:Introducción"

\end_inset


\end_layout

\begin_layout Standard
En este capítulo presentaremos una visión general de la arquitectura de
 
\emph on
CygnusCloud
\emph default
.
 Para facilitar su comprensión, hemos intentado que la claridad prevalezca
 a la hora de exponer los distintos conceptos y decisiones de diseño.
 Por ello, evitaremos a toda costa realizar descripciones exhaustivas de
 todas y cada una de las clases y de sus distintos atributos.
 Si el lector desea conocer con total precisión qué atributos y qué métodos
 tiene cada clase, cómo se comporta cierto método o cuál es la finalidad
 de un determinado atributo, le remitimos al código fuente, extensamente
 comentado.
\end_layout

\begin_layout Standard
Por otra parte, en este capítulo también prestaremos especial atención a
 las decisiones de diseño que hemos tomado ya que, a nuestro parecer, son
 fundamentales para comprender el funcionamiento del sistema, sus ventajas
 y sus limitaciones.
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
Los contenidos de este capítulo se agrupan en las siguientes secciones:
\end_layout

\begin_layout Enumerate
La presente 
\series bold
introducción
\series default
.
\end_layout

\begin_layout Enumerate

\series bold
Objetivos de la arquitectura y restricciones
\series default
.
 En esta sección expondremos todos los objetivos que se tuvieron al diseñar
 
\emph on
CygnusCloud
\emph default
, y también recopilaremos las restricciones con las que hemos tenido que
 tratar a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Enumerate

\series bold
Decisiones de diseño
\series default
.
 En esta sección justificaremos las decisiones más relevantes que hemos
 tomado en el proceso de diseño.
\end_layout

\begin_layout Enumerate

\series bold
Vista lógica
\series default
.
 En esta sección, mostraremos cómo las funciones de cada subsistema se distribuy
en entre sus distintos módulos con la ayuda de un diagrama de paquetes.
 Además, utilizaremos diagramas de clase y diagramas de secuencia para exponer
 las responsabilidades de cada elemento significativo de la arquitectura
 y sus relaciones con el resto de componentes de la misma.
\end_layout

\begin_layout Enumerate

\series bold
Vista de procesos
\series default
.
 En ella mostraremos el funcionamiento de cada subsistema desde el punto
 de vista de los procesos ligeros o 
\emph on
threads
\emph default
, y también discutiremos el cometido de los mismos.
\end_layout

\begin_layout Enumerate

\series bold
Vista de despliegue
\series default
.
 En esta sección mostraremos cómo se distribuyen los distintos subsistemas
 que forman parte de 
\emph on
CygnusCloud
\emph default
 entre las distintas máquinas que forman parte de la infraestructura utilizada.
\end_layout

\begin_layout Enumerate

\series bold
Vista de implementación
\series default
.
 Concluiremos el presente capítulo con esta sección, en la que describiremos
 los componentes que se distribuyen con cada subsistema.
\end_layout

\begin_layout Subsection
Sobre los diagramas UML de este documento
\end_layout

\begin_layout Standard
Para que el aumento del tamaño de los diagramas UML en un lector de ficheros
 PDF no suponga una pérdida de calidad de los mismos, hemos procurado incrustarl
os en este documento como ficheros 
\family typewriter
.pdf
\family default
.
\end_layout

\begin_layout Standard
El comando de 
\emph on
IBM Rational Software Architect 7.5
\emph default
 que los genera usa degradados para mejorar la presentación de los diagramas,
 haciendo que los elementos que aparecen en la parte superior del diagrama
 sean más oscuros que los que aparecen en la parte inferior del mismo.
 En cualquier caso, este efecto 
\emph on
no
\emph default
 tiene asociado ningún tipo de significado en los diagramas.
\end_layout

\begin_layout Section
Objetivos de la arquitectura y restricciones
\end_layout

\begin_layout Standard
En esta sección describiremos todos los objetivos que consideramos a la
 hora de diseñar la arquitectura, así como las restricciones que hemos tenido
 en cuenta a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Subsection
Objetivos 
\begin_inset CommandInset label
LatexCommand label
name "sub:Objetivos-arquitectura"

\end_inset


\end_layout

\begin_layout Standard
Con 
\emph on
CygnusCloud
\emph default
 queremos hacer posible que cualquier estudiante de la Universidad Complutense,
 sea de la titulación que sea, pueda sacar el máximo partido a cualquier
 aula de informática infrautilizada del campus.
 Para ello, es necesario que
\end_layout

\begin_layout Itemize
el sistema pueda atender a más alumnos utilizando más servidores y más ancho
 de banda.
 Por tanto, la 
\emph on
escalabilidad
\emph default
 debe considerarse en el diseño.
\end_layout

\begin_layout Itemize
los alumnos y profesores puedan utilizar 
\emph on
CygnusCloud
\emph default
 sin necesidad de instalar ningún 
\emph on
software
\emph default
 adicional en las aulas de informática.
 De no ser así, no es posible aprovechar los equipos de las aulas que no
 tienen instalado el 
\emph on
software
\emph default
 adicional.
\end_layout

\begin_layout Standard
Por otra parte, dada la actual situación de crisis económica, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con 
\emph on
coste cero
\emph default
.
 Para ello,
\end_layout

\begin_layout Itemize
debemos utilizar exclusivamente software gratuito, y
\end_layout

\begin_layout Itemize
el 
\emph on
software
\emph default
 debe ejecutarse sobre servidores antiguos.
 Así, resulta imprescindible que el 
\emph on
software
\emph default
 sea tan eficiente como sea posible.
 
\end_layout

\begin_layout Standard
Asimismo, el sistema sólo podrá utilizarse con garantías cuando detecte
 y trate un número suficiente de errores.
 Por ello, 
\emph on
el sistema debe ser robusto, de forma que pueda detectar y trate el mayor
 número de errores posible
\emph default
.
\end_layout

\begin_layout Standard
Finalmente, dado que el desarrollo de 
\emph on
CygnusCloud 
\emph default
sólo se extiende a lo largo de un curso académico, también queremos que
 cualquiera que lo desee pueda continuarlo.
 Por ello, hemos procurado que nuestro diseño también se caracterice por
 su 
\emph on
simplicidad
\emph default
.
\end_layout

\begin_layout Subsection
Restricciones
\begin_inset CommandInset label
LatexCommand label
name "sub:Restricciones-arquitectura"

\end_inset


\end_layout

\begin_layout Standard
Tal y como mencionamos en el apartado 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Objetivos-arquitectura"

\end_inset

, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con coste cero, por lo que debemos construirlo utilizand
o 
\emph on
software
\emph default
 gratuito.
 Puesto que los hipervisores deben instalarse en un sistema operativo en
 concreto, que tiene que ser gratuito, esto ha impuesto la primera restricción
 importante: la 
\emph on
dependencia de la plataforma Linux
\emph default
.
 
\end_layout

\begin_layout Standard
Por otra parte, existe una ingente cantidad de distribuciones 
\emph on
Linux
\emph default
, que utilizan distintos sistemas de gestión de paquetes y distintos procedimien
tos de configuración.
 Para garantizar que 
\emph on
CygnusCloud
\emph default
 funciona correctamente en el mayor número posible de distribuciones 
\emph on
Linux
\emph default
, resulta fundamental utilizar mecanismos estándar para interactuar con
 los hipervisores y, a ser posible, lenguajes interpretados.
 Esto ha impuesto una doble restricción: 
\end_layout

\begin_layout Itemize
el uso obligatorio de la librería 
\emph on
libvirt 
\emph default
para interactuar con los hipervisores y configurar las redes virtuales,
 y
\end_layout

\begin_layout Itemize
el uso de un lenguaje de tipo interpretado, como Java o Python, como principal
 lenguaje de programación.
\end_layout

\begin_layout Standard
Además, la práctica totalidad de los 
\emph on
frameworks
\emph default
 que hemos evaluado al diseñar la web se basan en el modelo vista-controlador
 o en otros patrones de diseño derivados de él, lo que nos ha obligado a
 utilizar dicho patrón de diseño.
\end_layout

\begin_layout Standard
Asimismo, puesto que la red troncal de la Complutense utiliza la versión
 4 del protocolo IP (
\emph on
Internet Protocol
\emph default
), 
\emph on
CygnusCloud
\emph default
 debe operar en redes IP versión 4.
 No obstante, dado que esta versión del protocolo IP ha quedado totalmente
 obsoleta, hemos decidido facilitar, en la medida de lo posible, la transición
 a la versión 6 del protocolo IP, de forma que sólo sea necesario introducir
 pequeños cambios en el código del módulo de comunicaciones y ajustar las
 longitudes de ciertos campos en los esquemas de las bases de datos.
\end_layout

\begin_layout Standard
Finalmente, para reducir el tiempo de implementación de 
\emph on
CygnusCloud
\emph default
 resulta imprescindible que 
\emph on
todos los subsistemas compartan tanta funcionalidad como sea posible
\emph default
.
 De esta manera, todos ellos utilizarán el mismo código para realizar, entre
 otras cosas, operaciones básicas sobre una base de datos y comunicaciones
 a través de una red.
 No obstante, esto sólo es posible si 
\emph on
todos los subsistemas se implementan utilizando el mismo lenguaje de programació
n
\emph default
, lo que ha restringido considerablemente el número de librerías y 
\emph on
frameworks 
\emph default
que hemos podido considerar.
\end_layout

\begin_layout Section
Decisiones de diseño 
\begin_inset CommandInset label
LatexCommand label
name "sec:Decisiones-de-diseño"

\end_inset


\end_layout

\begin_layout Subsection
Uso de una aplicación web para interactuar con 
\emph on
CygnusCloud
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-aplicacion-web"

\end_inset


\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Objetivos-arquitectura"

\end_inset

 dijimos, entre otras cosas, que 
\emph on
CygnusCloud
\emph default
 debe poder utilizarse sin necesidad de instalar 
\emph on
software
\emph default
 adicional en las aulas de informática.
 Para ello, existen dos alternativas: crear una aplicación web o crear una
 aplicación de escritorio convencional que pueda utilizarse sin necesidad
 de ser instalada.
\end_layout

\begin_layout Standard
El uso de una aplicación de escritorio tiene una gran ventaja: no es necesario
 utilizar tecnologías web, totalmente desconocidas para nosotros al inicio
 del proyecto.
 No obstante, también tiene asociados algunos inconvenientes considerables:
\end_layout

\begin_layout Itemize
para utilizar 
\emph on
CygnusCloud
\emph default
 en móviles o tabletas es necesario crear una una aplicación específica,
 muy dependiente de la plataforma del dispositivo.
 
\end_layout

\begin_layout Itemize
puesto que los usuarios no tienen por qué descargarse siempre la aplicación
 antes de utilizar 
\emph on
CygnusCloud
\emph default
, es posible que convivan varias versiones de esta, lo que puede dar lugar
 a conflictos y, sobre todo, a problemas de seguridad.
 Para evitar todos estos problemas, es necesario crear un sistema de actualizaci
ones periódicas, por lo que el diseño y la implementación de la aplicación
 se complican.
\end_layout

\begin_layout Itemize
para poder enviar las peticiones al sistema, la aplicación necesita averiguar
 la dirección IP y el puerto de la máquina que las tratará.
 Para ello, existen dos alternativas: 
\end_layout

\begin_deeper
\begin_layout Itemize
incrustar estos datos en el código.
 Esto dificulta el cambio de la IP y el puerto de la máquina que tratará
 las peticiones.
\end_layout

\begin_layout Itemize
anunciarlos periódicamente a través de la red.
 Con esto, además de desperdiciar ancho de banda, estamos comprometiendo
 la seguridad del sistema, ya que cualquier usuario malintencionado podrá
 recibir estos mensajes.
\end_layout

\end_deeper
\begin_layout Itemize
aunque el tráfico viaje cifrado, cualquier usuario que utilice un analizador
 de tráfico podrá averiguar la dirección IP y el puerto de la máquina que
 trata sus peticiones, lo que facilita mucho la realización de ataques de
 denegación de servicio.
\end_layout

\begin_layout Standard
Por otra parte, al utilizar una aplicación web desaparecen muchos de estos
 inconvenientes, ya que
\end_layout

\begin_layout Itemize
para utilizar 
\emph on
CygnusCloud
\emph default
 en móviles o tabletas sólo es necesario introducir cambios en el 
\emph on
layout
\emph default
 o la disposición de elementos de la página.
\end_layout

\begin_layout Itemize
no es necesario descargar ningún programa en los PCs que usan los usuarios.
 Esto hace el sistema más fácil de usar (basta con utilizar un navegador
 web) y permite ahorrar ancho de banda.
\end_layout

\begin_layout Itemize
las actualizaciones son muy fáciles de aplicar: basta con parar el servidor
 web, copiar en él los ficheros binarios y reiniciarlo.
\end_layout

\begin_layout Itemize
aunque sigue siendo posible realizar ataques de denegación de servicio,
 estos sólo afectarán al servidor web y no a los servidores de la infraestructur
a, por lo que esta seguirá procesando las peticiones ya recibidas correctamente.
\end_layout

\begin_layout Standard
Finalmente, el uso de una aplicación web tiene un serio inconveniente: debido
 a nuestra inexperiencia en este campo, es posible que no detectemos algunas
 alternativas para comprometer la seguridad del sistema.
 De todas formas, podemos considerar que la red troncal de la UCM es segura,
 por lo que este tipo de prácticas no serán muy frecuentes.
\end_layout

\begin_layout Subsection
Descomposición del sistema 
\emph on
CygnusCloud
\emph default
 en cuatro subsistemas
\begin_inset CommandInset label
LatexCommand label
name "sub:Descomposición-del-sistema"

\end_inset


\end_layout

\begin_layout Standard
Para atender las peticiones de los usuarios, en la infraestructura de 
\emph on
CygnusCloud
\emph default
 colaboran hasta cuatro subsistemas distintos.
 En esta sección, mostraremos, de forma general, las responsabilidades de
 cada uno de ellos.
 Además, también expondremos los motivos que nos llevaron a hacer esta descompos
ición.
\end_layout

\begin_layout Subsubsection
Los servidores de máquinas virtuales
\end_layout

\begin_layout Standard
Instanciar una máquina virtual requiere muchos recursos.
 No basta con asignarle memoria RAM y tiempo de CPU: también es necesario
 reservar espacio en disco en el que almacenar los datos de los usuarios
 y los archivos de paginación.
 
\end_layout

\begin_layout Standard
Por muy potente que sea el 
\emph on
hardware 
\emph default
del servidor que alojará las máquinas virtuales, el número máximo de máquinas
 virtuales estará siempre limitado.
 Por tanto, la única forma de superar esta limitación y aumentar el número
 de máquinas virtuales que pueden estar activas a la vez es utilizando varios
 servidores para albergarlas.
\end_layout

\begin_layout Standard
Por otra parte, el arranque y la creación o edición de máquinas virtuales
 son operaciones que requieren mucha entrada/salida.
 Para garantizar que el tiempo de respuesta del sistema es adecuado, lo
 más conveniente es que los nodos que albergan máquinas virtuales se dediquen
 a ello en exclusiva.
 De ahora en adelante, llamaremos 
\series bold
servidores de máquinas virtuales
\series default
 a los nodos que albergan exclusivamente máquinas virtuales.
\end_layout

\begin_layout Standard
Es importante notar que, una vez creadas las las máquinas virtuales, el
 servidor VNC que utilizarán los usuarios para interactuar con ellas reside
 en el propio servidor de máquinas virtuales, por lo que el tráfico VNC
 circulará exclusivamente entre los PCs de los usuarios y los servidores
 de máquinas virtuales.
 Además, el tráfico que los usuarios generan para conectarse a internet
 se vuelca directamente a la red, es decir, no atraviesa ninguna otra máquina
 de la infraestructura de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Subsubsection
El repositorio de imágenes 
\begin_inset CommandInset label
LatexCommand label
name "sub:El-repositorio-de-imagenes"

\end_inset


\end_layout

\begin_layout Standard
Los usuarios sólo pueden arrancar, crear y editar máquinas virtuales cuando
 sus imágenes de disco están desplegadas en un servidor de máquinas virtuales.
 No obstante, hay imágenes de disco que no deben estar desplegadas en ningún
 servidor de máquinas virtuales.
 Este es el caso de
\end_layout

\begin_layout Itemize
las imágenes 
\emph on
vanilla
\emph default
, que sólo tienen el sistema operativo configurado con los programas más
 básicos instalados, y
\end_layout

\begin_layout Itemize
las imágenes que no han terminado de editarse.
 
\end_layout

\begin_layout Standard
Estas imágenes no están completamente configuradas, por lo que ningún alumno
 las podrá arrancar.
 Así, su presencia en un servidor de máquinas virtuales supone un desperdicio
 de espacio en disco.
\end_layout

\begin_layout Standard
Además, para simplificar la administración del sistema no resulta conveniente
 que las imágenes de disco se dispersen entre múltiples máquinas.
 Si existe una máquina que almacena una copia de todas las imágenes de disco
 existentes, para modificar todas las copias existentes de una de ellas
 sólo será necesario acudir a esta máquina, modificar los ficheros correspondien
tes y volver a desplegar la imagen de disco.
\end_layout

\begin_layout Standard
Esta máquina, a la que llamaremos 
\series bold
repositorio de imágenes
\series default
, almacenará una copia de todas las imágenes de disco existentes.
 Es importante notar que la única copia de las imágenes 
\emph on
vanilla
\emph default
 y de las imágenes de disco que se están editando se encuentra en el repositorio
 de imágenes.
\end_layout

\begin_layout Subsubsection
El servidor de 
\emph on
cluster
\begin_inset CommandInset label
LatexCommand label
name "sub:El-servidor-de-cluster"

\end_inset


\end_layout

\begin_layout Standard
En un momento dado, varios servidores de máquinas virtuales pueden albergar
 una nueva instancia de cierta máquina virtual.
 Ahora bien, no todos ellos tienen por qué encontrarse en las mismas condiciones.
\end_layout

\begin_layout Standard
Por ejemplo, si los servidores 
\family sans
A
\family default
 y 
\family sans
B
\family default
 pueden albergar una nueva instancia de la máquina virtual 
\family sans
Debian-LSO
\family default
 y el servidor 
\family sans
A
\family default
 alberga más instancias que el servidor 
\family sans
B
\family default
, la experiencia del usuario mejorará si alojamos la nueva instancia la
 nueva instancia en el servidor 
\family sans
B
\family default
.
\end_layout

\begin_layout Standard
Por tanto, necesitamos utilizar una máquina que
\end_layout

\begin_layout Itemize
averigüe periódicamente el estado de todos los servidores de máquinas virtuales
 y del repositorio de imagenes,
\end_layout

\begin_layout Itemize
al atender las peticiones del usuario, compruebe que estas se pueden satisfacer.
 Esto resulta fundamental para ahorrar ancho de banda.
 
\end_layout

\begin_deeper
\begin_layout Standard
Por ejemplo, si el repositorio de imágenes no tiene suficiente espacio en
 disco para alojar una nueva máquina virtual, no tiene sentido transferir
 sus imágenes de disco a un servidor de máquinas virtuales y configurar
 en él la máquina virtual, ya que estas no podrán subirse al repositorio
 de imágenes.
\end_layout

\end_deeper
\begin_layout Itemize
realice el balanceado de carga entre todos los servidores de máquinas virtuales.
\end_layout

\begin_layout Standard
Además, para facilitar la administración del sistema, esta máquina también
 se ocupará de arrancar, parar, dar de alta y borrar servidores de máquinas
 virtuales.
 De ahora en adelante, llamaremos a esta máquina 
\series bold
servidor de 
\emph on
cluster
\series default
.
\end_layout

\begin_layout Standard
Como el lector habrá notado ya, este diseño tiene un serio inconveniente:
 el servidor de 
\emph on
cluster
\emph default
 se convierte un cuello de botella que limita el número máximo de servidores
 de máquinas virtuales.
 
\end_layout

\begin_layout Standard
Para superar esta limitación, podemos crear varias agrupaciones (
\emph on
clusters
\emph default
) de servidores de máquinas virtuales, cada una de las cuales tendrá asociado
 su propio servidor de 
\emph on
cluster
\emph default
 y su propio repositorio de imágenes.
 De esta manera, para atender a un número mayor de usuarios bastará con
 utilizar más 
\emph on
clusters
\emph default
.
 
\end_layout

\begin_layout Standard
Finalmente, es importante notar que cada 
\emph on
cluster
\emph default
 es completamente autónomo, por lo que no tiene por qué compartir máquinas
 virtuales con otros 
\emph on
clusters
\emph default
.
\end_layout

\begin_layout Subsubsection
El servidor web
\end_layout

\begin_layout Standard
Como los servidores de 
\emph on
cluster
\emph default
 son ya un cuello de botella y puede haber varios, la página web de 
\emph on
CygnusCloud
\emph default
 no puede residir en ninguno de ellos.
 Además, por motivos de eficiencia, los servidores de 
\emph on
cluster
\emph default
 no realizan ningún tipo de control de acceso, por lo que no pueden atender
 directamente las peticiones de los usuarios.
 
\end_layout

\begin_layout Standard
Así pues, es necesario utilizar una máquina adicional, el 
\series bold
servidor web
\series default
, para alojar la página web de 
\emph on
CygnusCloud
\emph default
.
 A través de ella,
\end_layout

\begin_layout Itemize
se realizará el control de acceso,
\end_layout

\begin_layout Itemize
se enviarán las peticiones de los usuarios a un servidor de 
\emph on
cluster
\emph default
, y
\end_layout

\begin_layout Itemize
se administrará el sistema.
\end_layout

\begin_layout Subsection
Implementación de una infraestructura 
\emph on
ad-hoc
\end_layout

\begin_layout Standard
Para gestionar los servidores de la infraestructura y las máquinas virtuales,
 es posible utilizar dos soluciones gratuitas y muy populares: 
\emph on
OpenStack
\emph default
 y 
\emph on
OpenNebula
\emph default
.
 Estas herramientas permiten gestionar 
\emph on
clouds
\emph default
 de gran tamaño, e implementan toda la funcionalidad que necesitamos para
 realizar la gestión de los servidores de la infraestructura y de las máquinas
 virtuales.
 No obstante, hemos preferido diseñar e implementar una infraestructura
 
\emph on
ad-hoc
\emph default
 por las siguientes razones:
\end_layout

\begin_layout Itemize

\emph on
OpenStack
\emph default
 y 
\emph on
OpenNebula
\emph default
 proporcionan muchas funciones a costa de consumir muchos recursos.
 Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Objetivos-arquitectura"

\end_inset

, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con coste cero, y para ello es imprescindible aprovechar
 servidores antiguos, para los que estas soluciones pueden ser demasiado
 pesadas.
\end_layout

\begin_layout Itemize

\emph on
OpenStack
\emph default
 y 
\emph on
OpenNebula
\emph default
 son excesivamente grandes.
 Para implementar 
\emph on
CygnusCloud
\emph default
, sólo es necesario utilizar un pequeño subconjunto de la funcionalidad
 que ofrecen 
\emph on
OpenStack
\emph default
 y 
\emph on
OpenNebula
\emph default
.
 Ahora bien, para fijar dicho subcojunto y familiarizarnos con estas soluciones
 habríamos necesitado, como mínimo, tres meses.
 Esto supone casi la tercera parte del tiempo de desarrollo del proyecto,
 por lo que no es aceptable.
\end_layout

\begin_layout Itemize
al implantar una infraestructura 
\emph on
ad-hoc
\emph default
, podemos descubrir por nosotros mismos qué hace falta para suministrar
 un servicio del tipo infraestructura como servicio.
 Así, nos podemos familiarizar con muchas de las tecnologías de virtualización
 existentes en el mercado.
 Además, este conocimiento nos permitirá, en un futuro próximo, comprender
 mejor y más rápidamente el funcionamiento de 
\emph on
OpenStack 
\emph default
y 
\emph on
OpenNebula.
\end_layout

\begin_layout Subsection
Configuración de las redes virtuales en modo NAT
\end_layout

\begin_layout Standard
Para que los usuarios de CygnusCloud puedan utilizar las máquinas virtuales
 para trabajar, es imprescindible que estas accedan, a través de la red
 troncal de la Complutense, al Campus Virtual y a Internet.
 
\end_layout

\begin_layout Standard
La forma más sencilla de lograr esto es configurando un bridge para cada
 máquina virtual.
 Así, estas se conectarán a la red troncal de la Complutense como si fuesen
 un equipo físico más.
 
\end_layout

\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, la red troncal de la UCM sigue utilizando la versión 4 del protocolo IP
 (Internet Protocol).
 Con esta primera alternativa, cada máquina virtual debe tener una dirección
 IP única.
 Y dada la actual escasez de direcciones IP versión 4, esto limita el número
 de máquinas virtuales que pueden estar activas a la vez: puesto que CygnusCloud
 debe poder implantarse con coste cero, 
\end_layout

\begin_layout Itemize
no es posible adquirir nuevos (y costosos) bloques de direcciones IP para
 utilizarlo, y 
\end_layout

\begin_layout Itemize
para que la red troncal de la UCM funcione con normalidad, CygnusCloud no
 puede monopolizar el uso de las direcciones IP disponibles.
 
\end_layout

\begin_layout Standard
Por ello, la solución que acabamos de presentar no es viable.
 
\end_layout

\begin_layout Standard
La alternativa se basa en el uso de NAT (
\emph on
Network Address Translation
\emph default
, traducción de direcciones de red) en los servidores de máquinas virtuales.
 En este caso, 
\end_layout

\begin_layout Itemize
sólo los servidores de máquinas virtuales (y no las máquinas virtuales)
 se conectan a la red troncal de la UCM.
 
\end_layout

\begin_layout Itemize
las máquinas virtuales se conectan a una red virtual, existente sólo en
 el servidor de máquinas virtuales.
 
\end_layout

\begin_layout Itemize
cuando una máquina virtual envíe un datagrama IP, el servidor reescribirá
 su cabecera.
 En la red troncal de la UCM, parecerá que es el servidor de máquinas virtuales
 el que ha creado dicho datagrama.
 
\end_layout

\begin_layout Itemize
cuando el servidor de máquinas virtuales reciba un datagrama IP, reescribirá
 su cabecera y lo reenviará a la máquina virtual correspondiente.
 En la máquina virtual, parecerá que se ha accedido directamente a la red
 troncal de la UCM.
 
\end_layout

\begin_layout Standard
Como cada servidor de máquinas virtuales puede contener varias máquinas
 virtuales activas a la vez, el ahorro de direcciones IP con esta alternativa
 es considerable.
 Por ello, decidimos utilizarla.
\end_layout

\begin_layout Standard
No obstante, nos hemos asegurado de que resulte sencillo crear un bridge
 para cada máquina virtual.
 Así, los administradores del sistema podrán utilizar una u otra alternativa
 cuando lo estimen oportuno.
 
\end_layout

\begin_layout Subsection
Uso del protocolo de escritorio remoto VNC
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-protocolo-VNC"

\end_inset


\end_layout

\begin_layout Standard
Para que los usuarios puedan interactuar con la máquina virtual, es imprescindib
le utilizar un pro- tocolo de escritorio remoto.
 Estos permiten que los clientes interactúen con las máquinas virtuales
 a través de las interfaces gráficas de usuario a las que están acostumbrados.
 En su momento, consideramos dos alternativas: VNC y RDP.
 
\end_layout

\begin_layout Standard

\series bold
VNC
\series default
 (
\emph on
Virtual Network Computing
\emph default
, computación virtual en red) es un protocolo de escritorio remoto independiente
 de la plataforma y desarrollado por Olivetti, Oracle Corporation y, posteriorme
nte, por AT&T.
 
\end_layout

\begin_layout Standard
Por su parte, 
\series bold
RDP 
\series default
(Remote Desktop Protocol, protocolo de escritorio remoto) es un protocolo
 de escritorio remoto desarrollado por Microsoft, utilizado mayoritariamente
 en sistemas Windows.
 Existen clientes y servidores RDP para otros sistemas operativos, como
 
\emph on
Linux
\emph default
 y 
\emph on
Mac OS X
\emph default
.
 
\end_layout

\begin_layout Standard
En términos generales, el funcionamiento de ambos protocolos es el siguiente:
 
\end_layout

\begin_layout Itemize
la máquina que comparte su pantalla se denomina 
\series bold
servidor
\series default
.
 
\end_layout

\begin_layout Itemize
la máquina en la que trabajan los usuarios se denomina 
\series bold
cliente
\series default
.
 
\end_layout

\begin_layout Itemize
cuando el cliente mueve el ratón o pulsa una tecla, 
\end_layout

\begin_deeper
\begin_layout Enumerate
el cliente de escritorio remoto envía los datos correspondientes al servidor
 de escritorio remoto.
 
\end_layout

\begin_layout Enumerate
al recibirlos, el servidor de escritorio remoto generará el evento de teclado
 o ratón correspondiente, que será atendido por el sistema operativo de
 la máquina remota de la forma habitual.
 
\end_layout

\begin_layout Enumerate
el servidor de escritorio remoto averigua qué zonas de la pantalla se han
 actualizado, comprime esta información y se la envía al cliente de escritorio
 remoto.
\end_layout

\begin_layout Enumerate
a partir de esta información, el cliente de escritorio remoto actualiza
 la imagen de la pantalla que ve el usuario.
 
\end_layout

\end_deeper
\begin_layout Standard
Como 
\emph on
CygnusCloud 
\emph default
debe poder implantarse con coste cero, los clientes y servidores de escritorio
 remoto que utilicemos deben ser gratuitos.
 
\end_layout

\begin_layout Standard
En términos generales, las implementaciones libres y gratuitas de RDP y
 VNC tienen un rendimiento bastante similar.
 Además, VNC está integrado en la práctica totalidad de sistemas de virtualizaci
ón, por lo que es posible utilizarlo sin necesidad de instalar nada en las
 máquinas virtuales.
 Por ello, decidimos utilizar el protocolo VNC.
 
\end_layout

\begin_layout Subsection
Uso del gestor de bases de datos MariaDB
\end_layout

\begin_layout Standard
Al inicio del proyecto, estábamos mucho más familiarizados con los gestores
 de bases de datos relacionales que con los no relacionales.
 Por ello, decidimos utilizar un gestor de bases de datos relacional para
 manipular todas las bases de datos de la infraestructura.
 
\end_layout

\begin_layout Standard
En la actualidad, los gestores gratuitos de bases de datos relacionales
 más completos son dos: MySQL y MariaDB.
 
\end_layout

\begin_layout Standard

\series bold
MySQL
\series default
 es el gestor de bases de datos relacionales de código abierto más extendido,
 y se utiliza en servicios web con un gran número de usuarios (como 
\emph on
Facebook
\emph default
, 
\emph on
Wordpress 
\emph default
y 
\emph on
YouTube
\emph default
) y también en muchos otros sistemas de menor tamaño.
 
\end_layout

\begin_layout Standard
Por otra parte, 
\series bold
MariaDB 
\series default
es un gestor de bases de datos relacionales cuya popularidad entre las comunidad
es de 
\emph on
software libre 
\emph default
no ha parado de crecer.
 En los últimos meses, la mayoría de distribuciones 
\emph on
Linux
\emph default
 han decidido reemplazar MySQL por MariaDB, y organizaciones de gran tamaño
 como la 
\emph on
Wikimedia Foundation 
\emph default
han decidido migrar sus bases de datos a MariaDB.
 
\end_layout

\begin_layout Standard
Aunque inicialmente MariaDB estaba basada en la versión 5.5 de MySQL, sus
 nuevas versiones incluyen un gran número de mejoras enfocadas, sobre todo,
 a conseguir un rendimiento superior al de MySQL.
 Además, como MariaDB es totalmente compatible a nivel sintáctico y a nivel
 binario la versión 5.5 de MySQL, resulta muy sencillo reemplazar MySQL por
 MariaDB.
 
\end_layout

\begin_layout Standard
Tras examinar lo que ha sucedido tras la compra de 
\emph on
Sun Microsystems 
\emph default
por parte de 
\emph on
Oracle 
\emph default
en 2009, nos parece que el desarrollo de MySQL ha sufrido un abandono progresivo
, de forma que en la actualidad todo parece indicar que, a medio plazo,
 
\emph on
Oracle 
\emph default
va a dejar de dar soporte al proyecto.
 
\end_layout

\begin_layout Standard
Considerando nuestras necesidades, MariaDB y MySQL son totalmente equivalentes.
 Además, el soporte a medio y a largo plazo de MariaDB parece estar garantizado,
 cosa que no ocurre en el caso de MySQL.
 Por ello, decidimos utilizar MariaDB.
 
\end_layout

\begin_layout Subsection
Uso del hipervisor KVM
\end_layout

\begin_layout Standard
Las dos soluciones de virtualización libres y gratuitas que cuentan con
 el mejor rendimiento son dos: Xen y KVM.
 En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Xen-vs-KVM"

\end_inset

 hicimos una comparativa de ambas y explicamos que, por contar con un rendimient
o muy similar, mejor documentación y mejor soporte que Xen, optamos por
 utilizar KVM.
\end_layout

\begin_layout Subsection
Uso del servidor VNC integrado en KVM 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-del-servidor-VNC-KVM"

\end_inset


\end_layout

\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-protocolo-VNC"

\end_inset

, para poder utilizar el protocolo de escritorio remoto VNC es necesaria
 la existencia de un servidor VNC, que envíe periódicamente al cliente VNC
 las actualizaciones de la pantalla de la máquina virtual.
 
\end_layout

\begin_layout Standard
El uso del servidor VNC integrado en KVM tiene dos grandes ventajas: 
\end_layout

\begin_layout Itemize
no es necesario instalar ni ejecutar código adicional en la máquina virtual,
 lo que simplifica la creación y configuración de máquinas virtuales.
 
\end_layout

\begin_layout Itemize
el usuario de la máquina virtual no puede detener por error el servidor
 VNC.
 Si el servidor VNC se ejecuta en la máquina virtual y el cliente mata su
 proceso por error, la máquina virtual quedará inutilizada.
 
\end_layout

\begin_layout Itemize
la gestión de los datos de conexión a las máquinas virtuales es muy sencilla.
 
\end_layout

\begin_layout Standard
Por otra parte, el uso de un servidor VNC que resida en cada máquina virtual
 tiene una gran ven- taja: aporta mucha más flexibilidad.
 No obstante, en este caso la gestión de los datos de conexión es más compleja,
 ya que estos se fijan en la máquina virtual y son, 
\emph on
a priori
\emph default
, desconocidos para los servidores de la infraestructura.
 
\end_layout

\begin_layout Standard
Tras hacer pruebas para evaluar las dos alternativas, concluimos lo siguiente:
 
\end_layout

\begin_layout Itemize
la gran mayoría de servidores VNC libres y gratuitos proporcionan las mismas
 funciones que el servidor VNC integrado en KVM.
 
\end_layout

\begin_layout Itemize
el rendimiento de ambas es prácticamente idéntico.
 
\end_layout

\begin_layout Standard
Además, como el uso del servidor VNC integrado en KVM simplificaba considerablem
ente la implementación del sistema, finalmente decidimos utilizarlo.
 
\end_layout

\begin_layout Subsection
Uso del cliente VNC noVNC 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-del-cliente-web-noVNC"

\end_inset


\end_layout

\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-aplicacion-web"

\end_inset

, CygnusCloud se utilizará a través de una aplicación web.
 
\end_layout

\begin_layout Standard
Para que los usuarios puedan utilizar las máquinas virtuales, es necesario
 disponer de un cliente VNC, que se conecte al servidor VNC correspondiente.
 Además, este debe integrarse con la aplicación web de forma que, al arrancar
 una máquina virtual, los usuarios puedan utilizarlo para interactuar con
 ella.
\end_layout

\begin_layout Standard
Inicialmente, consideramos modificar un cliente de escritorio VNC libre
 y gratuito.
 Este debía ser multiplataforma y funcionar, como mínimo, en los sistemas
 operativos 
\emph on
Windows 
\emph default
y 
\emph on
Linux
\emph default
.
 En su momento, consideramos tres distintos: TigerVNC, TightVNC y la versión
 
\emph on
open source
\emph default
 de RealVNC.
 
\end_layout

\begin_layout Standard
La principal ventaja de esta alternativa es el rendimiento: dado que estos
 clientes están escritos en C o C++, es posible utilizarlos en equipos poco
 potentes de forma muy satisfactoria.
 No obstante, el hecho de que estos clientes estén escritos en C o C++ supone
 también su mayor inconveniente: es necesario crear una versión distinta
 para cada sistema operativo, algo que no es trivial, y sólo es posible
 utilizarlos en PCs.
 
\end_layout

\begin_layout Standard
Por ello, pensamos en una segunda alternativa: el uso de un cliente VNC
 web.
 Aunque el rendimien- to es menor, podemos utilizar una única versión, que
 funcionará en cualquier sistema operativo y en cualquier dispositivo, incluyend
o PCs, móviles, tabletas,.
 .
 .
 Además, el cliente VNC se integrará mucho mejor con la web de 
\emph on
CygnusCloud
\emph default
.
 
\end_layout

\begin_layout Standard
Y puesto que los equipos antiguos que actualmente se utilizan en la UCM
 tienen suficiente ca- pacidad de procesamiento para utilizar un cliente
 VNC web, nos decantamos por esta segunda alternativa.
 En su momento, valoramos dos clientes VNC web: el applet Java del proyecto
 TigerVNC y noVNC.
 
\end_layout

\begin_layout Standard
Aunque en términos generales el rendimiento del applet Java es satisfactorio,
 su desarrollo ha estado detenido desde el año 2007, y en la actualidad
 carece de todo tipo de soporte.
 
\end_layout

\begin_layout Standard
Por otra parte, noVNC es un cliente VNC relativamente nuevo, escrito íntegrament
e en HTML5 y 
\emph on
JavaScript
\emph default
, que se ha integrado en un gran número de soluciones como 
\emph on
OpenStack
\emph default
, 
\emph on
OpenNebula
\emph default
, 
\emph on
CloudSigma
\emph default
, 
\emph on
Intel MeshCentral
\emph default
,.
 .
 .
 
\end_layout

\begin_layout Standard
Sus principales características son las siguientes: 
\end_layout

\begin_layout Itemize
para utilizarlo, sólo es necesario tener instalado un navegador web razonablemen
te reciente.
 
\end_layout

\begin_layout Itemize
se adapta a los tamaños de pantalla de móviles y tabletas, lo que permite
 utilizarlo en PCs y en estos dispositivos, cada vez más extendidos.
 
\end_layout

\begin_layout Itemize
se distribuye bajo licencia LGPL, lo que permite modificarlo cuanto sea
 necesario a la hora de realizar su integración con la web de CygnusCloud.
 
\end_layout

\begin_layout Itemize
soporta tráfico cifrado 
\end_layout

\begin_layout Itemize
ajusta el número de colores y la resolución de la pantalla en función de
 la potencia del dispositivo que utilizan los usuarios.
 
\end_layout

\begin_layout Standard
Puesto que noVNC tiene características muy interesantes, requiere instalar
 menos software en los PCs en los que trabajan los usuarios y, sobre todo,
 cuenta con un buen soporte, decidimos utilizarlo en CygnusCloud.
 
\end_layout

\begin_layout Subsection
Uso de la librería de virtualización 
\emph on
libvirt
\emph default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-de-libvirt"

\end_inset


\end_layout

\begin_layout Standard
Tal y como mencionamos en la sección
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, cada distribución
\emph on
 Linux
\emph default
 tiene sus propios procedimientos de configuración.
 Así, aunque utilicemos el mismo hipervisor, la forma de manipular las máquinas
 y redes virtuales puede variar de unas distribuciones a otras.
 
\end_layout

\begin_layout Standard
Además, interactuar directamente con el hipervisor no es nada conveniente
 ya que, para utilizar otro diferente, será necesario introducir muchas
 modificaciones.
 
\end_layout

\begin_layout Standard
Para resolver estos dos problemas, no manipulamos las máquinas y las redes
 virtuales directamente: lo hacemos a través de la librería 
\emph on
libvirt
\emph default
.
\end_layout

\begin_layout Standard

\emph on
libvirt
\emph default
 es la librería de virtualización por excelencia.
 Sus principales características son las siguientes:
\end_layout

\begin_layout Itemize
soporta muchos sistemas de virtualización, entre los que están Xen, KVM,
 VirtualBox y VMWare.
\end_layout

\begin_layout Itemize
aunque está escrita en C, dispone de 
\emph on
bindings
\emph default
 para muchos otros lenguajes, como Java o Python.
\end_layout

\begin_layout Itemize
se distribuye bajo licencia LGPL, por lo que es posible utilizarla incluso
 desde 
\emph on
software
\emph default
 privativo.
\end_layout

\begin_layout Itemize
a través de ella, es posible crear y destruir redes virtuales, y también
 crear, destruir y migrar (mover de servidor) máquinas virtuales en ejecución.
\end_layout

\begin_layout Standard
Tras examinar las características de 
\emph on
libvirt
\emph default
 y evaluar nuestras necesidades, concluimos que esta librería nos proporcionaba
 todas las funciones que necesitábamos para utilizar máquinas y redes virtuales
 en 
\emph on
CygnusCloud
\emph default
.
 
\end_layout

\begin_layout Standard
Por otra parte, al inicio del proyecto no encontramos ninguna librería similar,
 por lo que la única alternativa al uso de 
\emph on
libvirt
\emph default
 era interactuar directamente con el hipervisor.
 Así pues, decidimos utilizar 
\emph on
libvirt
\emph default
.
\end_layout

\begin_layout Subsection
Uso de 
\emph on
Python
\emph default
 2.7 como principal lenguaje de programación
\end_layout

\begin_layout Standard
Tal y como mencionamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, debido a las distintas características y procedimientos de configuración
 de las distribuciones 
\emph on
Linux
\emph default
, es altamente recomendable utilizar lenguajes interpretados para facilitar
 la portabilidad del sistema.
 Los lenguajes de este tipo que consideramos al inicio del proyecto fueron
 esencialmente dos: 
\emph on
Java
\emph default
 y 
\emph on
Python
\emph default
.
 
\end_layout

\begin_layout Standard
El uso de 
\emph on
Python 
\emph default
tenía las siguientes ventajas:
\end_layout

\begin_layout Itemize
el grado de adopción de 
\emph on
Python
\emph default
 no ha hecho más que crecer a lo largo de los últimos años, por lo que aprender
 a utilizarlo era muy importante para mejorar nuestras perspectivas laborales.
\end_layout

\begin_layout Itemize
a diferencia de 
\emph on
Java
\emph default
, 
\emph on
Python
\emph default
 es 
\emph on
software
\emph default
 libre, por lo que sus restricciones de uso son considerablemente menores
 que las de 
\emph on
Java
\emph default
.
\end_layout

\begin_layout Itemize
la interacción entre 
\emph on
scripts
\emph default
 y programas escritos en 
\emph on
Python
\emph default
 es claramente mejor en 
\emph on
Python
\emph default
 que en Java.
\end_layout

\begin_layout Itemize
los programas escritos en 
\emph on
Python
\emph default
 son mucho más breves y más fáciles de leer que los programas escritos en
 
\emph on
Java
\emph default
, lo que facilita la comprensión del código.
 
\end_layout

\begin_layout Itemize
para ejecutar un programa 
\emph on
Python
\emph default
 se utiliza su propio código fuente, lo que facilita enormemente la resolución
 de los problemas que aparecen al utilizar componentes de terceros.
\end_layout

\begin_layout Itemize

\emph on
Python
\emph default
 forma parte de la instalación estándar de la inmensa mayoría de distribuciones
 
\emph on
GNU/Linux
\emph default
, lo que simplifica el proceso de instalación de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Standard
Los grandes inconvenientes del uso de 
\emph on
Python
\emph default
 eran principalmente dos:
\end_layout

\begin_layout Itemize
era necesario aprender a utilizar un lenguaje totalmente nuevo para nosotros,
 cosa que no ocurría en el caso de 
\emph on
Java
\emph default
.
\end_layout

\begin_layout Itemize
en general, hay muchas más bibliotecas y 
\emph on
frameworks
\emph default
 escritos en 
\emph on
Java
\emph default
 que escritos en 
\emph on
Python
\emph default
, lo que limitaba las alternativas que podíamos considerar a lo largo del
 desarrollo del proyecto.
\end_layout

\begin_layout Standard
Ante el gran número de ventajas que tenía el uso de 
\emph on
Python
\emph default
, estos dos inconvenientes nos parecieron aceptables, por lo que decidimos
 utilizar 
\emph on
Python
\emph default
 como el principal lenguaje de programación de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Standard
Por otra parte, en la actualidad existen dos familias de versiones de 
\emph on
Python
\emph default
: las derivadas de la versión 2.7 y las derivadas de la versión 3.0.
 Ambas familias son incompatibles a nivel sintáctico, aunque es cierto que
 los cambios que es necesario introducir para utilizar código de la familia
 2.7 en la familia 3.0 suelen ser triviales.
\end_layout

\begin_layout Standard
Ahora bien, la gran mayoría de librerías escritas en 
\emph on
Python
\emph default
, entre las que se encuentran los 
\emph on
bindings
\emph default
 de libvirt y los conectores de MySQL, no han hecho aún la transición a
 la familia 3.0, por lo que no pueden utilizarse con estas versiones.
 Por ello, no hemos tenido más remedio que utilizar la sintaxis de la familia
 2.7.
\end_layout

\begin_layout Standard
No obstante, hemos procurado no hacer uso de ninguna de las características
 de la familia 2.7 que ha desaparecido en la familia 3.0.
 Así, la conversión del código de 
\emph on
CygnusCloud
\emph default
 a la familia 3.0 resultará bastante sencilla.
\end_layout

\begin_layout Subsection
Uso de la librería de red 
\emph on
twisted
\emph default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-de-twisted"

\end_inset


\end_layout

\begin_layout Standard
Puesto que 
\emph on
CygnusCloud
\emph default
 se compone de sistemas diferentes que residen en máquinas distintas, es
 imprescindible comunicarlos.
 Puesto que las máquinas intercambian entre sí un gran volumen de datos,
 es muy conveniente utilizar un servicio orientado a conexión y fiable:
 TCP.
\end_layout

\begin_layout Standard
Para realizar las comunicaciones 
\emph on
socket 
\emph default
a 
\emph on
socket
\emph default
, optamos por utilizar la librería de red 
\emph on
twisted
\emph default
, que se basa en eventos y está íntegramente escrita en Python.
 Las razones que nos llevaron a elegirla fueron las siguientes:
\end_layout

\begin_layout Itemize

\emph on
twisted 
\emph default
es el estándar 
\emph on
de facto
\emph default
 para comunicar programas escritos en 
\emph on
Python
\emph default
 sin necesidad de manipular 
\emph on
sockets
\emph default
 directamente, y forma parte de la instalación predeterminada de la mayoría
 de distribuciones 
\emph on
GNU/Linux
\emph default
 (e incluso de 
\emph on
Mac OS X
\emph default
).
\end_layout

\begin_layout Itemize
existen libros, una ingente cantidad de documentación, foros y tutoriales
 con abundantes explicaciones de uso.
\end_layout

\begin_layout Itemize
se trata de una librería de código abierto, distribuida bajo licencia MIT
 y actualizada periódicamente.
\end_layout

\begin_layout Itemize
soporta los protocolos de transporte TCP, UDP y TCP sobre SSL, por lo que
 proporciona toda la funcionalidad que necesitábamos a lo largo del desarrollo
 del proyecto.
\end_layout

\begin_layout Itemize
soporta IP versión 6.
 Esto permite utilizar 
\emph on
CygnusCloud
\emph default
 en redes IP versión 4 y, a medida que las organizaciones que lo utilicen
 hagan la transición, también en redes IP versión 6.
\end_layout

\begin_layout Standard
El gran inconveniente de esta librería es su propia documentación.
 Debido a su enorme extensión, hay partes desactualizadas, partes que contradice
n a otras, partes sin apenas documentar\SpecialChar \ldots{}
 por lo que en la práctica su uso
 requiere seguir el método de prueba y error.
\end_layout

\begin_layout Standard
No obstante, tal y como expusimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, para facilitar la portabilidad entre distribuciones 
\emph on
GNU/Linux 
\emph default
es imprescindible utilizar mecanismos estandarizados, por lo que nos acabamos
 decantando por utilizar esta librería.
\end_layout

\begin_layout Subsection
Uso del protocolo de transferencia de ficheros FTP 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-del-protocolo-FTP"

\end_inset


\end_layout

\begin_layout Standard
En 
\emph on
CygnusCloud
\emph default
 es necesario transferir imágenes de disco entre el repositorio de imágenes
 y los servidores de máquinas virtuales.
 Para hacerlo, lo más adecuado es utilizar uno de los múltiples protocolos
 de transferencia o de compartición de ficheros existentes.
 En su momento, consideramos los siguientes:
\end_layout

\begin_layout Itemize

\series bold
NFS
\series default
 (
\emph on
Network File System
\emph default
).
 Se trata de un protocolo muy popular en sistemas tipo UNIX.
 La principal ventaja de este protocolo es que, una vez establecida la conexión
 con la máquina remota, es posible acceder a los ficheros compartidos como
 si estuviesen almacenados en el sistema de ficheros de la máquina local.
\end_layout

\begin_layout Itemize

\series bold
Samba
\series default
.
 Se trata de una reimplementación del protocolo conocido como SMB (
\emph on
Server Message Block
\emph default
) o CIFS (
\emph on
Common Internet File System
\emph default
), utilizado para compartir ficheros y dispositivos entre máquinas 
\emph on
Windows
\emph default
.
 Al igual que en el caso de NFS, tras establecer la conexión los ficheros
 compartidos son accesibles desde el sistema de ficheros de la máquina local.
\end_layout

\begin_layout Itemize

\series bold
FTP
\series default
 (
\emph on
File Transfer Protocol
\emph default
).
 Es uno de los primeros protocolos de transferencia de ficheros que se diseñaron
, y por ello también uno de los más inseguros, eficientes y fáciles de utilizar.
 La funcionalidad de FTP es muy básica comparada con la de NFS o Samba:
 sólo permite transferir ficheros entre dos máquinas.
\end_layout

\begin_layout Itemize

\series bold
FTPS
\series default
 (
\emph on
File Transfer Protocol Secure
\emph default
).
 Se trata de una extensión del protocolo FTP que cifra todo el tráfico.
\end_layout

\begin_layout Itemize

\series bold
SFTP
\series default
 (
\emph on
Secure File Transfer Protocol
\emph default
).
 Aunque ambos tengan nombres parecidos, este protocolo no está relacionado
 con el protocolo FTP.
 Se trata de una extensión del protocolo SSH (
\emph on
Secure Shell
\emph default
) que permite transferir ficheros entre máquinas.
\end_layout

\begin_layout Itemize

\series bold
HTTP
\series default
 (
\emph on
HyperText Transfer Protocol
\emph default
) o 
\series bold
HTTPS
\series default
 (
\emph on
HyperText Transfer Procol Secure
\emph default
).
 Estos protocolos, que son la base de las comunicaciones en internet, también
 pueden utilizarse para transferir ficheros entre máquinas.
 La diferencia entre ambos está en el cifrado de los datos: en el caso de
 HTTP, los datos viajan sin cifrar, a diferencia de lo que ocurre con HTTPS.
\end_layout

\begin_layout Standard
Puesto que 
\emph on
CygnusCloud
\emph default
 se utilizará a través de una aplicación web, decidimos utilizar los protocolos
 que más fácilmente pudiesen integrarse con ella.
 Por ello, descartamos los protocolos NFS, Samba y SFTP.
 De esta manera, tuvimos que elegir entre los protocolos FTP, FTPS, HTTP
 y HTTPS.
\end_layout

\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Objetivos-arquitectura"

\end_inset

, 
\emph on
CygnusCloud
\emph default
 debe ser eficiente en el uso de los recursos.
 Desde el punto de vista de la eficiencia, los protocolos FTP y FTPS son
 mejores que HTTP y HTTPS, ya que envían mucha menos información a través
 de la red, y requieren mucho menos procesamiento en las máquinas que intercambi
an ficheros.
 Por ello, descartamos los protocolos HTTP y HTTPS.
\end_layout

\begin_layout Standard
Así pues, al final tuvimos que elegir entre los protocolos FTP y FTPS.
 Finalmente, decidimos utilizar el protocolo FTP por ser el más eficiente
 y rápido de los dos.
 
\end_layout

\begin_layout Standard
Aunque es cierto que el protocolo FTP tiene serios problemas de seguridad,
 no debemos olvidar que 
\emph on
CygnusCloud
\emph default
 se utilizará a través de la red troncal de la Complutense que es, en principio,
 segura.
 No obstante, para permitir el uso de 
\emph on
CygnusCloud
\emph default
 en redes menos seguras, hemos decidido adaptar el diseño y la implementación
 para que sea posible utilizar el protocolo FTPS con poco esfuerzo.
 
\end_layout

\begin_layout Subsection
Uso del servidor FTP 
\family typewriter
pyftpdlib
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-del-servidor-pyftpdlib"

\end_inset


\end_layout

\begin_layout Standard
Para transferir y recibir imágenes de disco en el repositorio de imágenes,
 es necesario que este albergue un servidor FTP.
 En su momento, consideramos dos: 
\family typewriter
pyftpdlib
\family default
 y un servidor FTP construido sobre la librería 
\emph on
twisted
\emph default
.
 
\end_layout

\begin_layout Standard

\family typewriter
pyftpdlib
\family default
 es un servidor FTP ligero íntegramente escrito en 
\emph on
Python
\emph default
.
 Sus principales características son las siguientes: 
\end_layout

\begin_layout Itemize
es gratuito, y se distribuye bajo licencia MIT.
 
\end_layout

\begin_layout Itemize
es muy ligero, eficiente, estable y escalable.
 
\end_layout

\begin_layout Itemize
funciona con cualquier versión de 
\emph on
Python
\emph default
 entre la 2.4 y la 3.3.
 
\end_layout

\begin_layout Itemize
implementa, entre otras cosas, FTPS (FTP Secure, FTP Seguro), el soporte
 de IP versión 6, el uso nombres de fichero Unicode, múltiples protocolos
 de autenticación y el control del ancho de banda utilizado por el servidor
 FTP.
 
\end_layout

\begin_layout Itemize
dispone de callbacks para detectar múltiples eventos, tales como las conexiones
 y desconexiones de clientes, el inicio y la finalización de transferencia
 de archivos,.
 .
 .
 
\end_layout

\begin_layout Itemize
está muy bien documentado.
 
\end_layout

\begin_layout Standard
La alternativa a 
\family typewriter
pyftpdlib
\family default
, construida sobre la librería de red 
\emph on
twisted
\emph default
, tiene las siguientes características: 
\end_layout

\begin_layout Itemize
es también gratuita, y también se distribuye bajo licencia MIT.
 
\end_layout

\begin_layout Itemize
el servidor FTP consume muy pocos recursos.
 
\end_layout

\begin_layout Itemize
funciona con cualquier versión de 
\emph on
Python
\emph default
 entre la 2.4 y la 2.7.
 
\end_layout

\begin_layout Itemize
implementa el soporte de IP versión 6 y los protocolos de autenticación
 más básicos.
 
\end_layout

\begin_layout Itemize
también dispone de 
\emph on
callbacks 
\emph default
para detectar conexiones, desconexiones, errores de autenticación,\SpecialChar \ldots{}
 
\end_layout

\begin_layout Standard
Para decidir entre ambos, los probamos durante algunos días, tras las cuales
 concluimos lo siguiente: 
\end_layout

\begin_layout Itemize
como viene siendo habitual en la librería de red 
\emph on
twisted
\emph default
, la documentación del servidor FTPconstruido sobre 
\emph on
twisted 
\emph default
es incompleta y en muchos casos incoherente.
 
\end_layout

\begin_layout Itemize
el rendimiento del servidor FTP 
\family typewriter
pyftpdlib
\family default
 es superior al del servidor FTP basado en la librería 
\emph on
twisted
\emph default
.
 
\end_layout

\begin_layout Itemize
el servidor FTP 
\family typewriter
pyftpdlib
\family default
 era mucho más fácil de integrar con el repositorio de imágenes que el servidor
 FTP que utiliza la librería 
\emph on
twisted
\emph default
.
 
\end_layout

\begin_layout Standard
Además, dado que el servidor 
\family typewriter
pyftpdlib
\family default
 
\end_layout

\begin_layout Itemize
ofrece muchas más funciones que la otra alternativa, y algunas, como el
 control del ancho de banda utilizado por el servidor FTP son muy interesantes,
 y que
\end_layout

\begin_layout Itemize
soporta la versión 3 de 
\emph on
Python
\emph default
, lo que facilita la adaptación del código de 
\emph on
CygnusCloud
\emph default
 para que funcione con las nuevas versiones de 
\emph on
Python
\emph default
.
 
\end_layout

\begin_layout Standard
decidimos utilizar 
\family typewriter
pyftpdlib 
\family default
como servidor FTP del repositorio de imágenes.
 
\end_layout

\begin_layout Subsection
Almacenamiento de las imágenes de disco en formato comprimido
\begin_inset CommandInset label
LatexCommand label
name "sub:Almacenamiento-imágenes-zip"

\end_inset


\end_layout

\begin_layout Standard
Para aprovechar al máximo el espacio en disco disponible en el repositorio
 y reducir el ancho de banda utilizado para transferir imágenes de disco
 entre él y los servidores de máquinas virtuales, estas deben almacenarse
 y transferirse en formato comprimido.
\end_layout

\begin_layout Standard
Puesto que 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con coste cero, es necesario utilizar formatos de
 compresión libres y gratuitos.
 En su momento, consideramos los formatos 
\family sans
7-zip
\family default
, 
\family sans
zip
\family default
, 
\family sans
tar
\family default
, 
\family sans
lzma
\family default
, 
\family sans
.tar.gz
\family default
, 
\family sans
.tar.bz2
\family default
, 
\family sans
.tar.lzma
\family default
 y 
\family sans
.tar.xz
\family default
.
\end_layout

\begin_layout Standard
Para decidir entre ellos, hicimos un pequeño 
\emph on
benchmark
\emph default
, utilizando todos estos formatos para comprimir una imagen de disco de
 4,1 GB.
 En todas las pruebas,
\end_layout

\begin_layout Itemize
utilizamos la misma máquina, con una CPU Intel Core i7 2330QM, 8 GB de memoria
 RAM DDR3 a 1333 MHz y un disco duro Serial-ATA 2 a 7200 RPM.
\end_layout

\begin_layout Itemize
utilizamos la misma versión del kernel Linux, la 3.2.0.
\end_layout

\begin_layout Itemize
las mediciones temporales se realizaron con la orden 
\family typewriter
time
\family default
, consideran únicamente el tiempo de CPU, omitiendo los bloqueos provocados
 por las operaciones de entrada/salida y por los cambios de contexto forzosos
 que provoca el planificador del sistema operativo.
\end_layout

\begin_layout Itemize
el uso promedio medio de la CPU, de la RAM y del disco se midieron con las
 herramientas 
\family typewriter
iostat
\family default
 y 
\family typewriter
pidstat
\family default
, pertenecientes al paquete 
\family typewriter
sysstat
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
El paquete 
\family typewriter
sysstat
\family default
 puede descargarse desde 
\begin_inset CommandInset href
LatexCommand href
target "http://sebastien.godard.pagesperso-orange.fr/"

\end_inset


\end_layout

\end_inset


\family default
.
 Estas herramientas obtienen la información que muestran del pseudo-sistema
 de ficheros 
\family typewriter
/proc
\family default
.
\end_layout

\begin_layout Itemize
se especificó un nivel de compresión medio.
\end_layout

\begin_layout Standard
Los resultados del 
\emph on
benchmark
\emph default
 aparecen en las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tiempos-de-compresión-desc-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tamaño-del-fichero-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uso-promedio-CPU-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uso-promedio-RAM-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tasa-de-lectura-benchmark"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tasa-de-escritura-benchmark"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Decisiones de diseño/Comparativa compresores/Tiempos compresión y descompresión.pdf
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tiempos-de-compresión-desc-benchmark"

\end_inset

Tiempos de compresión y descompresión
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Decisiones de diseño/Comparativa compresores/Tamaño fichero comprimido.pdf
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tamaño-del-fichero-benchmark"

\end_inset

Tamaño del fichero comprimido
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Decisiones de diseño/Comparativa compresores/Uso promedio CPU.pdf
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Uso-promedio-CPU-benchmark"

\end_inset

Uso promedio de CPU
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Decisiones de diseño/Comparativa compresores/Uso promedio RAM.pdf
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Uso-promedio-RAM-benchmark"

\end_inset

Uso promedio de memoria RAM
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Decisiones de diseño/Comparativa compresores/Tasa lectura disco.pdf
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tasa-de-lectura-benchmark"

\end_inset

Tasa de lectura de disco (promedio)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Decisiones de diseño/Comparativa compresores/Tasa escritura disco.pdf
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tasa-de-escritura-benchmark"

\end_inset

Tasa de escritura a disco (promedio)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como el lector habrá observado ya, en las gráficas no aparecen los formatos
 
\family sans
lzma
\family default
, 
\family sans
tar.lzma
\family default
 y 
\family sans
tar.xz
\family default
.
 Esto se debe a que 
\end_layout

\begin_layout Itemize
la compresión y la descompresión de ficheros son mucho más lentas que las
 del formato 
\family sans
7-zip
\family default
,
\end_layout

\begin_layout Itemize
la tasa de compresión es muy similar a la del formato 
\family sans
zip
\family default
, y
\end_layout

\begin_layout Itemize
el uso de CPU y de memoria RAM es superior al del formato 
\family sans
zip
\family default
.
\end_layout

\begin_layout Standard
Por ello, los descartamos.
 Si observamos las gráficas de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tiempos-de-compresión-desc-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tamaño-del-fichero-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uso-promedio-CPU-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uso-promedio-RAM-benchmark"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tasa-de-lectura-benchmark"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tasa-de-escritura-benchmark"

\end_inset

, podemos concluir que 
\end_layout

\begin_layout Itemize
el formato 
\family sans
7-zip
\family default
 consigue la tasa de compresión más alta, aunque lo hace a costa de aumentar
 muchísimo el tiempo de compresión y extracción, el uso promedio de CPU
 y el uso promedio de memoria RAM.
\end_layout

\begin_layout Itemize
los formatos 
\family sans
zip
\family default
, 
\family sans
.tar.gz
\family default
 y 
\family sans
.tar.bz2
\family default
 alcanzan tasas de compresión muy similares.
 Esto se debe a que los tres usan variantes del algoritmo de Lempel-Ziv.
 
\end_layout

\begin_deeper
\begin_layout Standard
No obstante, los compresores y descompresores de los dos últimos son algo
 más lentos que los del formato 
\family sans
zip
\family default
, utilizan más tiempo de CPU y realizan más accesos a disco.
\end_layout

\end_deeper
\begin_layout Itemize
el formato 
\family sans
tar
\family default
 alcanza la tasa de compresión más baja.
 Por ello, es el que menos recursos usa.
 Las elevadas tasas de lectura y escritura en disco se deben a que, al comprimir
 un fichero utilizando el formato 
\family sans
tar
\family default
, se escribe prácticamente una copia del fichero original a disco.
\end_layout

\begin_layout Standard
A la vista de estos resultados, descartamos el formato 
\family sans
7-zip
\family default
 por ser demasiado lento y consumir demasiados recursos, y el formato 
\family sans
tar
\family default
 por alcanzar tasas de compresión demasiado bajas.
\end_layout

\begin_layout Standard
Así pues, tuvimos que elegir entre los formatos 
\family sans
zip
\family default
, 
\family sans
tar.gz
\family default
 y 
\family sans
.tar.bz2
\family default
.
 De todos ellos, escogimos el formato 
\family sans
zip
\family default
 por las siguientes razones:
\end_layout

\begin_layout Itemize
aunque al comprimir y descomprimir se utiliza más memoria RAM que en el
 caso del formato 
\family sans
.tar.gz
\family default
, los usos de la CPU y del disco son inferiores, por lo que los procesos
 de compresión afectarán menos al rendimiento global del servidor.
\end_layout

\begin_layout Itemize
es posible añadir ficheros a un fichero 
\family sans
zip 
\family default
ya creado sin necesidad de descomprimirlo.
 En el caso de los formatos 
\family sans
.tar.gz
\family default
 y 
\family sans
.tar.bz2
\family default
, esto no es posible.
\end_layout

\begin_layout Subsection
Uso de imágenes 
\emph on
copy-on-write
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-de-imágenes-cow"

\end_inset


\end_layout

\begin_layout Standard
El sistema operativo y los programas instalados en cada máquina virtual
 ocupan una cantidad considerable de espacio en disco.
 Además, el sistema operativo y las utilidades básicas no suelen ser suficientes
 para trabajar, por lo que frecuentemente es necesario instalar 
\emph on
software 
\emph default
adicional.
 Esto requiere aún más espacio en disco.
\end_layout

\begin_layout Standard
Supongamos que el sistema operativo y los programas que se van a utilizar
 en la máquina virtual ocupan 12 GB, que el fichero de paginación ocupa
 1 GB y los usuarios disponen de 2 GB para almacenar sus datos temporales.
 En este caso, cada máquina virtual activa requerirá
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
12+1+2=15\textrm{ GB de espacio en disco}
\]

\end_inset


\end_layout

\begin_layout Standard
Como varios usuarios pueden compartir el mismo servidor de máquinas virtuales,
 es posible que existan varias máquinas virtuales activas de este tipo.
 Por ejemplo, si existen tres, serán necesarios
\begin_inset Formula 
\[
15\cdot3=45\textrm{ GB de espacio libre en disco}
\]

\end_inset


\end_layout

\begin_layout Standard
Este comportamiento presenta dos graves inconvenientes:
\end_layout

\begin_layout Itemize
las máquinas virtuales activas consumen mucho espacio en disco, lo que limitará
 el número de máquinas virtuales activas, y también el número de máquinas
 virtuales diferentes que puede albergar un mismo servidor de máquinas virtuales.
 Esto último no es nada conveniente para sacar el máximo partido a los servidore
s de máquinas virtuales.
\end_layout

\begin_layout Itemize
el arranque de una máquina virtual será muy lento.
 Retomando el ejemplo anterior, la máquina sólo se podrá arrancar cuando
 se copien los 12 GB que ocupan el sistema operativo y los programas.
 Esto, en un disco duro relativamente moderno, puede llevar más de cinco
 minutos.
\end_layout

\begin_layout Standard
Para superar estas limitaciones, sólo existen dos alternativas:
\end_layout

\begin_layout Itemize
limitar el tamaño máximo de las imágenes, lo que limita también la versatilidad
 de 
\emph on
CygnusCloud
\emph default
, o
\end_layout

\begin_layout Itemize
hacer que todas las máquinas virtuales activas del mismo tipo compartan
 la instalación del sistema operativo y de los programas.
 Esto es posible utilizando imágenes 
\emph on
copy-on-write
\emph default
.
\end_layout

\begin_layout Standard
Tras considerar la gran cantidad de espacio en disco que ocupan las instalacione
s de 
\emph on
Windows
\emph default
, la primera alternativa no nos pareció aceptable.
 Por ello, decidimos utilizar imágenes 
\emph on
copy-on-write
\emph default
 para almacenar el sistema operativo y los programas instalados en las máquinas
 virtuales.
\end_layout

\begin_layout Standard
Así, si en el ejemplo anterior utilizásemos imágenes 
\emph on
copy-on-write
\emph default
, para alojar las tres máquinas virtuales activas necesitaríamos, aproximadament
e,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
12+3\cdot(1+2)=21\textrm{ GB de espacio libre en disco}
\]

\end_inset


\end_layout

\begin_layout Standard
cantidad muy inferior a la del del caso anterior.
\end_layout

\begin_layout Subsection
Uso de dos discos duros en cada máquina virtual 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-de-dos-discos-duros"

\end_inset


\end_layout

\begin_layout Standard
El uso de imágenes 
\emph on
copy-on-write
\emph default
 nos permite ahorrar una gran cantidad de espacio en disco, pero también
 tiene un serio inconveniente: las escrituras a disco son mucho más lentas
 que en el caso de las imágenes normales.
 Esta diferencia se debe al propio funcionamiento de las escrituras.
 
\end_layout

\begin_layout Standard
Cuando se escribe en una imagen de disco normal, se consulta una cabecera
 y se actualizan los 
\emph on
bytes
\emph default
 correspondientes del fichero.
 Así, las escrituras en este tipo de imágenes son prácticamente igual de
 rápidas que las escrituras directas a disco.
 
\end_layout

\begin_layout Standard
En cambio, cuando se escribe en una imagen de disco 
\emph on
copy-on-write
\emph default
,
\end_layout

\begin_layout Enumerate
se calculan los cambios que introduce la escritura con respecto a la imagen
 original.
\end_layout

\begin_layout Enumerate
los cambios se escriben a disco, pero no en el fichero de imagen original.
\end_layout

\begin_layout Standard
Debido a esto, las escrituras en imágenes 
\emph on
copy-on-write
\emph default
 son más lentas.
 Asimismo, también serán más lentas las posteriores lecturas de los datos
 escritos: para obtenerlos, hay que aplicar los cambios sobre el contenido
 del fichero de imagen original.
\end_layout

\begin_layout Standard
Por tanto, si nos limitamos a utilizar imágenes 
\emph on
copy-on-write
\emph default
, el rendimiento de la máquina virtual se resentirá mucho, ya que las lecturas
 y escrituras en el fichero de paginación son muy frecuentes, sobre todo
 en el caso de sistemas operativos 
\emph on
Windows
\emph default
.
\end_layout

\begin_layout Standard
Para superar esta limitación, decidimos utilizar dos imágenes de disco en
 cada máquina virtual:
\end_layout

\begin_layout Itemize
una imagen del tipo 
\emph on
copy-on-write
\emph default
, para almacenar el sistema operativo y los programas, y
\end_layout

\begin_layout Itemize
una imagen normal para almacenar el fichero de paginación y los datos temporales
 de los usuarios.
\end_layout

\begin_layout Standard
Tras realizar esta separación, siguen realizándose escrituras en la imagen
 
\emph on
copy-on-write
\emph default
.
 No obstante, estas son muy poco frecuentes, por lo que esta solución nos
 permite ahorrar espacio en disco y garantizar que el rendimiento de la
 máquina virtual no se resentirá de forma apreciable.
\end_layout

\begin_layout Subsection
Uso del formato de imagen 
\family typewriter
qcow2
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-del-formato-qcow2"

\end_inset


\end_layout

\begin_layout Standard
En la sección anterior concluimos que es necesario el uso de dos imágenes
 de disco en cada máquina virtual: una 
\emph on
copy-on-write
\emph default
, que almacenará los datos del sistema operativo y de las aplicaciones instalada
s, y una imagen normal, que almacenará el fichero de paginación y los datos
 temporales de los usuarios.
 
\end_layout

\begin_layout Standard
Para crear las imágenes 
\emph on
copy-on-write
\emph default
, tuvimos que decidir entre dos formatos: 
\family typewriter
qcow
\family default
 y 
\family typewriter
qcow2
\family default
 (
\emph on
Qemu Copy-On-Write 
\emph default
y 
\emph on
Qemu Copy-On-Write
\emph default
 2).
 Sus principales características son las siguientes: 
\end_layout

\begin_layout Itemize
tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:KVM"

\end_inset

, el hipervisor KVM utiliza los modelos de dispositivo del emulador 
\emph on
Qemu
\emph default
.
 Como 
\family typewriter
qcow
\family default
 y 
\family typewriter
qcow2
\family default
 son los formatos de imagen nativos de 
\emph on
Qemu
\emph default
, son también los formatos de imagen nativos de KVM.
 
\end_layout

\begin_layout Itemize
pueden utilizarse como imágenes 
\emph on
copy-on-write
\emph default
 o como imágenes de disco normales.
 
\end_layout

\begin_layout Itemize
soportan compresión 
\family typewriter
zlib
\family default
.
 
\end_layout

\begin_layout Itemize
las imágenes 
\family typewriter
qcow
\family default
 y 
\family typewriter
qcow2 
\family default
crecen dinámicamente a medida que se escriben datos en el disco duro de
 la máquina virtual.
 Así, el espacio libre en las imágenes no ocupará espacio en disco en los
 servidores de máquinas virtuales.
 
\end_layout

\begin_layout Standard
La principal diferencia existente entre los formatos 
\family typewriter
qcow
\family default
 y 
\family typewriter
qcow2
\family default
 está en las escrituras en modo 
\emph on
copy-on-write
\emph default
.
 No obstante, dado que este es un aspecto de muy bajo nivel, no lo discutiremos
 aquí.
 
\end_layout

\begin_layout Standard
Teniendo en cuenta que 
\end_layout

\begin_layout Itemize
KVM soporta los formatos 
\family typewriter
qcow
\family default
 y 
\family typewriter
qcow2
\family default
 
\end_layout

\begin_layout Itemize
resulta muy sencillo hacer conversiones entre ambos formatos 
\end_layout

\begin_layout Itemize
el formato 
\family typewriter
qcow2
\family default
 es el sucesor natural del formato 
\family typewriter
qcow 
\end_layout

\begin_layout Itemize
con independencia de cuál de los dos formatos utilicemos, el rendimiento
 es prácticamente idéntico 
\end_layout

\begin_layout Standard
optamos por utilizar el formato 
\family typewriter
qcow2
\family default
 en las imágenes 
\emph on
copy-on-write
\emph default
.
 
\end_layout

\begin_layout Standard
Por otra parte, en el caso de las imágenes de disco que almacenan el fichero
 de paginación y los datos temporales de los usuarios consideramos los siguiente
s formatos: 
\end_layout

\begin_layout Itemize

\series bold
\emph on
raw
\series default
\emph default
.
 En realidad, no se trata de un formato de imagen, sino de un fichero que
 contiene directamente los bytes almacenados en el disco duro de la máquina
 virtual.
 
\end_layout

\begin_deeper
\begin_layout Standard
Puesto que para acceder a disco basta con leer o escribir directamente en
 este fichero, esta es la alternativa que proporciona mejor rendimiento.
 No obstante, tiene un serio inconveniente: el fichero de la imagen siempre
 debe tener el mismo tamaño que el disco duro que representa, por lo que
 el espacio libre en ese disco duro ocupa espacio en disco del servidor
 de máquinas virtuales.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
qcow2
\family default
.
 Para que el rendimiento sea adecuado, en estos casos hay que deshabilitar
 el modo 
\emph on
copy-on-write
\emph default
, utilizando las imágenes 
\family typewriter
qcow2
\family default
 como imágenes normales.
 
\end_layout

\begin_layout Itemize

\family typewriter
vmdk
\family default
.
 Se trata del formato nativo del sistema de virtualización VMWare, también
 soportado por 
\emph on
Qemu
\emph default
 (y, por tanto, por KVM).
 
\end_layout

\begin_layout Standard
Nuevamente, resulta muy sencillo realizar conversiones entre estos formatos.
 De todas formas, el hipervisor Xen no soporta el formato 
\family typewriter
vmdk
\family default
, por lo que, de cara a facilitar un hipotético cambio de hipervisor, resulta
 más conveniente utilizar los formatos 
\emph on
raw 
\emph default
o 
\family typewriter
qcow2
\family default
.
 
\end_layout

\begin_layout Standard
Y puesto que al utilizar el formato 
\emph on
raw
\emph default
 se está desperdiciando espacio en disco en muchos casos, decidimos utilizar
 el formato 
\family typewriter
qcow2 
\family default
en las imágenes que almacenan el fichero de paginación y los datos temporales
 del usuario.
 
\end_layout

\begin_layout Standard
Finalmente, para que el rendimiento de las máquinas virtuales no se resienta
 en exceso, decidimos deshabilitar la compresión 
\family typewriter
zlib
\family default
.
 De esta manera, el rendimiento de la máquina virtual no se degradará de
 forma apreciable con respecto al uso de imágenes 
\emph on
raw
\emph default
.
 
\end_layout

\begin_layout Subsection
Creación de seis familias de máquinas virtuales
\end_layout

\begin_layout Standard
Las máquinas virtuales de CygnusCloud pueden utilizarse con fines muy diversos.
 Por ejemplo, mientras que unas pueden tener instalada una suite ofimática
 y las herramientas básicas para navegar por internet, otras pueden tener
 instalado un entorno de desarrollo de desarrollo integrado.
 
\end_layout

\begin_layout Standard
En cualquier caso, todos estos usos no explotan igual la potencia del hardware
 de la máquina virtual.
 Retomando el ejemplo anterior, 
\end_layout

\begin_layout Itemize
en la primera máquina, que tiene instalada la suite ofimática y las herramientas
 básicas para navegar por internet, el uso de CPU y de memoria RAM será
 bastante reducido.
 Además, se utilizará poco espacio en disco.
 
\end_layout

\begin_layout Itemize
en la segunda máquina, que tiene instalado el entorno de desarrollo integrado,
 se utilizará más memoria RAM y espacio en disco.
 Además, durante los procesos de compilación, el uso de CPU será muy superior
 al de la máquina anterior.
 
\end_layout

\begin_layout Standard
Además, los recursos utilizados por el sistema operativo varían de unas
 familias de sistemas operativos a otras.
 Por ejemplo, 
\end_layout

\begin_layout Itemize
los sistemas operativos 
\emph on
Windows
\emph default
 de última generación requieren un mínimo de 9 GB de espacio en disco, al
 menos 1 GB de memoria RAM y un fichero de paginación que sea, como mínimo,
 1,5 veces el tamaño de la memoria RAM, y 
\end_layout

\begin_layout Itemize
las distribuciones más recientes que utilizan el kernel 
\emph on
Linux
\emph default
 requieren, de media, unos 2 GB de espacio en disco, 512 MB de memoria RAM
 y un fichero de paginación que sea tan grande como la memoria RAM.
 
\end_layout

\begin_layout Standard
Así, desde el punto de vista del aprovechamiento de los recursos, no resulta
 adecuado que todas las máquinas virtuales tengan las mismas características.
 De hacerlo, 
\end_layout

\begin_layout Itemize
se estarían desperdiciando recursos en las máquinas que tienen instalado
 el software menos exigente en lo que al consumo de recursos se refiere,
 y 
\end_layout

\begin_layout Itemize
en muchos casos, no se dispondría de recursos suficientes en las máquinas
 que tienen instalado 
\emph on
software 
\emph default
que consume muchos recursos.
 
\end_layout

\begin_layout Standard
Por ello, hemos creado seis familias de máquinas virtuales.
 Tres de ellas están asociadas a los sistemas operativos Windows, y las
 tres restantes están asociadas a los sistemas operativos Linux.
 Sus características se recogen en los cuadros 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Características-vanilla-win"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Características-vanilla-linux"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Imagen
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
vCPUs
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
RAM
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Disco
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Variante SO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
SO y 
\emph on
software
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Datos / paginación
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
20 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2 GB / 2 GB (4 GB en total)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
32 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
30 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
4 GB / 4 GB (8 GB en total)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
32 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
big
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
3 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
40 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
8 GB / 8 GB (16 GB en total)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
64 bits
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Características-vanilla-win"

\end_inset

Características de las imágenes 
\emph on
vanilla 
\emph default
Windows
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Imagen
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
vCPUs
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
RAM
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Disco
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Variante SO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
SO y 
\emph on
software
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\series bold
Datos / paginación
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
1 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
5 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2 GB / 1 GB (3 GB en total)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
64 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
2 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
10 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
4 GB / 2 GB (6 GB en total)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
64 bits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
\emph on
big
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
3 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
15 GB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
8 GB / 4 GB (12 GB en total)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
64 bits
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Características-vanilla-linux"

\end_inset

Características de las imágenes 
\emph on
vanilla 
\emph default
Linux
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A la hora de fijar las características de las imágenes 
\emph on
Windows
\emph default
, hemos considerado los siguientes aspectos: 
\end_layout

\begin_layout Itemize
tras desinstalar los componentes multimedia y las características del sistema
 operativo que no se usan con frecuencia, una instalación de 
\emph on
Windows
\emph default
 7 ocupa 9 GB (en el caso de una versión de 32 bits) o 12 GB (en el caso
 de una versión de 64 bits).
 
\end_layout

\begin_layout Itemize
en 
\emph on
Windows
\emph default
, se recomienda que el tamaño del fichero de paginación sea 1,5 veces el
 tamaño de la memoria RAM.
 De acuerdo a nuestra experiencia, en Windows se utiliza este fichero de
 forma intensiva, por lo que hemos decidido que su tamaño sea 2 veces el
 tamaño de la memoria RAM.
 
\end_layout

\begin_layout Itemize
las instalaciones de programas razonablemente complejos (como 
\emph on
Microsoft Office
\emph default
) ocupan, en media, unos 2 GB de espacio en disco.
 
\end_layout

\begin_layout Itemize
las versiones de Windows de 64 bits utilizan, aproximadamente, el doble
 de memoria RAM que las de 32 bits.
 Siempre que no se utilicen las instrucciones de 64 bits de la CPU, cosa
 que en la actualidad ocurre con muy poca frecuencia, el rendimiento de
 todas las aplicaciones en ambas versiones es prácticamente el mismo.
 
\end_layout

\begin_deeper
\begin_layout Standard
Como las familias de imágenes 
\emph on
Windows small 
\emph default
y 
\emph on
medium 
\emph default
no cuentan con 4 GB de RAM, en principio no sacarán partido a un sistema
 operativo de 64 bits, por lo que en estos casos recomendamos el uso de
 sistemas operativos de 32 bits.
 
\end_layout

\begin_layout Standard
Por otra parte, aunque la familia de imágenes 
\emph on
Windows big
\emph default
 tampoco cuenta con 4 GB de memoria RAM, sí es posible que, por su complejidad,
 el software instalado en estas máquinas saque partido a las instrucciones
 de 64 bits de la CPU, por lo que en este caso recomendamos el uso de un
 sistema operativo de 64 bits.
 
\end_layout

\begin_layout Standard
De todas formas, estas recomendaciones no tienen por qué cumplirse y, en
 caso de que se ignoren, el rendimiento de la infraestructura no se verá
 afectado.
 
\end_layout

\end_deeper
\begin_layout Standard
Por otra parte, cuando fijamos las características de las imágenes 
\emph on
Linux
\emph default
 consideramos los siguientes aspectos: 
\end_layout

\begin_layout Itemize
en la mayoría de distribuciones Linux, cuando hay mucho software instalado
 se suelen utilizar unos 7 GB de espacio en disco (menos si se usa un entorno
 de escritorio ligero).
 
\end_layout

\begin_layout Itemize
las versiones de 64 bits de Linux usan la misma cantidad de RAM y espacio
 en disco que las de 32 bits.
 Además, permiten utilizar las instrucciones de 64 bits de los procesadores
 del servidor.
 Por ello, recomendamos el uso de versiones de 
\emph on
Linux
\emph default
 de 64 bits.
 
\end_layout

\begin_deeper
\begin_layout Standard
Nuevamente, el rendimiento de la infraestructura no se verá afectado si
 se ignora esta recomendación.
\end_layout

\end_deeper
\begin_layout Standard
Finalmente, como el lector habrá notado ya, todas las máquinas virtuales
 tienen asignada una generosa cantidad de espacio en disco.
 Con esto, pretendemos incentivar el uso de las máquinas virtuales con menos
 CPUs y menos memoria RAM, ya que estos recursos son mucho más escasos que
 el espacio en disco.
 
\end_layout

\begin_layout Standard
Además, tal y como contamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-del-formato-qcow2"

\end_inset

, las imágenes de disco que utilizamos crecen dinámicamente a medida que
 se escribe en el disco duro de la máquina virtual.
 Por ello, el espacio libre en las imágenes no ocupará espacio en disco
 en el servidor ni en el repositorio de imágenes, y la existencia de discos
 duros de gran tamaño infrautilizados no supone un desperdicio de recursos.
 
\end_layout

\begin_layout Subsection
Uso de los servidores de edición de imágenes
\end_layout

\begin_layout Standard
La creación y edición de imágenes de disco requiere, entre otras cosas,
\end_layout

\begin_layout Itemize
el intercambio de ficheros de gran tamaño entre el repositorio de imágenes
 y un servidor de máquinas virtuales, lo que consume mucho ancho de banda,
 y
\end_layout

\begin_layout Itemize
la compresión y descompresión de ficheros de gran tamaño en el servidor
 de máquinas virtuales, lo que consume mucho tiempo de CPU y realiza muchos
 accesos a disco.
\end_layout

\begin_layout Standard
Por tanto, si un servidor de máquinas virtuales que se utiliza para editar
 imágenes alberga otras máquinas virtuales, el rendimiento de estas se degradará
 cuando
\end_layout

\begin_layout Itemize
se compriman y descompriman ficheros, o cuando
\end_layout

\begin_layout Itemize
se transfieran ficheros entre el servidor de máquinas virtuales y el repositorio
 de imágenes, ya que en estos casos el tráfico FTP, el tráfico VNC y el
 tráfico generado por las propias máquinas virtuales competirán por el ancho
 de banda del enlace que conecta el servidor de máquinas virtuales a la
 red de la UCM.
\end_layout

\begin_layout Standard
Así, si no tomamos medidas, un reducido número de usuarios que pueden crear
 o editar imágenes de disco (los profesores y los administradores) pueden
 perjudicar gravemente a la gran mayoría de usuarios, que se limitan a trabajar
 con las máquinas virtuales ya configuradas.
\end_layout

\begin_layout Standard
Para evitar esto, hemos decidido que los procesos de creación y edición
 de imágenes sólo tengan lugar en cierto número de servidores de máquinas
 virtuales, los 
\series bold
servidores de edición de imágenes
\series default
.
 
\end_layout

\begin_layout Subsection
Cifrado selectivo del tráfico 
\begin_inset CommandInset label
LatexCommand label
name "sub:Cifrado-selectivo-del-tráfico"

\end_inset


\end_layout

\begin_layout Standard
El tráfico que genera el sistema 
\emph on
CygnusCloud
\emph default
 puede clasificarse en dos grupos:
\end_layout

\begin_layout Itemize
tráfico generado por el protocolo de escritorio remoto VNC.
 Se trata del tráfico mayoritario, y permite a los usuarios manipular sus
 máquinas virtuales utilizando las interfaces gráficas a las que están acostumbr
ados.
\end_layout

\begin_layout Itemize
tráfico generado por los protocolos de 
\emph on
CygnusCloud
\emph default
.
 Este tráfico es minoritario, y se genera al procesar peticiones como la
 instanciación y destrucción de máquinas virtuales, la recopilación de estadísti
cas dentro de los distintos 
\emph on
clusters
\emph default
, \SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Considerando que la red de la UCM es ya de por sí segura, no sería necesario
 cifrar el tráfico.
 No obstante, para garantizar el correcto funcionamiento del sistema 
\emph on
CygnusCloud
\emph default
, todas las comunicaciones salvo las conexiones a escritorio remoto están
 protegidas mediante cifrado SSL.
 Esto nos permite:
\end_layout

\begin_layout Itemize
ahorrar ancho de banda.
 Como el tráfico mayoritario está sin cifrar, es posible utilizar el ancho
 de banda para soportar más conexiones a escritorio remoto (y, por tanto,
 dar servicio a un mayor número de usuarios).
\end_layout

\begin_layout Itemize
monitorizar fácilmente las actividades que realizan los usuarios en sus
 máquinas virtuales.
\end_layout

\begin_layout Itemize
aumentar la robustez del sistema frente a ataques desde la propia red de
 la UCM.
 Gracias al cifrado de los datos generados por los protocolos, lo único
 que un atacante puede controlar con facilidad es una única máquina virtual,
 pero no la infraestructura de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Subsection
Uso del 
\emph on
framework
\emph default
 
\emph on
web2py
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-web2py"

\end_inset


\end_layout

\begin_layout Standard
Web2py es una plataforma web de código abierto (licencia GPL versión 2)
 que permite un ágil desarrollo de aplicaciones web seguras, gestionadas
 por medio de bases de datos.
 Esta escrito y es programable en python y contiene todos los componentes
 necesarios para construir aplicaciones completamente funcionales.
\end_layout

\begin_layout Standard
Al ser un framework web, web2py ofrece un rígido diseño de cara a la seguridad.
 Así, es capaz de resolver ciertas vulnerabilidades de forma automática
 siguiendo unas prácticas bien establecidas.
 Por ejemplo, web2py gestiona automáticamente el formateo de las entradas
 y salidas, aplica acciones de encriptado en los ficheros subidos y controla
 el área de maniobra de los desarrolladores de cara a la seguridad del sistema.
\end_layout

\begin_layout Standard
Además web2py ofrece una capa de abstracción de base de datos (DAL por su
 acrónimo inglés), que genera código SQL de forma transparente al modelo
 de gestión de datos utilizado (SQLite, MySQL, PostgreSQL, Oracle ...).
\end_layout

\begin_layout Subsubsection*
Ventajas
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Esto no se si irá aquí o se meterá en otro apartado
\end_layout

\begin_layout Plain Layout
INICIO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las principales razones por las cuales hemos decidido utilizar web2py frente
 a otros frameworks web basados en python tales como Django o Grok son:
\end_layout

\begin_layout Itemize
Ofrece una estructura sencilla que permite a los usuarios aprender sobre
 el desarrollo web sin comprometer la funcionalidad del sistema.
 Por esta razón, web2py no requiere instalación ni configuración, no tiene
 dependencias, y expone la mayor parte de su funcionalidad a través de una
 interfaz de navegador web.
\end_layout

\begin_layout Itemize
Se ha mantenido estable desde el primer día, ofreciendo un diseño de arriba
 a abajo que asegura una total compatibilidad con respecto a aplicaciones
 que fueron realizadas utilizando versiones anteriores.
\end_layout

\begin_layout Itemize
Ataca de manera pro activa las cuestiones de seguridad más relevantes en
 las aplicaciones web modernas.
\end_layout

\begin_layout Itemize
Ofrece interfaces administrativas para simplificar la creación y gestión
 de las bases de datos (appAdmin) y la interacción de las diferentes vistas
 y controladores.
\end_layout

\begin_layout Itemize
Es ligero.
 Todas las librerías y código necesario para desarrollar aplicaciones ocupa
 en torno a 2 MB.
\end_layout

\begin_layout Itemize
Es rápido, ofreciendo una velocidad un 30% superior que un servidor Apache
 medio.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
FIN
\end_layout

\end_inset


\end_layout

\begin_layout Section
Vista lógica
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de paquetes/Diagrama Paquetes General.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

Diagrama de paquetes de 
\emph on
CygnusCloud
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La funcionalidad del sistema 
\emph on
CygnusCloud 
\emph default
está distribuida en once paquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
ccutils
\family default
\series bold
 
\series default
contiene clases que se utilizan en varios subsistemas de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
network
\family default
 contiene las clases que permiten comunicar un conjunto de máquinas distintas
 a través de una red.
 Dichas comunicaciones se realizan utilizando el protocolo TCP a través
 de la librería de red 
\emph on
twisted
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
virtualMachineServer
\family default
\series bold
 
\series default
contiene las clases que implementan el subsistema servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
clusterServer
\family default
\series bold
 
\series default
contiene todas las clases que implementan el susbsistema servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
imageRepository
\family default
 contiene todas las clases que implementan el susbsistema repositorio de
 imágenes.
\end_layout

\begin_layout Itemize
los paquetes 
\family typewriter
clusterEndpoint
\family default
\series bold
 
\series default
y 
\family typewriter
clusterConnector
\family default
\series bold
 
\series default
contienen las clases que permiten comunicar la página web de 
\emph on
CygnusCloud 
\emph default
con un servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
errors
\family default
 contiene un tipo enumerado con todos los códigos de error generados por
 la infraestructura.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
webServer
\family default
 contiene las vistas y controladores asociados a la página web de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
ftp
\family default
 contiene el cliente y el servidor FTP utilizados para transferir imágenes
 de disco entre el repositorio de imágenes y los servidores de máquinas
 virtuales.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family typewriter
testing
\family default
 contiene clases utilizadas para depurar los sistemas servidor de máquinas
 virtuales y servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Standard
Las relaciones existentes entre estos paquetes aparecen en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

.
 Por claridad, 
\end_layout

\begin_layout Itemize
las dependencias del paquete 
\family typewriter
virtualMachineServer
\family default
 aparecen en rojo, 
\end_layout

\begin_layout Itemize
las dependencias del paquete paquete 
\family typewriter
clusterServer
\family default
 aparecen en azul,
\end_layout

\begin_layout Itemize
las dependencias del paquete 
\family typewriter
imageRepository
\family sans
 
\family default
aparecen en verde,
\end_layout

\begin_layout Itemize
las dependencias del paquete 
\family typewriter
clusterConnector
\family sans
 
\family default
aparecen en naranja, y
\end_layout

\begin_layout Itemize
el resto de dependencias entre paquetes aparecen en negro.
\end_layout

\begin_layout Standard
Finalmente, algunos de los paquetes que acabamos de presentar se descomponen
 en otros paquetes más pequeños.
 Para facilitar la visualización de las dependencias principales entre paquetes,
 hemos decidido omitir dichas descomposiciones.
 A medida que presentemos el diseño, las mostraremos junto con las relaciones
 entre clases que justifican las dependencias entre paquetes.
\end_layout

\begin_layout Subsection
Paquetes y clases significativos de la arquitectura
\end_layout

\begin_layout Standard
En esta sección, mostraremos la estructura interna de los paquetes más significa
tivos de la arquitectura.
 También mostraremos sus clases más relevantes, junto con una breve descripción
 de sus responsabilidades.
\end_layout

\begin_layout Standard
Aunque el paquete 
\family typewriter
errors
\family default
 es significativo desde el punto de vista de la arquitectura, sólo contiene
 un tipo enumerado, en el que se definen los códigos de error.
 Por ello, lo omitiremos en esta sección.
 
\end_layout

\begin_layout Subsubsection

\family typewriter
ccutils 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de paquetes/Diagrama paquetes ccutils.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-ccutils"

\end_inset

Descomposición del paquete 
\family typewriter
ccutils
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El paquete 
\family typewriter
ccutils
\family default
 contiene clases que se utilizan en múltiples subsistemas de 
\emph on
CygnusCloud
\emph default
.
 Como puede observarse en el diagrama de paquetes de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-ccutils"

\end_inset

, el paquete 
\family typewriter
ccutils
\family default
 se descompone en siete subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
databases 
\family default
contiene dos clases que permiten manipular una base de datos MySQL.
 
\end_layout

\begin_deeper
\begin_layout Standard
La primera de ellas, 
\family typewriter
DBConfigurator
\family default
, permite crear, destruir y configurar una base de datos a través del conector
 no oficial de MySQL 
\family typewriter
mysqldb
\family default
.
 
\end_layout

\begin_layout Standard
La segunda, 
\family typewriter
BasicDBConnector
\family default
, utiliza el conector oficial de MySQL para realizar consultas y actualizaciones
 sobre una base de datos.
 Por ello, es el antepasado común del resto de clases que manipulan una
 base de datos.
\end_layout

\end_deeper
\begin_layout Itemize
el paquete 
\family typewriter
passwords
\family default
 contiene una única clase, 
\family typewriter
RootPasswordHandler
\family default
, que permite obtener y recuperar la contraseña del usuario 
\emph on
root
\emph default
.
 
\end_layout

\begin_layout Itemize
la principal clase del paquete 
\family typewriter
processes
\family default
, 
\family typewriter
ChildProcessManager
\family default
, permite lanzar procesos hijos en 
\emph on
background
\emph default
 y en 
\emph on
foreground
\emph default
, bien como el usuario actual o bien como 
\emph on
root
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
dataStructures
\family default
 contiene envoltorios de las principales estructuras de datos de la librería
 estándar de 
\emph on
Python
\emph default
.
 Estos envoltorios permiten utilizar dichas estructuras de datos en entornos
 multihilo de forma segura.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
threads
\family default
 contiene dos clases: 
\family typewriter
BasicThread
\family default
 y 
\family typewriter
QueueProcessingThread
\family default
.
 La primera es el antepasado común de todos los hilos de la infraestructura.
 Por otra parte, la segunda se corresponde con un hilo que, como su nombre
 indica, procesa los elementos de una cola.
\end_layout

\begin_layout Itemize
finalmente, las clases del paquete 
\family typewriter
configurationFiles
\family default
 se utilizan para procesar los distintos ficheros de configuración.
 La más relevante de todas, 
\family typewriter
ConfigurationFileParser
\family default
, procesa los ficheros de configuración haciendo uso del módulo 
\family typewriter
ConfigParser
\family default
 de la librería estándar de 
\emph on
Python
\emph default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
network
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de paquetes/Diagrama Paquetes Network.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-network"

\end_inset

Descomposición del paquete 
\family typewriter
network
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las clases del paquete 
\family typewriter
network
\family default
 interactúan con la librería de red 
\emph on
twisted
\emph default
 para comunicar una máquina con otra u otras conectadas a la misma red.
 El diagrama de paquetes de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-network"

\end_inset

 muestra que este paquete se descompone en ocho subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
exceptions
\family default
, que contiene todas las clases de excepción que utilizan las clases del
 paquete 
\family typewriter
network
\family default
.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
packets
\family default
, que contiene la clase 
\family sans
Packet
\family default
.
 Esta clase se ocupa de la serialización y deserialización de la información
 que intercambian los equipos.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
ftp
\family default
.
 Sus clases más importantes son las siguientes:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
FTPClient
\family default
, que permite interactuar con el cliente FTP de la librería estándar de
 
\emph on
Python
\emph default
 a un elevado nivel de abstracción.
\end_layout

\begin_layout Itemize

\family typewriter
ConfigurableFTPServer
\family default
, que ofrece una interfaz de alto nivel para interactuar con el servidor
 FTP 
\family typewriter
pyftpdlib
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
FTPCallback
\family default
, que define la interfaz que se usará para procesar los eventos generados
 por el servidor FTP 
\family typewriter
pyftpdlib
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
el paquete 
\family typewriter
threads
\family default
.
 Este contiene las clases 
\family sans
ConnectionMonitoringThread
\family default
, 
\family sans
DataProcessingThread
\family default
 y 
\family sans
TwistedReactorThread
\family default
, correspondientes a los distintos tipos de hilo que se utilizan en la implement
ación de la red.
 
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
twistedInteraction
\family default
, que contiene las clases
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Connection
\family default
, 
\family typewriter
ServerConnection
\family default
 y 
\family typewriter
ClientConnection
\family default
, asociadas a las conexiones de red,
\end_layout

\begin_layout Itemize

\family typewriter
ConnectionStatus
\family default
, asociada al estado de una conexión de red, y
\end_layout

\begin_layout Itemize

\family typewriter
CygnusCloudProtocol
\family default
 y 
\family typewriter
CygnusCloudProtocolFactory
\family default
, utilizadas para interactuar con la librería de red 
\emph on
twisted
\emph default
 a muy bajo nivel de abstracción.
\end_layout

\end_deeper
\begin_layout Itemize
el paquete 
\family typewriter
manager
\family default
, que contiene las clases 
\family typewriter
NetworkManager
\family default
 y 
\family typewriter
NetworkCallback
\family default
.
 La primera ofrece una interfaz de alto nivel para manipular conexiones
 de red, y la segunda define la interfaz que se utiliza para procesar los
 datos recibidos a través de la red.
\end_layout

\begin_layout Itemize
el paquete
\family sans
 tests
\family default
, que contiene las pruebas de los módulos de este paquete.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
ftp
\family default
.
 Sus principales clases son 
\family typewriter
FTPClient
\family default
, correspondiente a un cliente FTP basado en el de la librería estándar
 de 
\emph on
Python
\emph default
, y 
\family typewriter
ConfigurableFTPServer
\family default
, un servidor FTP basado en 
\family typewriter
pyftpdlib
\family default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
ftp
\end_layout

\begin_layout Standard
Este paquete contiene las clases del cliente y del servidor FTP que utilizan
 el repositorio de imágenes y los servidores de máquinas virtuales para
 intercambiar imágenes de disco.
 Sus principales clases son las siguientes:
\end_layout

\begin_layout Itemize

\family typewriter
FTPClient
\family default
.
 Esta clase es un envoltorio del cliente FTP incluido en la biblioteca estándar
 de 
\emph on
Python
\emph default
.
\end_layout

\begin_layout Itemize

\family typewriter
ConfigurableFTPServer
\family default
.
 Esta clase es un envoltorio del servidor FTP 
\family typewriter
pyftpdlib
\family default
.
\end_layout

\begin_layout Standard
Asimismo, el paquete 
\family typewriter
ftp
\family default
 incluye un único subpaquete, 
\family typewriter
pyftpdlibInteraction
\family default
.
 Como su nombre indica, las clases de ese paquete realizan la interacción
 con el servidor pyftpdlib a un bajo nivel de abstracción.
\end_layout

\begin_layout Subsubsection

\family typewriter
imageRepository
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de paquetes/Diagrama paquetes Image Repository.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Descomposición-del-paquete-imageRepository"

\end_inset

Descomposición del paquete 
\family typewriter
imageRepository
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este paquete contiene las clases del subsistema repositorio de imágenes.
 Como puede observarse en el diagrama de paquetes de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Descomposición-del-paquete-imageRepository"

\end_inset

, el paquete 
\family typewriter
imageRepository
\family default
 se descompone en cinco subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
database
\family default
.
 Contiene la clase 
\family typewriter
ImageRepositoryDBConnector
\family default
, que permite manipular la base de datos del repositorio de imágenes.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
callbacks
\family default
, que contiene las interfaces 
\family typewriter
FTPServerCallback
\family default
 y 
\family typewriter
CommandsCallback
\family default
.
 Estas se utilizarán para procesar los eventos generados por el servidor
 FTP pyftpdlib y para procesar los paquetes recibidos respectivamente.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
configurationFiles
\family default
.
 Su única clase, 
\family typewriter
ImageRepositoryConfigurationFileParser
\family default
, parsea el fichero de configuración del demonio del repositorio de imágenes.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
packetHandling
\family default
.
 Incluye una única clase, 
\family typewriter
ImageRepositoryPacketHandler
\family default
, permite crear y leer los distintos tipos de paquete que se utilizan en
 el repositorio de imágenes.
\end_layout

\begin_layout Itemize
el paquete 
\family typewriter
reactor
\family default
.
 Su única clase, 
\family typewriter
ImageRepositoryReactor
\family default
, se ocupa de realizar los procesos de inicialización y apagado del demonio
 del repositorio de imágenes.
 
\end_layout

\begin_layout Subsubsection

\family typewriter
virtualMachineServer
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de paquetes/Diagrama paquetes VM server.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Descomposición-del-paquete-virtualMachineServer"

\end_inset

Descomposición del paquete 
\family typewriter
virtualMachineServer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este paquete contiene las clases del subsistema servidor de máquinas virtuales.
 El diagrama de paquetes de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Descomposición-del-paquete-virtualMachineServer"

\end_inset

 muestra la descomposición del paquete 
\family typewriter
virtualMachineServer
\family default
.
 Por claridad, las dependencias del paquete 
\family typewriter
libvirtInteraction
\family default
 aparecen en rojo, y el resto de dependencias aparecen en negro.
\end_layout

\begin_layout Standard
Como puede observarse en el diagrama de paquetes de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Descomposición-del-paquete-virtualMachineServer"

\end_inset

, el paquete 
\family typewriter
virtualMachineServer
\family default
 se descompone en siete subpaquetes:
\end_layout

\begin_layout Itemize

\family typewriter
configurationFiles
\family default
.
 La única clase que contiene, 
\family typewriter
VMServerConfigurationFileParser
\family default
, parsea el fichero de configuración del demonio del servidor de máquinas
 virtuales.
\end_layout

\begin_layout Itemize

\family typewriter
database
\family default
.
 Su clase más relevante, 
\family typewriter
VMServerDBConnector
\family default
, permite manipular la base de datos del servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize

\family typewriter
exceptions
\family default
.
 Este paquete contiene la clase 
\family typewriter
VMServerException
\family default
, la clase de excepción asociada a la mayoría de clases del subsistema servidor
 de máquinas virtuales.
\end_layout

\begin_layout Itemize

\family typewriter
libvirtInteraction
\family default
.
 Este paquete contiene las clases 
\family typewriter
DomainHandler
\family default
, 
\family typewriter
LibvirtConnector 
\family default
y 
\family typewriter
ConfigurationFileEditor
\family default
, que se utilizan para crear y destruir dominios interactuando con la librería
 
\family typewriter
libvirt
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
packetHandling
\family default
.
 Este paquete contiene la clase 
\family typewriter
VMServerPacketHandler
\family default
, que permite crear y leer los distintos tipos de paquete asociados al servidor
 de máquinas virtuales.
\end_layout

\begin_layout Itemize

\family typewriter
reactor
\family default
.
 La principal clase de este paquete, 
\family typewriter
VMServerReactor
\family default
, procesa los paquetes enviados por el servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize

\family typewriter
threads
\family default
.
 Este paquete contiene las clases de hilo 
\family typewriter
CompressionThread
\family default
 y 
\family typewriter
FileTransferThread
\family default
.
 Estas están asociadas a la compresión y descompresión de imágenes de disco
 y al intercambio de imágenes de disco con el repositorio de imágenes respectiva
mente.
\end_layout

\begin_layout Itemize

\family typewriter
virtualNetwork
\family default
.
 La única clase de este paquete, 
\family typewriter
VirtualNetworkManager
\family default
, dispone de métodos para crear y destruir redes virtuales.
\end_layout

\begin_layout Subsubsection

\family typewriter
clusterServer
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de paquetes/Diagrama Paquetes Cluster Server.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Descomposicionl-paquete-clusterServer"

\end_inset

Descomposición del paquete 
\family typewriter
clusterServer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tal y como se muestra en el diagrama de paquetes de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Descomposicionl-paquete-clusterServer"

\end_inset

, el paquete 
\family typewriter
clusterServer
\family default
 se descompone en ocho subpaquetes:
\end_layout

\begin_layout Itemize

\family typewriter
configurationFiles
\family default
.
 Nuevamente, este paquete contiene la clase que procesa el fichero de configurac
ión del demonio del servidor de 
\emph on
cluster
\emph default
, 
\family typewriter
ClusterServerConfigurationFileParser
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
callbacks
\family default
.
 En él se definen las interfaces 
\family typewriter
ClusterEndpointCallback
\family default
, 
\family typewriter
ImageRepositoryCallback
\family default
 y 
\family typewriter
VMServerCallback
\family default
, que se usarán para procesar los paquetes recibidos desde el servidro web,
 el repositorio de imágenes y los servidores de máquinas virtuales respectivamen
te.
\end_layout

\begin_layout Itemize

\family typewriter
database
\family default
.
 Su clase más importante, 
\family typewriter
ClusterServerDBConnector
\family default
, permite manipular la base de datos del servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize

\family typewriter
loadBalancing
\family default
.
 Contiene la interfaz 
\family typewriter
LoadBalancer
\family default
, común a todos los algoritmos de balanceado de carga, y la clase 
\family typewriter
PenaltyBasedLoadBalancer
\family default
, asociada al algoritmo de balanceado de carga basado en penalizaciones.
 
\end_layout

\begin_layout Itemize

\family typewriter
mainReactor
\family default
.
 Contiene la clase 
\family typewriter
ClusterServerMainReactor
\family default
, el punto de entrada del demonio del servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize

\family typewriter
packetHandling
\family default
.
 Contiene la clase 
\family typewriter
ClusterServerPacketHandler
\family default
, que permite manipular los paquetes que intercambian el servidor de 
\emph on
cluster
\emph default
 y el servidor web.
\end_layout

\begin_layout Itemize

\family typewriter
reactors
\family default
.
 Contiene las clases 
\family typewriter
EndointPacketReactor
\family default
, 
\family typewriter
ImageRepositoryPacketReactor
\family default
, 
\family typewriter
VMServerPacketReactor
\family default
 y 
\family typewriter
NetworkEventsReactor
\family default
.
 Las tres primeras procesan los paquetes recibidos desde el servidor web,
 el repositorio de imágenes y el servidor de máquinas virtuales respectivamente.
 La última procesa los eventos de desconexión y reconexión generados por
 la red.
\end_layout

\begin_layout Itemize

\family typewriter
threads
\family default
.
 Su única clase, 
\family typewriter
ClusterStatusMonitoringThread
\family default
, se corresponde con un hilo que envía periódicamente las actualizaciones
 de estado a todas las máquinas del 
\emph on
cluster.
\end_layout

\begin_layout Subsubsection

\family typewriter
clusterEndpoint
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de paquetes/Diagrama Paquetes Cluster Endpoint.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Descomposición del paquete 
\family typewriter
clusterEndpoint
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
El diagrama de paquetes de la figura muestra la descomposición del paquete
 
\family typewriter
clusterEndpoint
\family default
.
 Como se puede apreciar en él, el paquete 
\family typewriter
clusterEndpoint
\family default
 se descompone en siete subpaquetes:
\end_layout

\begin_layout Itemize

\family typewriter
codes
\family default
.
 Este paquete contiene la interfaz 
\family typewriter
CodesTranslator
\family default
, que se utilizará para convertir a 
\emph on
strings
\emph default
 los códigos de error generados por la infraestructura, y la clase 
\family typewriter
SpanishCodesTranslator
\family default
, que genera esos 
\emph on
strings
\emph default
 en castellano.
\end_layout

\begin_layout Itemize

\family typewriter
commands
\family default
.
 Este paquete contiene la clase 
\family typewriter
CommandsHandler
\family default
, que realiza la serialización y deserialización de los comandos y de las
 salidas de comandos que usa la página web para interactuar con la infraestructu
ra.
\end_layout

\begin_layout Itemize

\family typewriter
configurationFiles
\family default
.
 Este paquete contiene la clase 
\family typewriter
ClusterEndpointConfigurationFileParser
\family default
, que manipula el fichero de configuración del demonio que conecta la página
 web con la infraestructura.
\end_layout

\begin_layout Itemize

\family typewriter
databases
\family default
.
 Sus principales clases son 
\family typewriter
CommandsDBConnector
\family default
 y 
\family typewriter
ClusterEndpointDBConnector
\family default
, que permiten manipular las dos bases de datos que utiliza el servidor
 web.
\end_layout

\begin_layout Itemize

\family typewriter
entryPoint
\family default
.
 Su única clase, 
\family typewriter
ClusterEndpointEntryPoint
\family default
, es el punto de entrada del demonio que conecta la página web con la infraestru
ctura.
\end_layout

\begin_layout Itemize

\family typewriter
reactors
\family default
.
 Contiene las clases 
\family typewriter
CommandsProcessor
\family default
 y 
\family typewriter
PacketReactor
\family default
, que se usan para procesar las órdenes enviadas a través de la página web
 y los paquetes enviados desde el servidor de 
\emph on
cluster
\emph default
 respectivamente.
\end_layout

\begin_layout Itemize

\family typewriter
threads
\family default
.
 Contiene las clases de hilo 
\family typewriter
CommandsMonitoringThread
\family default
 y 
\family typewriter
DatabaseUpdateThread
\family default
, que se utilizan para detectar 
\emph on
timeouts
\emph default
 en la ejecución de los comandos que envía la página web y para recopilar
 periódicamente el estado de la infraestructura respectivamente.
\end_layout

\begin_layout Subsubsection

\family typewriter
clusterConnector
\end_layout

\begin_layout Standard
El paquete 
\family typewriter
clusterConnector
\family default
 contiene una única clase, 
\family typewriter
ClusterConnector
\family default
, que permite manipular las bases de datos del servidor web y enviar peticiones
 a la infraestructura desde la página web.
\end_layout

\begin_layout Subsubsection

\family typewriter
testing
\end_layout

\begin_layout Standard
El paquete 
\family typewriter
testing
\family default
 contiene clases que permiten comprobar el correcto funcionamiento de los
 demonios del repositorio de imágenes, del servidor de máquinas virtuales
 y del servidor de 
\emph on
cluster
\emph default
.
 Estas clases son las siguientes:
\end_layout

\begin_layout Itemize

\family typewriter
ImageRepositoryTester
\family sans
.
 
\family default
Esta clase interactúa con el demonio del repositorio de imágenes tal y como
 lo harían el demonio del servidor de máquinas virtuales y el demonio del
 servidor de 
\emph on
cluster
\emph default
.
 Por ello, permite comprobar el correcto funcionamiento de todas las funciones
 del repositorio de imágenes.
\end_layout

\begin_layout Itemize

\family typewriter
VirtualMachineServerTester
\family default
.
 Esta clase interactúa con el demonio del servidor de máquinas virtuales
 tal y como lo haría el demonio del servidor de 
\emph on
cluster
\emph default
.
 Así pues, permite comprobar el correcto funcionamiento de todas las funciones
 del servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize

\family typewriter
ClusterServerTester
\family default
.
 Esta clase interactúa con el demonio del servidor de 
\emph on
cluster
\emph default
 tal y como lo haría el servidor web.
 Esto permite comprobar el correcto funcionamiento de todas las funciones
 del servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Subsubsection

\family typewriter
webServer
\end_layout

\begin_layout Standard
El paquete 
\family typewriter
webServer
\family default
 se encuentra distribuido en un conjunto de paquetes que hacen referencia
 a los diferentes tipos de elementos necesarios para implementar la funcionalida
d de la web.
 Estos paquetes son:
\end_layout

\begin_layout Itemize
Vistas: Paquetes con el conjunto de vistas que definen la representación
 de las páginas
\end_layout

\begin_layout Itemize
Controladores : Paquete que contiene los módulos python encargados de manejar
 las diferentes funcionalidades de la web.
\end_layout

\begin_layout Itemize
Modelos : Incluye dos módulos python encargados de definir dos aspectos
 importantes de la web.
 El primer módulo, menu, introduce la información sobre la versión , las
 palabras clave y todos los aspectos generales de la web.
 El segundo, db, se encarga de crear las tablas necesarias que serán utilizadas
 para almacenar la información manejada por la web.
\end_layout

\begin_layout Itemize
Lenguajes : Incluye un conjunto de diccionarios que permiten traducir la
 web a diferentes idiomas.
\end_layout

\begin_layout Itemize
Archivos estáticos : Este paquete incluye las css , js e imagenes necesarias
 para definir el aspecto de la web.
 También incluye el controlador noVNC y todos los ficheros html auxiliares
 que se integran en la web.
\end_layout

\begin_layout Itemize
Módulos : En este paquete se encuentran todos los módulos python secundarios
 que serán utilizados por los controladores.
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
network
\end_layout

\begin_layout Standard
Los módulos de este paquete proporcionan una interfaz que permite utilizar
 la librería de red 
\family typewriter
twisted
\family default
 a un alto nivel de abstracción.
 Puesto que el diseño de esta parte del sistema está íntimamente relacionado
 con el funcionamiento de la librería de red 
\family typewriter
twisted
\family default
, es fundamental que el lector esté familiarizado con los conceptos básicos
 de esta librería.
\end_layout

\begin_layout Standard
Por ello, comenzaremos mostrando, en líneas generales, cómo funciona la
 librería de red 
\family typewriter
twisted
\family default
.
 Posteriormente, describiremos el contenido de este paquete en orden creciente
 del nivel de abstracción, profundizando más en el funcionamiento de 
\family typewriter
twisted
\family default
 cuando sea preciso.
\end_layout

\begin_layout Standard
En cualquier caso, dado que 
\family typewriter
twisted
\family default
 es una librería con muchas funciones, sólo mostraremos los aspectos de
 su funcionamiento más relacionados con el diseño del paquete 
\family typewriter
network
\family default
.
 Si el lector está interesado en ampliar la información que aquí le proporcionam
os, le remitimos a la documentación oficial (
\begin_inset CommandInset citation
LatexCommand cite
key "TwistedCoreDocs"

\end_inset

) y al libro 
\emph on
Twisted Network Programming Essentials
\emph default
 (
\begin_inset CommandInset citation
LatexCommand cite
key "TwistedBook"

\end_inset

).
\end_layout

\begin_layout Subsubsection
La librería de red 
\family typewriter
twisted
\family default
: visión general
\emph on
 
\begin_inset CommandInset label
LatexCommand label
name "sub:La-librería-de-red-twisted"

\end_inset


\end_layout

\begin_layout Standard
Tal y como adelantamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-de-twisted"

\end_inset

, 
\family typewriter
twisted
\family default
 es una librería de red totalmente basada en eventos.
 Así, todas las tareas que realiza (como la recepción de datos, el establecimien
to de conexiones, la detección de desconexiones, \SpecialChar \ldots{}
) son totalmente asíncronas.
\end_layout

\begin_layout Standard
Para generar los eventos, 
\family typewriter
twisted
\family default
 utiliza el patrón 
\emph on
reactor
\emph default
, es decir, muestrea periódicamente el estado de los 
\emph on
sockets
\emph default
 y actúa en consecuencia.
 De esta manera, todas las aplicaciones que utilicen 
\family typewriter
twisted
\family default
 seguirán el siguiente esquema de comportamiento:
\end_layout

\begin_layout Enumerate
el código de la librería muestrea los 
\emph on
sockets
\emph default
 abiertos por la aplicación para detectar cambios.
 
\end_layout

\begin_layout Enumerate
cuando se detecta un cambio, se genera un evento para informar del cambio
 al código del cliente.
\end_layout

\begin_layout Enumerate
el código del cliente utiliza la información asociada al evento y procesa
 el cambio.
\end_layout

\begin_layout Enumerate
cuando termina, el código del cliente devuelve el control al código de la
 librería.
\end_layout

\begin_layout Standard
El muestreo de los 
\emph on
sockets
\emph default
 y el tratamiento de los cambios tiene lugar en un bucle que se ejecuta
 permanentemente: el 
\emph on
bucle reactor
\emph default
.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-bucle-reactor"

\end_inset

 resume de forma gráfica las ideas que acabamos de exponer.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas no UML/Bucle reactor.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-bucle-reactor"

\end_inset

Representación gráfica del funcionamiento de la librería 
\emph on
twisted
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Protocolos y factorías de protocolos
\end_layout

\begin_layout Standard
La forma en que se procesan los datos recibidos a través de la red varía
 de unas aplicaciones a otras, e incluso puede variar en una misma aplicación.
 Por ejemplo, en 
\emph on
CygnusCloud
\emph default
 algunos datos recibidos se escriben en una base de datos, otros se reenvían
 y otros se le muestran directamente al usuario.
 Por ello, es necesario que el proceso de generación y tratamiento del evento
 no dependa de los datos concretos que manipula cada aplicación.
 Para hacer esto posible, 
\emph on
twisted
\emph default
 define los 
\emph on
protocolos
\emph default
 y las 
\emph on
factorías de protocolos
\emph default
.
\end_layout

\begin_layout Standard
Un 
\emph on
protocolo
\emph default
 es una clase cuyos métodos tratan y generan eventos de red, tales como
 la recepción de un segmento TCP, el envío de un segmento TCP y la detección
 de desconexión.
 Por su parte, las 
\emph on
factorías de protocolos
\emph default
 son objetos capaces de instanciar y configurar protocolos.
 Los protocolos y las factorías de protocolos se manipulan siempre a través
 de dos interfaces, que se definen en las clases abstractas 
\family typewriter
Protocol
\family default
 y 
\family typewriter
Factory
\family default
 respectivamente.
 
\end_layout

\begin_layout Paragraph
El bucle reactor
\end_layout

\begin_layout Standard
Su misión principal es muestrear periódicamente todos los 
\emph on
sockets
\emph default
 abiertos e invocar a las rutinas de tratamiento adecuados cuando se produzca
 un evento.
 Como ya hemos dicho, las rutinas de tratamiento se definen en instancias
 de subclases concretas de 
\family typewriter
Protocol
\family default
.
\end_layout

\begin_layout Standard
En la librería 
\emph on
twisted
\emph default
 se definen varios bucles reactor, que se diferencian fundamentalmente por
 la forma de realizar el muestreo periódico.
 Nosotros utilizamos el que está definido en la clase 
\family typewriter
PollReactor
\family default
, que se limita a leer periódicamente todos los 
\emph on
sockets
\emph default
 para determinar si se han producido cambios.
 
\end_layout

\begin_layout Standard
Para que el funcionamiento de la librería sea el correcto, deben cumplirse
 dos restricciones:
\end_layout

\begin_layout Itemize
aunque en cada aplicación puede haber un número arbitrario de conexiones
 activas, sólo puede existir 
\emph on
un
\emph default
 único bucle reactor.
 
\end_layout

\begin_layout Itemize
una vez que se detiene el bucle reactor, este 
\emph on
no
\emph default
 puede reiniciarse mientras la aplicación se siga ejecutando.
 Por ello, sólo se puede salir de este bucle cuando la aplicación no va
 a utilizar más la red.
\end_layout

\begin_layout Standard
Por otra parte, los eventos de red se tratan en el propio bucle del reactor.
 Para garantizar un tiempo de respuesta adecuado, es imprescindible que
 los métodos de tratamiento sean tan rápidos como sea posible.
 
\end_layout

\begin_layout Paragraph
Procesamiento de datos entrantes
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Procesamiento-de-datos-entrantes-twisted"

\end_inset

 muestra cómo se procesan los eventos asociados a dos conexiones, cuyos
 protocolos son instancias de las subclases de 
\family typewriter
Protocol Protocol1
\family default
 y 
\family typewriter
Protocol2
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Red/Procesamiento de datos entrantes (DS).pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Procesamiento-de-datos-entrantes-twisted"

\end_inset

Procesamiento de datos entrantes en 
\emph on
twisted
\emph default
: diagrama de secuencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En ambos casos, se muestrea el 
\emph on
socket
\emph default
, para posteriormente invocar al método correspondiente del protocolo: el
 método de procesamiento de los datos entrantes en el primer caso, y el
 método de procesamiento de una desconexión en el segundo.
\end_layout

\begin_layout Paragraph
Establecimiento de conexiones
\end_layout

\begin_layout Standard
Para establecer una conexión, es necesario tener en cuenta
\end_layout

\begin_layout Itemize
el protocolo de transporte que hay que utilizar (TCP versión 4, TCP versión
 4 sobre SSL,\SpecialChar \ldots{}
), y
\end_layout

\begin_layout Itemize
el papel que desempeña la máquina en la conexión (cliente o servidor).
\end_layout

\begin_layout Standard
Para eliminar en la medida de lo posible los detalles de bajo nivel de nuestro
 código, hemos utilizado una función que se ha añadido recientemente a la
 librería 
\emph on
twisted
\emph default
: los 
\emph on
endpoints
\emph default
.
\end_layout

\begin_layout Standard
Un 
\emph on
endpoint
\emph default
 sirve para configurar uno de los extremos de la conexión.
 Todos los protocolos de transporte implementados en 
\emph on
twisted 
\emph default
definen dos: uno para la máquina servidor y otro para las máquinas cliente.
 En el proceso de conexión, el 
\emph on
endpoint
\emph default
, que es una instancia de una subclase concreta de 
\family typewriter
Endpoint
\family default
, 
\end_layout

\begin_layout Itemize
interactúa con el reactor para establecer la conexión.
\end_layout

\begin_layout Itemize
suministra al reactor la factoría de protocolos.
 Este la utilizará para instanciar protocolos cuando sea necesario.
\end_layout

\begin_layout Standard
Las relaciones existentes entre la clase 
\family typewriter
Endpoint
\family default
 y el resto de clases principales de la librería 
\emph on
twisted
\emph default
 aparecen en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-protocolos-endpoints-factorías"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Red/Relaciones Endpoints.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-protocolos-endpoints-factorías"

\end_inset

Relaciones entre protocolos, factorías de protocolos y 
\emph on
endpoints
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Todos los 
\emph on
endpoints
\emph default
 son instancias de alguna subclase concreta la clase 
\family typewriter
Endpoint
\family default
.
 En el diagrama sólo aparecen las subclases de 
\emph on
endpoint
\emph default
 que utilizamos en el paquete 
\family typewriter
network
\family default
, correspondientes a los protocolos TCP versión 4 y TCP versión 4 sobre
 SSL.
 Por otra parte, los 
\emph on
endpoints
\emph default
 no manipulan directamente un PollReactor: para ello, utilizan las interfaces
 que esta clase implementa.
 Nos hemos tomado esta licencia para simplificar la explicación.
\end_layout

\begin_layout Standard
Como ya hemos visto, los protocolos se crean al establecerse la conexión.
 Además, puesto que siempre están ligados a una conexión, estos objetos
 se destruyen cuando esta se cierra.
\end_layout

\begin_layout Standard
Por otra parte, el diagrama de secuencia de la figura muestra la interacción
 que tiene lugar al establecer dos conexiones TCP, una de tipo servidor
 y otra de tipo cliente.
 En ambos casos, los 
\emph on
endpoints
\emph default
 se limitan, en esencia, a solicitar al reactor al establecimiento de la
 conexión y a suministrarle la factoría de protocolos que debe utilizar.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Red/Procesamiento de datos entrantes (DS).pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Establecimiento-conexión-twisted"

\end_inset

Establecimiento de una conexión en 
\emph on
twisted
\emph default
: diagrama de secuencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finalmente, los protocolos se usan de forma distinta en función del tipo
 de conexión:
\end_layout

\begin_layout Itemize
en el caso de una conexión de tipo cliente, existirá un único protocolo,
 que permitirá la comunicación bidireccional con el servidor.
\end_layout

\begin_layout Itemize
en el caso de una conexión de tipo servidor, existirán tantos protocolos
 como clientes.
 Cada uno de ellos permitirá la comunicación bidireccional entre el servidor
 y un único cliente.
\end_layout

\begin_layout Paragraph
Envío de datos 
\end_layout

\begin_layout Standard
Tal y como hemos mencionado, para enviar datos a través de la red se utilizan
 instancias de subclases concretas de 
\family typewriter
Protocol
\family default
.
 El reactor nunca interviene a la hora de enviar datos: los 
\emph on
bytes
\emph default
 a enviar se escriben directamente en el 
\emph on
socket
\emph default
 correspondiente.
\end_layout

\begin_layout Standard
En principio, la única restricción que impone librería 
\emph on
twisted
\emph default
 es el tipo de los datos a enviar: sólo es posible enviar 
\emph on
strings
\emph default
 (es decir, secuencias de 
\emph on
bytes
\emph default
), lo que hace necesario serializar toda la información antes de enviarla
 y deserializarla al recibirla.
 
\end_layout

\begin_layout Standard
Es importante notar que el número de 
\emph on
bytes
\emph default
 a enviar no está limitado.
 Por tanto, los segmentos se fragmentarán cuando sea preciso.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
Packet 
\begin_inset CommandInset label
LatexCommand label
name "sub:La-clase-Packet"

\end_inset


\end_layout

\begin_layout Standard
Como ya hemos mencionado, el principal objetivo de las clases del paquete
 
\family typewriter
network
\family default
 es proporcionar una forma de utilizar la librería de red twisted a un elevado
 nivel de abstracción.
 Para ello, es necesario, como mínimo,
\end_layout

\begin_layout Itemize
hacer totalmente transparentes al usuario los procesos de serialización
 y de deserialización de la información que se envía y recibe, y
\end_layout

\begin_layout Itemize
fijar la prioridad de los datos que circulan por la red.
 Esto es fundamental para que el sistema pueda responder rápidamente ante
 eventos de suma importancia como la caída de un servidor de máquinas virtuales.
\end_layout

\begin_layout Standard
La clase 
\family typewriter
Packet
\family default
 cubre estas dos necesidades.
 Sus instancias representan paquetes de red, y tienen asociada la siguiente
 información:
\end_layout

\begin_layout Itemize
un tipo.
 Existen dos: uno para transportar datos de gestión de la red y otro para
 transportar datos del cliente.
 Los paquetes de gestión de la red son siempre más prioritarios que los
 que transportan datos del cliente.
\end_layout

\begin_layout Itemize
una prioridad.
 Se trata de un valor entero, positivo en el caso de los paquetes que contienen
 datos de los usuarios y negativo en el caso de los paquetes de gestión
 de la red.
 Cuanto 
\emph on
menor
\emph default
 es la prioridad de un paquete, 
\emph on
más
\emph default
 prioritario será.
\end_layout

\begin_layout Itemize
una secuencia de 
\emph on
bytes
\emph default
 con los datos del paquete.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Rango de la prioridad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tamaño máximo (paquete completo)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Datos del cliente
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $[0,32767$
\end_inset

]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64 KB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gestión de la red
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $[-32768,-1]$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64 KB
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Tipos-prioridades-paquetes"

\end_inset

Características de los distintos tipos de paquete
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tipos-prioridades-paquetes"

\end_inset

 recoge las características de los dos tipos de paquete.
 En ambos casos, el tamaño máximo del paquete completo (es decir, incluyendo
 la cabecera con el tipo y la prioridad y los datos) no puede exceder los
 64 KB.
 Esto nos permite
\end_layout

\begin_layout Itemize
garantizar que no haya usuarios que acaparen el ancho de banda de la red
 mediante el envío de paquetes de gran tamaño.
\end_layout

\begin_layout Itemize
mantener el tiempo de respuesta de la red dentro de unos márgenes razonables.
 Puesto que los paquetes de pequeño tamaño tardan menos en enviarse y en
 ser recibidos, los paquetes más prioritarios podrán 
\begin_inset Quotes eld
\end_inset

adelantar
\begin_inset Quotes erd
\end_inset

 a los paquetes menos prioritarios que les preceden y llegar a su destino
 tan rápido como sea posible.
\end_layout

\begin_layout Itemize
reducir el tiempo de procesamiento de los paquetes que se van a redirigir.
\end_layout

\begin_layout Paragraph
Serialización y deserialización de los datos 
\end_layout

\begin_layout Standard
Para hacer la serialización y deserialización de los datos totalmente transparen
tes a los usuarios, la clase 
\family typewriter
Packet
\family default
 dispone de métodos de lectura y escritura de 
\emph on
strings
\emph default
, valores enteros, valores booleanos y números en punto flotante.
\end_layout

\begin_layout Standard
Tal y como mencionamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-librería-de-red-twisted"

\end_inset

, la librería 
\family typewriter
twisted
\family default
 sólo es capaz de enviar y recibir 
\emph on
strings
\emph default
, por lo que 
\end_layout

\begin_layout Itemize
los métodos de escritura convierten a 
\emph on
strings 
\emph default
los valores a escribir en el paquete y los añaden al final de una estructura
 de datos intermedia, y
\end_layout

\begin_layout Itemize
los métodos de lectura extraen 
\emph on
strings 
\emph default
de la estructura de datos intermedia y los convierten en valores del tipo
 que el usuario quiere leer.
 Todas las lecturas son destructivas, es decir, cada dato escrito en el
 paquete sólo puede leerse una vez.
\end_layout

\begin_layout Standard
La estructura de datos intermedia es un 
\emph on
string
\emph default
.
 Para leer y escribir en ella se usan los métodos de extracción de subcadenas
 y concatenación definidos en la librería estándar de Python.
 El formato de los datos serializados viene dado por la siguiente expresión
 regular:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
(etiqueta de tipo$valor$)*
\end_layout

\begin_layout Standard
Los valores se serializan y deserializan con los métodos definidos en la
 librería estándar de Python.
 El cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Etiquetas-de-tipo-paquete"

\end_inset

 contiene la codificación de las etiquetas de tipo de los paquetes.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Etiqueta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo de datos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entero
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entero largo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
número de punto flotante
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Etiquetas-de-tipo-paquete"

\end_inset

Etiquetas de tipo que pueden aparecer en un paquete
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
También es necesario serializar la cabecera del paquete.
 Su formato es el siguiente:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
tipo,prioridad
\end_layout

\begin_layout Standard
Nuevamente, tanto el tipo como la prioridad del paquete se serializan y
 deserializan utilizando métodos de la librería estándar de Python.
 El paquete serializado se obtiene concatenando la cabecera y los datos
 serializados, y su formato viene descrito por esta expresión regular:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
tipo,prioridad(etiqueta de tipo$valor$)*
\end_layout

\begin_layout Standard
Finalmente, los métodos de la clase Packet también garantizan que los paquetes
 siempre están bien formados, es decir, que
\end_layout

\begin_layout Itemize
la prioridad es la adecuada para el tipo de paquete
\end_layout

\begin_layout Itemize
no se excede el tamaño máximo del paquete al escribir datos en él
\end_layout

\begin_layout Itemize
los datos se leen del paquete en el mismo orden en que se escriben
\end_layout

\begin_layout Subsubsection
Envío y recepción de datos
\end_layout

\begin_layout Standard
Como ya mencionamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-librería-de-red-twisted"

\end_inset

, para poder enviar y recibir información utilizando la librería 
\family typewriter
twisted
\family default
 es necesario definir dos clases:
\end_layout

\begin_layout Itemize
una subclase de 
\family typewriter
Protocol
\family default
, 
\family typewriter
CygnusCloudProtocol
\family default
.
 Sus instancias procesarán los datos recibidos a través de cada conexión.
\end_layout

\begin_layout Itemize
una subclase de 
\family typewriter
Factory
\family default
, 
\family typewriter
CygnusCloudProtocolFactory
\family default
.
 Sus instancias crearán objetos CygnusCloudProtocol cuando se establezcan
 las conexiones.
\end_layout

\begin_layout Standard
Las relaciones entre estas clases, la clase 
\family typewriter
Packet
\family default
 y las clases de la librería 
\family typewriter
twisted
\family default
 aparecen en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacción-con-twisted-nivel-inferior"

\end_inset

.
 En dicho diagrama, hemos abreviado 
\family typewriter
CygnusCloud
\family default
 utilizando las siglas 
\family typewriter
CC
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Red/Diagrama clases interacción twisted.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interacción-con-twisted-nivel-inferior"

\end_inset

Interacción con 
\emph on
twisted
\emph default
 a muy bajo nivel de abstracción: diagrama de clases
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lo primero que llama la atención en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacción-con-twisted-nivel-inferior"

\end_inset

 es la dependencia cíclica existente entre las clases 
\family typewriter
CygnusCloudProtocol
\family default
 y 
\family typewriter
CygnusCloudProtocolFactory
\family default
 .
 Dicha dependencia está provocada por el funcionamiento de la librería 
\family typewriter
twisted
\family default
: cada par de máquinas conectadas se comunica siempre a través de una conexión
 bidireccional.
 Por ello, si 
\begin_inset Formula $n$
\end_inset

 clientes se conectan a un mismo servidor,
\end_layout

\begin_layout Itemize
en los clientes habrá un único objeto 
\family typewriter
CygnusCloudProtocol
\family default
, y
\end_layout

\begin_layout Itemize
en el servidor habrá 
\begin_inset Formula $n$
\end_inset

 objetos 
\family typewriter
CygnusCloudProtocol
\family default
, cada uno de los cuales permite al servidor comunicarse con un cliente
 concreto.
\end_layout

\begin_layout Standard
Para simplificar la implementación de la red nos interesa que, en los niveles
 de mayor nivel de abstracción, sólo sea necesario realizar la distinción
 entre clientes y servidores a la hora de establecer las conexiones.
 Lo más conveniente es extender la funcionalidad de la clase 
\family typewriter
CygnusCloudProtocolFactory
\family default
 para que, además de instanciar objetos 
\family typewriter
CygnusCloudProtocol
\family default
, sea capaz de:
\end_layout

\begin_layout Itemize
mantener una lista de referencias a todos los objetos 
\family typewriter
CygnusCloudProtocol
\family default
 asociados a la conexión y actualizarla a medida que los clientes se conecten
 y desconecten.
\end_layout

\begin_layout Itemize
indicar si la conexión se puede utilizar, teniendo en cuenta que una conexión
 no está lista cuando no tiene asociado ningún objeto 
\family typewriter
CygnusCloudProtocol
\family default
.
\end_layout

\begin_layout Itemize
serializar y enviar todos los paquetes del servidor 
\end_layout

\begin_deeper
\begin_layout Itemize
a todos los clientes conectados (envío 
\emph on
multicast
\emph default
), o
\end_layout

\begin_layout Itemize
a uno de los clientes conectados (envío 
\emph on
unicast
\emph default
)
\end_layout

\begin_layout Standard
según lo que especifique el código cliente.
 Para ello, se utilizarán las referencias a los objetos 
\family typewriter
CygnusCloudProtocol
\family default
.
 En caso de que no haya ninguna, los datos a enviar se descartarán.
\end_layout

\end_deeper
\begin_layout Itemize
procesar los datos recibidos a través de cualquier objeto 
\family typewriter
CygnusCloudProtocol
\family default
, deserializándolos para formar los paquetes y avisando a la capa superior.
\end_layout

\begin_layout Standard
La recepción de paquetes es totalmente asíncrona.
 Por motivos de eficiencia y para respetar el tipo y la prioridad de los
 paquetes, los objetos 
\family typewriter
CygnusCloudProtocolFactory
\family default
 insertan todos los paquetes que reciben en una cola de prioridad, que es
 una instancia de la clase 
\family typewriter
MultithreadingPriorityQueue
\family default
.
 La capa superior extraerá de ella los paquetes de acuerdo a su tipo y prioridad.
\end_layout

\begin_layout Subsubsection
Conexiones de red
\end_layout

\begin_layout Standard
Con lo que hemos mostrado hasta ahora, ya podemos interactuar con 
\family typewriter
twisted
\family default
 para enviar y recibir paquetes.
 Pero antes es necesario establecer la conexión de red y también gestionar
 los recursos que tiene asociados, entre los están, en principio,
\end_layout

\begin_layout Itemize
su estado, es decir, si la conexión se está estableciendo, si ya se puede
 utilizar, si se está intentando reestablecer, etcétera.
\end_layout

\begin_layout Itemize
la cola de paquetes recibidos, de la que hablamos en la última sección.
\end_layout

\begin_layout Itemize
la factoría de protocolos, que es, como vimos, una instancia de 
\family typewriter
CygnusCloudProtocolFactory
\family default
.
\end_layout

\begin_layout Itemize
una dirección IP, un puerto y el protocolo a utilizar (TCP versión 4 o TCP
 versión 4 sobre SSL).
 Esta información sólo se utiliza para establecerla.
\end_layout

\begin_layout Standard
Puesto que todos estos recursos están muy relacionados, lo más conveniente
 es manipularlos de forma conjunta.
 Esta es la finalidad de la clase 
\family typewriter
NetworkConnection
\family default
 y de sus dos subclases concretas: 
\family typewriter
ClientConnection
\family default
 y 
\family typewriter
ServerConnection
\family default
.
\end_layout

\begin_layout Standard
La clase abstracta 
\family typewriter
NetworkConnection
\family default
 define la interfaz que utilizará la capa superior para interactuar con
 una conexión de red.
 Sus dos subclases concretas, 
\family typewriter
ClientConnection
\family default
 y 
\family typewriter
ServerConnection
\family default
, se corresponden con los dos tipos de conexiones que es posible establecer:
 las conexiones de tipo cliente y de tipo servidor respectivamente.
 Estas dos clases comparten la mayor parte del código, y sólo difieren a
 la hora de establecer la conexión y al actualizar su estado.
 
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-clases-conexiones"

\end_inset

 recoge las relaciones más relevantes en las que intervienen estas tres
 clases.
 A lo largo de esta sección, las explicaremos en detalle.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center

\family typewriter
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Red/Diagrama Clases Conexiones.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-clases-conexiones"

\end_inset

Relaciones más relevantes en las que intervienen las clases 
\family typewriter
NetworkConnection
\family default
, 
\family typewriter
ClientConnection
\family default
 y 
\family typewriter
ServerConnection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Establecimiento de una conexión
\end_layout

\begin_layout Standard
Para establecer una conexión de tipo cliente, basta con escoger un protocolo
 y el 
\emph on
endpoint
\emph default
 de tipo cliente que tiene asociado.
 Como nosotros sólo utilizamos los protocolos TCP versión 4 y TCP versión
 4 sobre SSL, estos 
\emph on
endpoints
\emph default
 serán 
\family typewriter
TCP4ClientEndpoint
\family default
 y 
\family typewriter
SSL4ClientEndpoint
\family default
.
 
\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-librería-de-red-twisted"

\end_inset

 mostramos el intercambio de mensajes que tiene lugar durante el proceso
 de conexión.
 Por ahora, lo único que nos interesa del mismo es que, cuando el método
 del 
\emph on
endpoint
\emph default
 correspondiente termina, la conexión ya está lista para ser utilizada.
\end_layout

\begin_layout Standard
Por otra parte, las conexiones de tipo servidor se establecen de forma similar,
 pero utilizando los 
\emph on
endpoints 
\family typewriter
\emph default
TCP4ServerEndpoint
\family default
 y 
\family typewriter
SSL4ServerEndpoint
\family default
.
 Pero a diferencia del caso anterior, cuando el método del 
\emph on
endpoint
\emph default
 termina la conexión aún no está lista para ser utilizada: sólo lo estará
 cuando se conecte el primer cliente.
 Esto justifica el hecho de que el estado evolucione de forma distinta en
 conexiones de tipo cliente y en conexiones de tipo servidor.
\end_layout

\begin_layout Standard
Finalmente, los métodos de establecimiento de una conexión siempre devuelven
 un objeto 
\family typewriter
Deferred
\family default
, que permite tratar los errores y, en el caso de conexiones de tipo servidor,
 obtener algunos de sus recursos asociados (un objeto 
\family typewriter
IListenningPort
\family default
) y cancelar el establecimiento de las mismas.
\end_layout

\begin_layout Paragraph
Envío y recepción de datos
\end_layout

\begin_layout Standard
La clase 
\family typewriter
NetworkConnection
\family default
 envía paquetes a través de su objeto 
\family typewriter
CygnusCloudProtocolFactory
\family default
, cuyos métodos permiten transmitir el paquete a enviar.
 No obstante, los paquetes no se envían de forma instantánea, y sólo se
 pueden enviar uno por uno.
 Para que la capa superior pueda ignorar esta restricción, cada conexión
 también tiene asociada una cola de prioridad que contiene los paquetes
 a enviar.
 
\end_layout

\begin_layout Standard
Esa cola será una instancia de la clase 
\family typewriter
MultithreadingPriorityQueue
\family default
.
 Los paquetes a enviar siempre se insertan en esta cola, y se transmitirán
 uno por uno y cuando llegue su turno.
\end_layout

\begin_layout Standard
Por otra parte, también es necesario procesar los paquetes que el objeto
 
\family typewriter
CygnusCloudProtocolFactory
\family default
 deposita en la cola de paquetes recibidos.
 Puesto que el contenido de los paquetes que contienen datos del cliente
 depende del dominio de la aplicación, estos deben procesarse en el código
 del cliente, al que se invocará utilizando la interfaz definida por la
 clase abstracta 
\family typewriter
NetworkCallback
\family default
.
 Naturalmente, estos paquetes se borran tras ser procesados.
\end_layout

\begin_layout Paragraph
Estado de las conexiones
\end_layout

\begin_layout Standard
Dependiendo del tipo de conexión, el estado evoluciona de forma distinta.
 Los diagramas de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolución-del-estado-servidor"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolución-del-estado-cliente"

\end_inset

 muestran la evolución del estado de las conexiones de tipo servidor y de
 tipo cliente respectivamente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas no UML/Diagrama estados conexión servidor.pdf
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolución-del-estado-servidor"

\end_inset

Evolución del estado de una conexión de tipo servidor
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas no UML/Diagrama estados conexión cliente.pdf
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolución-del-estado-cliente"

\end_inset

Evolución del estado de una conexión de tipo cliente
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ambos diagramas comparten los estados 
\family sans
Opening
\family default
, 
\family sans
Ready
\family default
, 
\family sans
Closing
\family default
 y 
\family sans
Closed
\family default
.
 Su significado es el siguiente:
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Opening
\family default
, la conexión está siendo establecida.
 Aún no se dispone de todos sus recursos.
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Ready 
\family default
la conexión está lista para recibir y transmitir datos.
 Por lo general, las conexiones permanecen en este estado durante la mayor
 parte del tiempo.
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Closing
\family default
, el cliente ha solicitado el cierre de la conexión.
 Este estado es imprescindible para garantizar que se envían los datos pendiente
s.
 En cualquier caso, es importante notar que se descartarán todos los paquetes
 recibidos y todos los nuevos paquetes que se desee enviar.
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Closed
\family default
, la conexión está cerrada, y se han liberado todos sus recursos.
\end_layout

\begin_layout Standard
Las diferencias están relacionadas con el establecimiento de la conexión
 y las reconexiones.
\end_layout

\begin_layout Standard
Como ya hemos mencionado, una conexión de tipo servidor sólo está lista
 cuando uno o más clientes se conectan.
 En el estado 
\family sans
Ready -- Wait to clients
\family default
, la conexión de tipo servidor está lista para aceptar conexiones entrantes,
 pero al no haber clientes conectados no será posible enviar ni recibir
 datos.
\end_layout

\begin_layout Standard
Por otra parte, las reconexiones sólo tienen sentido en conexiones de tipo
 cliente.
 Cuando la reconexión está habilitada, en el estado 
\family sans
Reconnect
\family default
 se intentará reestablecer la conexión con el servidor utilizando retroceso
 exponencial binario truncado.
 Si no se consigue tras quince intentos (suponen unos cinco minutos aproximadame
nte), se asumirá que la conexión está cerrada.
\end_layout

\begin_layout Subsubsection
Hilos de red 
\end_layout

\begin_layout Standard
Utilizando lo que acabamos de contar, podemos crear y manipular conexiones
 de red a un nivel de abstracción razonablemente elevado.
 No obstante, hasta ahora hemos omitido, para facilitar la comprensión del
 diseño, un aspecto fundamental: el rendimiento.
\end_layout

\begin_layout Standard
En la librería de red 
\family typewriter
twisted
\family default
, todos los paquetes entrantes se procesarán en el bucle reactor.
 Mientras tiene lugar el procesamiento del paquete, no se enviará ni se
 recibirá nada.
 Esto supone un problema, ya que en ocasiones los subsistemas de 
\emph on
CygnusCloud
\emph default
 tienen tiempos de respuesta muy elevados.
 Por ejemplo, una petición de arranque de una máquina virtual tardará mucho
 en procesarse por toda la entrada/salida que conlleva.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Red/Diagrama clases Jerarquía hilos red.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Jerarquía-de-hilos-red"

\end_inset

Jerarquía de hilos de red y sus relaciones más importantes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Así pues, resulta inadmisible que las comunicaciones se bloqueen durante
 el tiempo que tardan las peticiones en procesarse.
 La única forma de evitar esta situación es repartir la ejecución de las
 funciones de red entre varios hilos.
 Hemos realizado la siguiente descomposición:
\end_layout

\begin_layout Itemize
el bucle reactor de 
\family typewriter
twisted
\family default
 se ejecutará en un hilo independiente.
 Esto permitirá a los usuarios utilizar el hilo principal de sus aplicaciones
 de la forma que estimen oportuna.
\end_layout

\begin_layout Itemize
cada conexión de red tendrá asociados un hilo de envío y un hilo de recepción
 de paquetes.
 El primero desencolará paquetes de la cola de envío y los transmitirá,
 y el segundo extraerá paquetes de la cola de recepción e invocará al código
 del cliente que los procesa.
\end_layout

\begin_layout Itemize
por motivos de eficiencia, el estado de 
\emph on
todas
\emph default
 las conexiones de red se actualizará en un hilo independiente.
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Jerarquía-de-hilos-red"

\end_inset

 recoge las clases de la jerarquía de hilos de red y sus relaciones más
 relevantes.
\end_layout

\begin_layout Standard
La clase 
\family typewriter
BasicThread
\family default
 añade a los hilos de Python la capacidad de detenerse cuando otros se lo
 solicitan, y la clase 
\family typewriter
QueueProcessingThread
\family default
 añade también la capacidad de procesar elementos de una cola mediante un
 patrón 
\emph on
strategy
\emph default
.
\end_layout

\begin_layout Standard
Por convenciencia, el hilo que ejecutará el bucle reactor, 
\family typewriter
TwistedReactorThread
\family default
, hereda directamente de 
\family typewriter
Thread
\family default
, la clase base de todos los hilos en Python.
 Por otra parte, la clase 
\family typewriter
ConnectionMonitoringThread
\family default
 se corresponde con el hilo que actualizará el estado de todas las conexiones,
 y las clases 
\family typewriter
IncomingDataThread
\family default
 y 
\family typewriter
OutgoingDataThread
\family default
 se corresponden con los hilos de recepción y envío de paquetes.
\end_layout

\begin_layout Standard
Es importante notar que:
\end_layout

\begin_layout Itemize
es el hilo de recepción y no la conexión de red el que indica al cliente
 la recepción de un nuevo paquete.
 Para ello, se sigue utilizando la interfaz que define la clase NetworkCallback.
\end_layout

\begin_layout Itemize
todo el procesamiento de los paquetes entrantes tendrá lugar en un hilo
 
\family typewriter
IncomingDataThread
\family default
 y no en el hilo del bucle reactor de 
\emph on
twisted
\emph default
, lo que nos permite garantizar que el tiempo de respuesta de la red será
 adecuado independientemente del tiempo que tarde en procesarse el paquete.
\end_layout

\begin_layout Paragraph
Control de la concurrencia
\end_layout

\begin_layout Standard
Si recapitulamos considerando todo lo que hemos visto, para poder comunicar
 varias máquinas entre sí es necesario disponer de los siguientes hilos:
\end_layout

\begin_layout Itemize
dos hilos, uno de envío y otro de recepción, para cada conexión.
\end_layout

\begin_layout Itemize
un hilo para actualizar el estado de las conexiones
\end_layout

\begin_layout Itemize
un hilo para ejecutar el bucle reactor
\end_layout

\begin_layout Standard
Además, para garantizar el correcto funcionamiento del sistema es necesario
 utilizar secciones críticas, para lo que necesitamos mecanismos de sincronizaci
ón y, por tanto, aún más recursos.
\end_layout

\begin_layout Standard
Si el número de conexiones de red de cada máquina es reducido, no habrá
 problemas.
 Pero existe un tipo de máquina en CygnusCloud que estará conectada a muchas
 otras: el servidor de 
\emph on
cluster
\emph default
.
 
\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:El-servidor-de-cluster"

\end_inset

 dijimos que una de sus funciones es realizar el balanceado de carga entre
 varios servidores de máquinas virtuales.
 A medida que el número de servidores de máquinas virtuales crece, los recursos
 asociados a los hilos y a los mecanismos de sincronización también lo harán,
 reduciendo considerablemente la escalabilidad.
 Por ejemplo, si el servidor de 
\emph on
cluster
\emph default
 está conectado a 10 servidores de máquinas virtuales, serán necesarios
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
10\cdot2+1+1=22\textrm{ hilos de red}
\]

\end_inset

junto con los mecanismos de sincronización correspondientes.
 Aunque la CPU de la máquina pueda lidiar con este número de hilos, muchos
 estarán compitiendo por entrar en las secciones críticas, lo que reduce
 el rendimiento.
 Por tanto, debemos reducir el número de hilos de la red.
\end_layout

\begin_layout Standard
Lo primero que debemos observar es que, con independencia del número de
 conexiones de red que haya, todo el tráfico viajará por el mismo medio
 físico.
 Por ello, si hacemos que todas las conexiones compartan el mismo hilo de
 envío (y, por tanto, la misma cola de envío) el rendimiento de la red no
 se resentirá significativamente.
 
\end_layout

\begin_layout Standard
Además, esto tiene una ventaja adicional: el tráfico prioritario, sea de
 la conexión que sea, siempre se enviará antes que el tráfico no prioritario.
 Si se usan varios hilos de envío, el tráfico de las distintas conexiones
 se mezclará en el bucle reactor, y no será posible garantizar este comportamien
to.
\end_layout

\begin_layout Standard
Con este cambio, el número de hilos de la red se reduce en casi un 50%,
 pero aún tenemos margen de mejora.
 En ocasiones, el código del cliente procesa los paquetes recibidos a través
 de varias conexiones de red de forma idéntica.
 Esto ocurriría si, por ejemplo, el servidor de 
\emph on
cluster
\emph default
 escribiese periódicamente el estado de todos los servidores de máquinas
 virtuales en un 
\emph on
log
\emph default
.
 
\end_layout

\begin_layout Standard
En estos casos, podemos reducir el número de hilos y evitar muchos problemas
 de sincronización haciendo que las conexiones correspondientes compartan
 el hilo de recepción de paquetes (y, por tanto, también la cola de recepción
 de paquetes).
 Esta segunda mejora permite que, en el ejemplo anterior, sólo haya
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2+1+1=4\textrm{ hilos de red}
\]

\end_inset


\end_layout

\begin_layout Standard
en el servidor de 
\emph on
cluster
\emph default
, lo que incrementa la escalabilidad.
\end_layout

\begin_layout Standard
Para facilitar el uso de la red, lo más conveniente es detectar cuándo es
 posible realizar esta optimización y aplicarla de forma totalmente transparente
 para el usuario.
 Aunque detectar estos casos puede parecer complicado, en realidad no lo
 es: cuando el cliente utiliza el mismo objeto para procesar los paquetes
 recibidos a través de varias conexiones (es decir, el mismo 
\emph on
callback
\emph default
), es posible aplicar la optimización de forma segura.
 
\end_layout

\begin_layout Standard
En cambio, si el cliente utiliza objetos diferentes o varias instancias
 de una misma clase, no es posible asegurar que estamos ante uno de estos
 casos, por lo que la optimización no se aplica.
\end_layout

\begin_layout Standard
Finalmente, puesto que los hilos y colas de recepción de paquetes se comparten,
 no podemos limitarnos a destruirlos cuando se cierra la conexión.
 Por ello, existe un contador de referencias para estos dos objetos, que
 sólo cuando este llega a cero.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
NetworkManager
\end_layout

\begin_layout Standard
A causa de las optimizaciones que hemos aplicado para reducir el número
 de hilos de la red, crear conexiones de red no resulta sencillo.
 Asimismo, tampoco resulta interesante mostrar la implementación de la red
 a los clientes, ni tampoco permitir que estos puedan crear paquetes libremente.
\end_layout

\begin_layout Standard
Para resolver estos problemas, hemos creado la clase 
\family typewriter
NetworkManager
\family default
.
 Sus objetivos son los siguientes:
\end_layout

\begin_layout Itemize
ocultar las optimizaciones que hemos realizado 
\end_layout

\begin_layout Itemize
garantizar que todos los paquetes que envían los usuarios no comprometen
 el correcto funcionamiento de la red
\end_layout

\begin_layout Itemize
proporcionar una fachada que permite establecer, utilizar y cerrar conexiones
 nivel a un elevado nivel de abstracción.
\end_layout

\begin_layout Standard
Las relaciones más relevantes de la clase 
\family typewriter
NetworkManager
\family default
 aparecen en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-más-importantes-networkmanager"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Red/Diagrama clases NetworkManager.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-más-importantes-networkmanager"

\end_inset

Relaciones más importantes de la clase 
\family typewriter
NetworkManager
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En el diagrama anterior no aparecen los hilos de recepción ni las colas
 de paquetes recibidos porque no están asociados a ningún objeto 
\family typewriter
NetworkManager
\family default
: estos objetos están siempre asociados a una conexión de red, de la que
 se tomarán en caso de que deban compartirse.
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
ftp
\end_layout

\begin_layout Subsubsection
El servidor FTP 
\family typewriter
pyftpdlib
\family default
: visión general
\end_layout

\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-del-servidor-pyftpdlib"

\end_inset

, 
\family typewriter
pyftpdlib
\family default
 es un servidor FTP ligero y escrito íntegramente en 
\emph on
Python
\emph default
.
 En primer lugar, mostraremos las clases que hemos utilizado para implementar
 nuestro servidor FTP.
 Estas, junto con sus relaciones, aparecen en el diagrama de clases de la
 figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Principales-clases-pyftpdlib"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/FTP/Diagrama clases pyftpdlib.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Principales-clases-pyftpdlib"

\end_inset

Principales clases del servidor FTP 
\family typewriter
pyftpdlib
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En primer lugar, la clase abstracta 
\family typewriter
Authorizer
\family default
 define la interfaz que se usará para restringir el acceso al servidor FTP.
 Nuestro servidor FTP utiliza su subclase concreta 
\family typewriter
DummyAuthorizer
\family default
, que restringe el acceso al servidor FTP utilizando nombres de usuario
 y sus contraseñas (sin cifrar).
\end_layout

\begin_layout Standard
Por otra parte, la clase abstracta 
\family typewriter
Filesystem
\family default
 define la interfaz que se usará para manipular los permisos del sistema
 de ficheros.
 Nuestro servidor FTP utiliza su subclase concreta 
\family typewriter
UnixFilesystem
\family default
, ya que siempre se ejecutará en Linux, que es un sistema operativo tipo
 UNIX.
\end_layout

\begin_layout Standard
Asimismo, la clase abstracta 
\family typewriter
Handler
\family default
 define la interfaz que se usará para procesar los eventos asociados a las
 transferencias de ficheros.
 Así,
\end_layout

\begin_layout Itemize
su subclase 
\family typewriter
FTPHandler
\family default
 define la interfaz que se usará para generar los eventos asociados al servidor
 FTP (como, por ejemplo, las conexiones y desconexiones de usuarios).
 Creando una subclase de 
\family typewriter
FTPHandler
\family default
, podemos determinar la forma en que se procesan estos eventos.
\end_layout

\begin_layout Itemize
su subclase 
\family typewriter
ThrottledDTPHandler
\family default
 permite controlar el ancho de banda consumido por el tráfico FTP.
\end_layout

\begin_layout Standard
Finalmente, la clase 
\family typewriter
FTPServer
\family default
 implementa el resto del código del servidor FTP.
\end_layout

\begin_layout Paragraph
Configuración de un servidor FTP
\end_layout

\begin_layout Standard
Para configurar un servidor FTP basado en 
\family typewriter
pyftpdlib
\family default
, es necesario determinar
\end_layout

\begin_layout Itemize
la forma en que se hará la autenticación en el servidor FTP,
\end_layout

\begin_layout Itemize
la forma en que se procesarán los eventos asociados a las transferencias
 FTP y, opcionalmente,
\end_layout

\begin_layout Itemize
la porción del ancho de banda total que podrá ser utilizado por el tráfico
 FTP.
\end_layout

\begin_layout Standard
Por tanto, basta con instanciar cuatro clases: la clase 
\family typewriter
FTPServer
\family default
, una subclase concreta de 
\family typewriter
Authorizer
\family default
, una subclase de 
\family typewriter
FTPHandler
\family default
 y, opcionalmente, la clase 
\family typewriter
ThrottledDTPHandler
\family default
.
\end_layout

\begin_layout Paragraph
Eventos FTP generados por el servidor FTP 
\family typewriter
pyftpdlib
\end_layout

\begin_layout Standard
Como ya hemos mencionado, el servidor FTP 
\family typewriter
pyftpdlib
\family default
 genera eventos para que el código cliente pueda responder a conexiones
 de clientes, transferencias fallidas,\SpecialChar \ldots{}
 Los eventos FTP que se generan y
 su información asociada son los siguientes:
\end_layout

\begin_layout Itemize

\series bold
desconexión inesperada de un cliente
\series default
.
 No tiene asociado ningún tipo de información.
\end_layout

\begin_layout Itemize

\series bold
conexión de un cliente
\series default
.
 Tiene asociado el nombre de usuario que ha empleado el cliente para conectarse
 al servidor.
\end_layout

\begin_layout Itemize

\series bold
desconexión normal de un cliente
\series default
.
 Tiene asociado el nombre de usuario que ha empleado el cliente para conectarse
 al servidor.
\end_layout

\begin_layout Itemize

\series bold
fin de envío de fichero
\series default
.
 Tiene asociado el nombre del fichero que ha terminado de enviarse.
\end_layout

\begin_layout Itemize

\series bold
fin de recepción de fichero
\series default
.
 Tiene asociado el nombre del fichero que se ha recibido.
\end_layout

\begin_layout Itemize

\series bold
error en el envío de un fichero
\series default
.
 Tiene asociado el nombre del fichero que ha tratado de enviarse.
\end_layout

\begin_layout Itemize

\series bold
error en la recepción de un fichero
\series default
.
 Tiene asociado el nombre del fichero que se ha recibido parcialmente.
\end_layout

\begin_layout Subsubsection
El servidor FTP de 
\emph on
CygnusCloud
\end_layout

\begin_layout Standard
El servidor FTP de 
\emph on
CygnusCloud
\emph default
 utiliza como base el servidor FTP 
\family typewriter
pyftpdlib
\family default
.
 Sus principales características son las siguientes:
\end_layout

\begin_layout Itemize
permite realizar la gestión de usuarios y contraseñas en tiempo de ejecución.
 Estos datos siempre se transmitirán sin cifrar.
\end_layout

\begin_layout Itemize
permite restringir el número total de conexiones al servidor FTP, y también
 el número máximo de conexiones por cada dirección IP.
\end_layout

\begin_layout Itemize
permite restringir el tráfico FTP a cierta interfaz de red.
\end_layout

\begin_layout Itemize
permite configurar la fracción del ancho de banda que usará el tráfico FTP.
 Para ello, detecta el ancho de banda del enlace por el que viajará el tráfico
 FTP.
\end_layout

\begin_layout Itemize
hace posible que los eventos FTP se atiendan en el código cliente cuando
 sea oportuno.
\end_layout

\begin_layout Itemize
utiliza un hilo dedicado para el servidor FTP.
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-servidor-FTP-CC"

\end_inset

 muestra las clases del servidor FTP y sus relaciones con las clases del
 servidor FTP 
\family typewriter
pyftpdlib
\family default
.
 Por claridad, en él hemos omitido las relaciones existentes entre las clases
 de 
\family typewriter
pyftpdlib
\family default
.
 Asimismo, hemos abreviado 
\family typewriter
CygnusCloud
\family default
 como 
\family typewriter
CC
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/FTP/Diagrama clases servidor FTP.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-servidor-FTP-CC"

\end_inset

El servidor FTP de 
\emph on
CygnusCloud
\emph default
: diagrama de clases
\end_layout

\end_inset


\end_layout

\end_inset


\family typewriter
ConfigurableFTPServer
\family default
 es la clase principal del servidor FTP.
 Su misión es ocultar al código cliente el proceso de configuración del
 servidor FTP 
\family typewriter
pyftpdlib
\family default
, haciendo posible que este pueda procesar los eventos generados por el
 servidor FTP.
\end_layout

\begin_layout Standard
El procesamiento de dichos eventos se realiza a través de la interfaz definida
 por la clase abstracta 
\family typewriter
FTPCallback
\family default
.
 La clase 
\family typewriter
CygnusCloudFTPHandler
\family default
, que hereda de 
\family typewriter
FTPHandler
\family default
, se encargará de invocar a los métodos de un objeto 
\family typewriter
FTPCallback
\family default
 a medida que se generen los eventos FTP.
\end_layout

\begin_layout Standard
Por otra parte, la clase 
\family typewriter
ConfigurableFTPServer
\family default
 utiliza un objeto 
\family typewriter
DummyAuthorizer
\family default
 y un objeto 
\family typewriter
ThrottledDTPHandler
\family default
 durante el proceso de configuración del servidor FTP 
\family typewriter
pyftpdlib
\family default
, lo que significa que
\end_layout

\begin_layout Itemize
la autenticación usará nombres de usuario y contraseñas en texto plano,
 y
\end_layout

\begin_layout Itemize
el ancho de banda utilizado por el tráfico FTP podrá restringirse.
\end_layout

\begin_layout Standard
Finalmente, el código del servidor FTP se ejecuta en un hilo independiente,
 que se corresponde con la clase de hilo 
\family typewriter
FTPServerThread
\family default
.
 Así, el hilo en el que se haya configurado y arrancado el servidor FTP
 podrá utilizarse con otros fines.
 
\end_layout

\begin_layout Standard
El código de la clase 
\family typewriter
FTPServerThread
\family default
 está tomado de las pruebas unitarias de 
\family typewriter
pyftpdlib
\family default
: por ahora, no se encuentra integrado con el resto de código de 
\family typewriter
pyftpdlib
\family default
.
\end_layout

\begin_layout Subsubsection
El cliente FTP de 
\emph on
CygnusCloud
\begin_inset CommandInset label
LatexCommand label
name "sub:El-cliente-FTP-cc"

\end_inset


\end_layout

\begin_layout Standard
El cliente FTP de 
\emph on
CygnusCloud
\emph default
 no es más que un envoltorio del cliente FTP incluido en la librería estándar
 de Python, 
\family typewriter
FTP
\family default
.
 Esto permite que los clientes FTP puedan intercambiar información con un
 servidor FTP a un mayor nivel de abstracción.
\end_layout

\begin_layout Standard
La clase asociada al cliente FTP de 
\emph on
CygnusCloud
\emph default
 es 
\family typewriter
FTPClient
\family default
.
 Permite, entre otras cosas,
\end_layout

\begin_layout Itemize
crear y destruir conexiones con un servidor FTP,
\end_layout

\begin_layout Itemize
subir un fichero a un determinado directorio del servidor FTP, y
\end_layout

\begin_layout Itemize
descargar un fichero ubicado en cierto directorio del servidor FTP.
\end_layout

\begin_layout Standard
Es importante notar que la clase 
\family typewriter
FTP
\family default
 de la librería estándar de 
\emph on
Python
\emph default
 
\emph on
no
\emph default
 soporta FTP seguro.
 De todos modos, resulta muy sencillo utilizar otro cliente FTP que sí lo
 soporte: basta con modificar la implementación de los métodos de la clase
 
\family typewriter
FTPClient
\family default
.
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
imageRepository
\end_layout

\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:El-repositorio-de-imagenes"

\end_inset

, el repositorio de imágenes se ocupa de almacenar todas las imágenes de
 disco asociadas a todas las máquinas virtuales que pueden utilizarse en
 un 
\emph on
cluster
\emph default
, es decir,
\end_layout

\begin_layout Itemize
las imágenes de disco asociadas a las máquinas virtuales que utilizan los
 alumnos, y
\end_layout

\begin_layout Itemize
las imágenes de disco base, que se usan para crear nuevas máquinas virtuales.
\end_layout

\begin_layout Standard
En esta sección, mostraremos detalladamente el diseño del repositorio de
 imágenes.
 Para ello, empezaremos discutiendo por qué un servidor FTP no puede utilizarse
 directamente como repositorio de imágenes.
 Acto seguido, mostraremos qué funciones realiza el repositorio de imágenes,
 para después mostrar en qué nos hemos basado para implementarlas.
\end_layout

\begin_layout Standard
Posteriormente, mostraremos las funciones que añaden las clases del paquete
 
\family typewriter
imageRepository
\family default
 al servidor FTP, para continuar mostrando las relaciones entre estas clases
 y las interacciones entre el repositorio de imágenes y una máquina remota.
 A continuación, mostraremos la organización de los ficheros en el servidor
 FTP.
\end_layout

\begin_layout Standard
Finalmente, mostraremos los formatos de paquete que emplea el repositorio
 de imágenes para interactuar con el exterior y el esquema de su base de
 datos.
\end_layout

\begin_layout Subsubsection
Adición de una capa adicional al servidor FTP 
\begin_inset CommandInset label
LatexCommand label
name "sub:Adición-capa-repositorio"

\end_inset


\end_layout

\begin_layout Standard
Puesto que el repositorio de imágenes almacena todas las imágenes de disco
 que pueden utilizarse en el 
\emph on
cluster
\emph default
, lo más razonable es que el repositorio de imágenes se construya sobre
 un servidor FTP, y que todos los servidores de máquinas virtuales se conecten
 a él como clientes FTP.
 
\end_layout

\begin_layout Standard
Ahora bien, si usamos directamente un servidor FTP para implementar el repositor
io de imágenes, tendremos que enfrentarnos con serios problemas.
 Para ilustrarlos, daremos varios ejemplos.
 
\end_layout

\begin_layout Standard
En primer lugar supongamos que, en un momento dado,
\end_layout

\begin_layout Itemize
el 
\emph on
cluster
\emph default
 contiene 
\begin_inset Formula $n$
\end_inset

 servidores de máquinas virtuales, que
\end_layout

\begin_layout Itemize
un administrador decide desplegar la misma imagen de disco en todos ellos,
 y que
\end_layout

\begin_layout Itemize
ningún servidor de máquinas virtuales tiene almacenada esa imagen de disco.
\end_layout

\begin_layout Standard
Cuando se realiza el despliegue de la imagen, el repositorio de imágenes
 tendrá que lidiar con 
\begin_inset Formula $n$
\end_inset

 conexiones simultáneas, y debe transferir un fichero de gran tamaño por
 cada una de ellas.
 A medida que aumente el número de servidores de máquinas virtuales del
 
\emph on
cluster
\emph default
, tarde o temprano se acabarán generando errores por 
\emph on
timeout
\emph default
.
 
\end_layout

\begin_layout Standard
Así, a medida que crece el número de servidores de máquinas virtuales del
 
\emph on
cluster
\emph default
,
\end_layout

\begin_layout Itemize
la infraestructura se hace más difícil de implementar o administrar, ya
 que hay que limitar el número de transferencias simultáneas entre el repositori
o de imágenes y los servidores de máquinas virtuales, y
\end_layout

\begin_layout Itemize
se está desperdiciando cada vez más ancho de banda: el que consumen las
 transferencias de ficheros que fallan.
\end_layout

\begin_layout Standard
Para que el sistema sea usable, resulta imprescindible limitar el número
 máximo de servidores de máquinas virtuales del 
\emph on
cluster.
 
\emph default
Así, el número de servidores de máquinas virtuales del 
\emph on
cluster
\emph default
 pasará a estar limitado por el ancho de banda disponible para el tráfico
 que intercambian estos y el repositorio de imágenes, y no por la capacidad
 del servidor de 
\emph on
cluster
\emph default
 para atender a todos ellos.
 Esto compromete la escalabilidad del sistema.
\end_layout

\begin_layout Standard
Por otra parte, el uso directo de un servidor FTP en el repositorio de imágenes
 tiene un inconveniente aún mayor: la aparición de conflictos en la edición
 de imágenes de disco existentes.
 Por ejemplo, supongamos que
\end_layout

\begin_layout Itemize
dos profesores 
\family sans
A
\family default
 y 
\family sans
B
\family default
 imparten la misma asignatura, que tiene asociada la máquina virtual 
\begin_inset Formula $\textsf{VM}_{1}$
\end_inset

, que
\end_layout

\begin_layout Itemize
tras utilizar la máquina virtual 
\begin_inset Formula $\textsf{VM}_{1}$
\end_inset

 por separado, 
\family sans
A
\family default
 y 
\family sans
B
\family default
 descubren que varias herramientas están mal configuradas, y que
\end_layout

\begin_layout Itemize

\family sans
A
\family default
 y 
\family sans
B
\family default
 deciden resolver por su cuenta el problema.
\end_layout

\begin_layout Standard
Para resolver este problema, tanto 
\family sans
A
\family default
 como 
\family sans
B
\family default
 tendrán que editar las imágenes de disco asociadas a la máquina virtual
 
\begin_inset Formula $\textsf{VM}_{1}$
\end_inset

.
 Pero a la hora de transferirlas de nuevo al repositorio, las modificaciones
 que ha hecho 
\family sans
A
\family default
 acabarán sobreescribiéndose con las que ha hecho 
\family sans
B
\family default
 o viceversa.
 Por tanto, uno de los profesores ha estado perdiendo el tiempo: los cambios
 que ha introducido se perderán.
\end_layout

\begin_layout Standard
En definitiva, el uso directo de un servidor FTP en el repositorio de imágenes
 presenta serios inconvenientes.
 Por ello, el repositorio de imágenes no sólo utiliza un servidor FTP, y
 añade una capa adicional para resolverlos.
 
\end_layout

\begin_layout Subsubsection
Funciones soportadas por el repositorio de imágenes 
\begin_inset CommandInset label
LatexCommand label
name "sub:Funciones-soportadas-repositorio"

\end_inset


\end_layout

\begin_layout Standard
El repositorio de imágenes está construido sobre un servidor FTP, al que
 añade las siguientes funciones:
\end_layout

\begin_layout Itemize
gestión de los identificadores de las imágenes de disco.
 Todas las imágenes de disco que pueden utilizarse en el 
\emph on
cluster
\emph default
 tienen asociado un identificador único, y el repositorio de imágenes se
 ocupa de la gestión de estos identificadores.
\end_layout

\begin_layout Itemize
borrado de una imagen del servidor que actúa como repositorio de imágenes.
\end_layout

\begin_layout Itemize
transferencia de un fichero 
\emph on
en exclusividad
\emph default
 a una máquina remota.
 Tras realizar una de estas transferencias, el fichero no podrá transferirse
 a ninguna otra máquina hasta que el repositorio reciba la copia modificada.
 Esto nos permite evitar la aparición de conflictos como el del último ejemplo
 de la sección anterior.
\end_layout

\begin_layout Itemize
cálculo del espacio en disco total y disponible.
\end_layout

\begin_layout Itemize
control del número de transferencias simultáneas, tratando con equidad a
 todas las máquinas remotas que deseen intercambiar un fichero con el repositori
o de imágenes.
\end_layout

\begin_layout Standard
Naturalmente, el repositorio de imágenes también soporta la transferencia
 y la recepción de ficheros.
 Para realizar estas operaciones, delega en el servidor FTP.
\end_layout

\begin_layout Subsubsection
La conexión de control
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-conexión-control"

\end_inset


\end_layout

\begin_layout Standard
El enlace que conecta el repositorio de imágenes a la red troncal de la
 UCM será 
\emph on
full duplex
\emph default
.
 Para aprovechar su ancho de banda al máximo, debemos utilizar todo el ancho
 de banda de bajada y todo el ancho de banda de subida que podamos, por
 lo que debemos intentar, en la medida de lo posible, realizar varias transferen
cias de subida y de descarga de ficheros en paralelo.
 
\end_layout

\begin_layout Standard
Por otra parte, el ancho de banda del enlace está limitado.
 Si permitimos que los servidores se conecten sin control al servidor FTP,
 podrán generarse errores por 
\emph on
timeout
\emph default
 que supondrán, tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Adición-capa-repositorio"

\end_inset

, un desperdicio del ancho de banda del enlace.
\end_layout

\begin_layout Standard
Así pues, debemos restringir el número máximo de transferencias simultáneas
 entre el servidor FTP y las máquinas remotas, y también debemos realizar
 las transferencias de subida y de descarga en paralelo cuando sea posible.
 Para ello, las máquinas remotas no se conectarán directamente al servidor
 FTP, y dialogarán previamente con el repositorio de imágenes a través de
 una conexión de control adicional.
\end_layout

\begin_layout Subsubsection
Los 
\emph on
slots
\emph default
 de transferencia
\end_layout

\begin_layout Standard
Como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-conexión-control"

\end_inset

, para no desperdiciar el ancho de banda del enlace resulta imprescindible
 restringir el número de transferencias simultáneas entre el repositorio
 de imágenes y las máquinas remotas.
 Para ello, hemos utilizado un mecanismo basado en 
\emph on
slots
\emph default
.
\end_layout

\begin_layout Standard
Cada 
\emph on
slot
\emph default
 estará asociado a una transferencia activa.
 Por ejemplo, si en un instante dado existen 
\begin_inset Formula $n$
\end_inset

 transferencias activas en total, se estarán utilizando 
\begin_inset Formula $n$
\end_inset

 
\emph on
slots
\emph default
.
 El número máximo de 
\emph on
slots
\emph default
 de transferencia se configura durante el arranque del repositorio de imágenes.
 
\end_layout

\begin_layout Standard
Así, cuando se recibe una nueva petición de transferencia,
\end_layout

\begin_layout Itemize
si hay un 
\emph on
slot 
\emph default
libre, se marcará como ocupado y se iniciará la transferencia, y
\end_layout

\begin_layout Itemize
si no hay ningún 
\emph on
slot 
\emph default
libre, la petición correspondiente se encolará.
\end_layout

\begin_layout Standard
Tras finalizar una transferencia, se desencolará e iniciará la siguiente
 petición.
 Esto nos permite limitar el número máximo de transferencias activas entre
 el repositorio de imágenes y el resto de máquinas del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Subsubsection
Clases principales 
\begin_inset CommandInset label
LatexCommand label
name "sub:Clases-principales-repositorio"

\end_inset


\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Principales-clases-repositorio"

\end_inset

 muestra las principales clases del repositorio de imágenes y sus relaciones
 con otras clases.
 Por claridad,
\end_layout

\begin_layout Itemize

\family typewriter
ImageRepository
\family default
 aparece abrevidado como 
\family typewriter
IR,
\end_layout

\begin_layout Itemize
las relaciones de la clase 
\family typewriter
FTPServerCallback
\family default
 aparecen en azul,
\end_layout

\begin_layout Itemize
las relaciones de la clase 
\family typewriter
CommandsCallback
\family default
 aparecen en rojo,
\end_layout

\begin_layout Itemize
hemos omitido las relaciones existentes entre las clases que no forman parte
 del paquete 
\family typewriter
imageRepository
\family default
, y
\end_layout

\begin_layout Itemize
no hemos indicado los paquetes a los que pertenecen las clases que no están
 definidas en el paquete 
\family typewriter
imageRepository
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Repositorio/Diagrama clases repositorio.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Principales-clases-repositorio"

\end_inset

Principales clases del repositorio de imágenes y sus relaciones
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las principales clases que aparecen en el diagrama y sus responsabilidades
 son las siguientes:
\end_layout

\begin_layout Itemize

\family typewriter
ImageRepositoryReactor
\family default
 es la clase principal del repositorio de imágenes.
 Además de ocuparse de los procesos de arranque y apagado del demonio del
 servidor de imágenes, también se encarga de asignación de 
\emph on
slots
\emph default
 a las transferencias encoladas.
\end_layout

\begin_layout Itemize
la clase 
\family typewriter
CommandsCallback
\family default
 procesará todos los paquetes recibidos a través de la conexión de control.
 Análogamente, la clase 
\family typewriter
FTPServerCallback
\family default
 procesará todos los eventos generados por el servidor FTP.
\end_layout

\begin_layout Itemize
la clase 
\family typewriter
ImageRepositoryPacketHandler
\family default
 dispone de métodos para crear y leer los paquetes que se intercambian a
 través de la conexión de control.
\end_layout

\begin_layout Itemize
la clase 
\family typewriter
ImageRepositoryDBConnector
\family default
 dispone de métodos para manipular la base de datos del repositorio de imágenes.
\end_layout

\begin_layout Itemize
la clase 
\family typewriter
ImageRepositoryConfigurationFileParser
\family default
 procesa el fichero de configuración del demonio del repositorio de imágenes.
\end_layout

\begin_layout Standard
Por otra parte, 
\end_layout

\begin_layout Itemize
las clases 
\family typewriter
ConfigurationFileParser
\family default
, 
\family typewriter
BasicDBConnector
\family default
, 
\family typewriter
MultithreadingQueue
\family default
 y 
\family typewriter
MultithreadingCounter
\family default
 forman parte del paquete 
\family typewriter
ccutils
\family default
,
\end_layout

\begin_layout Itemize
las clases 
\family typewriter
Packet
\family default
, 
\family typewriter
NetworkManager
\family default
 y 
\family typewriter
NetworkCallback
\family default
 forman parte del paquete 
\family typewriter
network
\family default
, y
\end_layout

\begin_layout Itemize
las clases 
\family typewriter
FTPCallback
\family default
 y 
\family typewriter
ConfigurableFTPServer
\family default
 forman parte del paquete 
\family typewriter
FTP
\family default
.
\end_layout

\begin_layout Standard
Más adelante, justificaremos el uso de estas clases, así como la cardinalidad
 de las relaciones de agregación y composición.
\end_layout

\begin_layout Subsubsection
Arranque del repositorio de imágenes
\end_layout

\begin_layout Standard
El proceso de arranque del demonio del repositorio de imágenes aparece en
 el diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-del-repositorio-DS"

\end_inset

.
 En él, 
\family typewriter
ImageRepository
\family default
 aparece abreviado como 
\family typewriter
IR
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Arranque repositorio.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-del-repositorio-DS"

\end_inset

Arranque del repositorio de imágenes: diagrama de secuencia
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como puede observarse en el diagrama, desde el punto de entrada del demonio
 del repositorio de imágenes se invoca a varios métodos de la clase 
\family typewriter
ImageRepositoryReactor
\family default
.
 Los pasos que se siguen son los siguientes:
\end_layout

\begin_layout Enumerate
se crea la base de datos si no existe, y se registra un usuario que disponga
 de todos los permisos sobre ella.
\end_layout

\begin_layout Enumerate
se parsea el fichero de configuración.
 El reactor del repositorio de imágenes utilizará esa información durante
 el proceso de inicialización.
\end_layout

\begin_layout Enumerate
se crean las dos colas de transferencias y el contador de 
\emph on
slots
\emph default
.
 
\end_layout

\begin_deeper
\begin_layout Standard
Aunque sería posible utilizar una única cola de transferencias y extraer
 de ella peticiones de subida y de bajada, por eficiencia hemos utilizado
 dos colas: una contiene las peticiones de subida, y otra las peticiones
 de bajada.
 Esto explica la cardinalidad de las relaciones de agregación del diagrama
 de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Principales-clases-repositorio"

\end_inset

.
\end_layout

\begin_layout Standard
Por otra parte, el contador de 
\emph on
slots
\emph default
 indica cuántos 
\emph on
slots
\emph default
 de transferencia están ocupados en un momento dado.
\end_layout

\end_deeper
\begin_layout Enumerate
se establece la conexión con la base de datos del repositorio de imágenes.
\end_layout

\begin_layout Enumerate
se inicializan el gestor de red y el gestor de paquetes (una instancia de
 
\family typewriter
ImageRepositoryPacketHandler
\family default
).
 Como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Clases-principales-repositorio"

\end_inset

, esta clase manipular los formatos de paquete asociados al repositorio
 de imágenes.
 Así, si es necesario modificar alguno de ellos basta con modificar el código
 de esta clase.
\end_layout

\begin_layout Enumerate
se configura y utiliza la conexión de control.
 Para ello, es necesario disponer de un objeto 
\emph on
callback
\emph default
 que procese los paquetes recibidos por la conexión de control.
 En el caso del repositorio de imágenes, se utiliza como objeto 
\emph on
callback 
\emph default
una instancia de la clase 
\family typewriter
CommandsCallback
\family default
.
\end_layout

\begin_layout Enumerate
se configura e inicia el servidor FTP.
 Es importante notar que la contraseña se genera aleatoriamente en cada
 arranque.
\end_layout

\begin_layout Enumerate
se empieza a asignar 
\emph on
slots
\emph default
 a las peticiones de transferencia encoladas.
\end_layout

\begin_layout Standard
Tras esto, el repositorio de imágenes está totalmente operativo.
\end_layout

\begin_layout Subsubsection
Interacciones del repositorio de imágenes 
\begin_inset CommandInset label
LatexCommand label
name "sub:Interacciones-del-repositorio"

\end_inset


\end_layout

\begin_layout Standard
En esta sección, mostraremos cómo interactúa el repositorio de imágenes
 con una máquina remota.
 Todas estas interacciones tienen lugar intercambiando paquetes a través
 de la conexión de control.
 Además, las que requieran la transferencia de un fichero también involucrarán
 al servidor FTP.
\end_layout

\begin_layout Standard
Por claridad, en esta sección hemos preferido centrarnos en la secuencia
 de acciones que se realizan en cada caso, y no en los formatos de los tipos
 de paquete que se utilizan.
 Más adelante, en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Formatos-de-paquete-repositorio"

\end_inset

, los describiremos con todo lujo de detalles.
\end_layout

\begin_layout Paragraph
Registro de un identificador de imagen 
\begin_inset CommandInset label
LatexCommand label
name "par:Registro-identificador-imagen"

\end_inset


\end_layout

\begin_layout Standard
Como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Funciones-soportadas-repositorio"

\end_inset

, el repositorio se ocupa de la gestión de los identificadores de las imágenes
 de disco de la infraestructura.
 Por ello, cuando se cree una nueva imagen, será necesario solicitar el
 identificador de la misma al repositorio.
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Registro-identificador-imagen"

\end_inset

 muestra la interacción que tiene lugar para reservar dicho identificador.
 Nuevamente, hemos abreviado 
\family typewriter
ImageRepository
\family default
 como 
\family typewriter
IR
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Registro identificador imagen.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Registro-identificador-imagen"

\end_inset

Registro de un identificador de imagen: diagrama de secuencia
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como puede observarse en el diagrama, se siguen los siguientes pasos:
\end_layout

\begin_layout Enumerate
a través de la conexión de control, la máquina remota envía un paquete del
 tipo 
\family sans
Crear Imagen
\family default
 al repositorio de imágenes.
\end_layout

\begin_layout Enumerate
la red invoca al método de procesamiento de paquetes del objeto 
\family typewriter
CommandsCallback
\family default
 del repositorio de imágenes.
\end_layout

\begin_layout Enumerate
el objeto 
\family typewriter
CommandsCallback
\family default
 lee el contenido del paquete a través de un objeto 
\family typewriter
ImageRepositoryPacketHandler
\family default
.
 Acto seguido, solicita a un objeto 
\family typewriter
ImageRepositoryDBConnector
\family default
 la generación de un nuevo identificador de imagen.
 
\end_layout

\begin_deeper
\begin_layout Standard
El objeto 
\family typewriter
ImageRepositoryDBConnector
\family default
 generará el identificador único utilizando el contenido de las tablas de
 la base de datos del repositorio de imágenes.
\end_layout

\end_deeper
\begin_layout Enumerate
el objeto 
\family typewriter
CommandsCallback
\family default
 construye el paquete con la respuesta, que es del tipo 
\family sans
Imagen Creada
\family default
.
 Este paquete se crea a través de un objeto 
\family typewriter
ImageRepositoryPacketHandler
\family default
, y contiene el identificador de imagen que se ha generado.
\end_layout

\begin_layout Enumerate
el objeto 
\family typewriter
CommandsHandler
\family default
 envía ese paquete a la máquina remota.
 Para ello, utiliza un objeto 
\family typewriter
NetworkManager
\family default
.
\end_layout

\begin_layout Standard
En todas las interacciones, el repositorio de imágenes utiliza del modo
 de envío 
\emph on
unicast
\emph default
 de la conexión de control para enviar las respuestas.
 Por ello, sólo el cliente que envió la petición correspondiente (y no todos)
 recibirá la respuesta.
 Esto nos permite ahorrar mucho ancho de banda.
\end_layout

\begin_layout Paragraph
Descarga de imágenes de disco 
\begin_inset CommandInset label
LatexCommand label
name "par:Descarga-de-imágenes"

\end_inset


\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Almacenamiento-imágenes-zip"

\end_inset

 dijimos que, para ahorrar ancho de banda y espacio en disco, las máquinas
 de la infraestructura no intercambian directamente ficheros de imagen,
 sino ficheros 
\family typewriter
zip
\family default
 que contienen ficheros de imagen.
\end_layout

\begin_layout Standard
Por ello, el repositorio de imágenes sólo intercambia ficheros 
\family typewriter
zip
\family default
 con las máquinas remotas.
 En esta sección, mostraremos todas las posibles interacciones que tienen
 lugar cuando una máquina remota intenta descargar uno de estos ficheros
 comprimidos.
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transferencia-imagen-basica"

\end_inset

 muestra la interacción básica de inicio de la transferencia, en la que
 no aparecen errores.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Inicio transferencia básico.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Transferencia-imagen-basica"

\end_inset

Inicio de la transferencia de una imagen a una máquina remota: secuencia
 básica
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los pasos que se siguen son los siguientes:
\end_layout

\begin_layout Enumerate
el objeto 
\family typewriter
CommandsCallback
\family default
 recibe el paquete del tipo 
\family sans
Petición 
\family typewriter
FTP RETR
\family default
, y lee su contenido mediante un objeto 
\family typewriter
ImageRepositoryPacketHandler
\family default
.
 Estos paquetes contienen el identificador único del fichero comprimido.
\end_layout

\begin_layout Enumerate
el objeto 
\family typewriter
CommandsCallback
\family default
 comprueba que el fichero existe y que no ha sido concedido en exclusividad
 a otra máquina.
 Como no se producen errores, confirma a la máquina remota la recepción
 de su petición mediante un paquete del tipo 
\family sans
Petición 
\family typewriter
FTP RETR
\family sans
 Recibida
\family default
.
\end_layout

\begin_layout Enumerate
cuando un 
\emph on
slot 
\emph default
de transferencia queda libre y la petición llega a la cabecera de la cola,
 desde el método 
\family typewriter
initTransfers()
\family default
 
\end_layout

\begin_deeper
\begin_layout Enumerate
se comprueba nuevamente que el fichero puede transferirse.
 En la interacción del diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transferencia-imagen-basica"

\end_inset

 no se detecta ningún error.
\end_layout

\begin_layout Enumerate
se reserva un 
\emph on
slot
\emph default
 de transferencia
\end_layout

\begin_layout Enumerate
se envía un paquete del tipo 
\family sans
Inicio transferencia
\family default
 
\family typewriter
FTP RETR
\family default
 a la máquina remota.
 Este contiene todo la la información que la máquina remota necesita para
 descargar el fichero comprimido.
\end_layout

\end_deeper
\begin_layout Standard
Para aprovechar al máximo el ancho de banda del enlace, las transferencias
 se desencolan procurando que, cuando sea posible, se realicen transferencias
 de subida y descarga en paralelo.
 Así, las transferencias no siempre se inician en estricto orden de recepción.
 Por claridad, hemos preferido no reflejar esto en el diagrama.
\end_layout

\begin_layout Standard
Por otra parte, no se podrá realizar la transferencia cuando 
\end_layout

\begin_layout Itemize
el fichero a descargar no existe, o
\end_layout

\begin_layout Itemize
este ha sido concedido en exclusividad a otra máquina.
 
\end_layout

\begin_layout Standard
Estos errores pueden detectarse tanto al procesar el paquete 
\family sans
Petición 
\family typewriter
FTP RETR
\family sans
 
\family default
como al habilitar la transferencia.
 Los diagramas de secuencia de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion-1"

\end_inset

 muestran cómo interactúan el repositorio y la máquina remota al detectar
 estos errores.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Errores transferencia imagen 1.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Detección-de-errores-peticion"

\end_inset

Detección de errores al recibir la petición de transferencia
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Error transferencia 2.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Detección-de-errores-peticion-1"

\end_inset

Detección de errores al habilitar la transferencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como puede observarse en los diagramas de secuencia de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion-1"

\end_inset

, al detectar un error el repositorio de imágenes envía un paquete de error
 a la máquina remota, y esta no realiza la transferencia.
 Todos los paquetes de error contienen, además del identificador de las
 imágenes de disco del fichero comprimido, un código que indica la causa
 del error.
\end_layout

\begin_layout Standard
Finalmente, cuando no se producen errores se realizará una transferencia
 FTP 
\family typewriter
RETR
\family default
 entre la máquina remota y el servidor FTP.
 El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transferencia-imagen"

\end_inset

 muestra la interacción que tiene lugar en este caso.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Transferencia FTP RETR.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Transferencia-imagen"

\end_inset

Transferencia de una imagen a una máquina remota
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tras finalizar la transferencia, se invocará al método 
\family typewriter
on_file_sent()
\family default
 del objeto 
\family typewriter
FTPServerCallback
\family default
, en el que se liberará el 
\emph on
slot 
\emph default
asignado a la transferencia.
 Cuando se libera el 
\emph on
slot
\emph default
, se iniciará la siguiente transferencia encolada (si la hay).
\end_layout

\begin_layout Paragraph
Uso de imágenes de disco en exclusividad
\end_layout

\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Funciones-soportadas-repositorio"

\end_inset

, el repositorio de imágenes puede transferir un fichero comprimido a una
 máquina remota en exclusividad.
 Esto significa que, mientras que esa máquina remota no lo libere, bien
 subiendo una versión modificada del fichero o bien pidiendo al repositorio
 que lo libere, ninguna otra máquina remota podrá descargarlo.
\end_layout

\begin_layout Standard
En esta sección, mostraremos cómo una máquina remota descarga un fichero
 en exclusividad, y también cómo lo puede liberar sin volver a subirlo.
 En la siguiente sección, mostraremos cómo puede liberarlo subiendo una
 copia modificada del mismo.
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Descarga-fichero-exclusividad"

\end_inset

 muestra cómo el repositorio de imágenes recibe una petición de descarga
 en exclusividad.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Inicio transferencia FTP RETR exclusiva.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Descarga-fichero-exclusividad"

\end_inset

Descarga de un fichero en exclusividad
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se puede observar en el diagrama de secuencia, la petición se procesa
 casi igual que una petición de descarga 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

.
 No obstante, a diferencia del caso anterior,
\end_layout

\begin_layout Itemize
el flag 
\emph on
modify
\emph default
, que forma parte todos los paquetes 
\family sans
Petición 
\family typewriter
FTP RETR
\family default
, está activado, y
\end_layout

\begin_layout Itemize
al procesar la petición, el repositorio de imágenes registra en la base
 de datos que la imagen se va a descargar en exclusividad.
\end_layout

\begin_layout Standard
La descarga de la imagen y el tratamiento de los errores son idénticos a
 los de una transferencia de descarga 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Por otra parte, el diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Liberación-imagen-dico"

\end_inset

 muestra cómo una máquina remota libera un fichero que tiene en exclusividad.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Liberación imagen.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Liberación-imagen-dico"

\end_inset

Liberación de una imagen de disco
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este caso,
\end_layout

\begin_layout Enumerate
la máquina remota envía un paquete del tipo 
\family sans
Liberar imagen
\family default
 al repositorio de imágenes.
 Este contiene el identificador del fichero comprimido.
\end_layout

\begin_layout Enumerate
al procesar el paquete, desde el objeto 
\family typewriter
CommandsCallback
\family default
 se modifica el estado de la imagen en la base de datos del repositorio
 de imágenes.
\end_layout

\begin_layout Enumerate
finalmente, el objeto 
\family typewriter
CommandsCallback
\family default
 envía un paquete del tipo 
\family sans
Imagen liberada
\family default
 a la máquina remota.
\end_layout

\begin_layout Standard
Es importante notar que, cuando se intenta liberar un fichero que no está
 asignado en exclusividad a una máquina, la petición no tendrá efecto.
 Por ello, en este caso no se generarán errores.
\end_layout

\begin_layout Paragraph
Subida de imágenes de disco
\end_layout

\begin_layout Standard
Las interacciones que tienen lugar para transferir una imagen de disco desde
 una máquina remota al repositorio de imágenes son prácticamente idénticas
 a las interaccioens de descarga.
 Por ello, en este apartado las comentaremos de forma breve.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Inicio transferencia STOR basico.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Transferencia-imagen-basica-1"

\end_inset

Inicio de la transferencia de una imagen desde una máquina remota: secuencia
 básica
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transferencia-imagen-basica-1"

\end_inset

 muestra la interacción básica de inicio de transferencia.
 En ella, no se produce ningún error.
 Como puede observarse en el diagrama, el repositorio de imágenes y la máquina
 remota intercambian los paquetes 
\end_layout

\begin_layout Itemize

\family sans
Petición 
\family typewriter
FTP STOR
\family default
, que contiene el identificador único del fichero comprimido a subir,
\end_layout

\begin_layout Itemize

\family sans
Petición 
\family typewriter
FTP STOR
\family default
 
\family sans
Recibida
\family default
, e
\end_layout

\begin_layout Itemize

\family sans
Inicio Transferencia 
\family typewriter
FTP STOR
\family default
 que, nuevamente, contiene toda la información que necesita la máquina remota
 para conectarse al servidor FTP e iniciar la transferencia.
\end_layout

\begin_layout Standard
Además, también debemos recordar que, para aprovechar el ancho de banda
 del enlace, las transferencias FTP 
\family typewriter
STOR
\family default
 y FTP 
\family typewriter
RETR
\family default
 no tienen por qué desencolarse en el mismo orden en que se reciben.
 Por claridad, tampoco hemos reflejado esto en el diagrama de secuencia
 de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transferencia-imagen-basica-1"

\end_inset

.
\end_layout

\begin_layout Standard
Por otra parte, en este caso sólo se producirán errores cuando el identificador
 de la imagen a subir no exista.
 Si una máquina tiene el fichero comprimido en exclusividad, sólo ella podrá
 descargarlo y sólo ella podrá subirlo.
 Así, en las transferencias de subida no es necesario detectar si otra máquina
 tiene la imagen en exclusividad o no.
 
\end_layout

\begin_layout Standard
Nuevamente, los errores pueden detectarse tanto al recibir la petición de
 transferencia como al habilitar la subida del fichero.
 Los diagramas de secuencia de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion-stor"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion-stor-1"

\end_inset

 contienen las interacciones correspondientes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Errores FTP STOR 1.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Detección-de-errores-peticion-stor"

\end_inset

Detección de errores al recibir la petición de transferencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Errores FTP STOR 2.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Detección-de-errores-peticion-stor-1"

\end_inset

Detección de errores al habilitar la transferencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como puede observarse en los diagramas de secuencia de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion-stor"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Detección-de-errores-peticion-stor-1"

\end_inset

, cuando se suben ficheros al repositorio de imágenes se usan los paquetes
 de error 
\family sans
Petición 
\family typewriter
FTP STOR
\family sans
 Errónea
\family default
 y 
\family sans
Error en transferencia 
\family typewriter
FTP STOR
\family default
.
 Nuevamente, estos paquetes contienen el identificador asociado a las imágenes
 de disco y un código de descripción del error.
\end_layout

\begin_layout Standard
Finalmente, el diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Transferencia-imagen-máquina-remota"

\end_inset

 muestra cómo interactúan el repositorio de imágenes durante la subida de
 un fichero con imágenes de disco.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Transferencia FTP STOR.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Transferencia-imagen-máquina-remota"

\end_inset

Transferencia de una imagen desde una máquina remota
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se puede observar en este último diagrama, cuando se invoca a la función
 
\family typewriter
on_file_received()
\family default
 del objeto 
\family typewriter
FTPServerCallback
\family default
, se invoca a un método del conector de la base de datos, que registra la
 ruta del fichero comprimido y modifica el estado de la imagen.
\end_layout

\begin_layout Paragraph
Transferencias parciales
\end_layout

\begin_layout Standard
En las dos secciones anteriores, hemos mostrado las interacciones que tienen
 lugar cuando una máquina remota intercambia un fichero comprimido con el
 repositorio de imágenes.
 Por claridad, en ambas hemos omitido el tratamiento de un tipo de error
 adicional: las transferencias parciales.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Transferencias parciales.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tratamiento-transferencias-parciales"

\end_inset

Tratamiento de las transferencias parciales
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tratamiento-transferencias-parciales"

\end_inset

 muestra cómo se procesan los eventos de descarga parcial y de subida parcial
 en el repositorio de imágenes.
 Como se puede observar en él,
\end_layout

\begin_layout Itemize
cuando una transferencia de descarga falla, se libera el fichero correspondiente
 si estaba asignado en exclusividad a la máquina remota, y
\end_layout

\begin_layout Itemize
cuando una transferencia de subida falla, se borran los datos recibidos.
\end_layout

\begin_layout Standard
En ambos casos, se libera el 
\emph on
slot
\emph default
 de la transferencia.
 Además, no es necesario informar a la máquina remota, ya que el cliente
 FTP que esta utiliza detectará el error.
\end_layout

\begin_layout Paragraph
Borrado de una imagen de disco
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacciones-asociadas-borrado"

\end_inset

 muestra las interacciones que tienen lugar al borrar una imagen de disco
 y al detectar un error en el borrado de una imagen de disco.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Borrado imagen.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interacciones-asociadas-borrado"

\end_inset

Interacciones asociadas al borrado de una imagen de disco
\end_layout

\end_inset


\end_layout

\end_inset

Los paquetes del tipo 
\family sans
Solicitud de borrado
\family default
 contienen el identificador del fichero a borrar.
 Tras leer su contenido, el objeto 
\family typewriter
CommandsCallback
\end_layout

\begin_layout Enumerate
comprueba que la imagen existe y que ninguna máquina lo tiene en exclusividad.
 Si alguna de estas condiciones no se cumple, generará y enviará un paquete
 del tipo 
\family sans
Solicitud de borrado errónea
\family default
, que contiene, junto con el identificador del fichero, un código con la
 descripción del error.
\end_layout

\begin_layout Enumerate
borra el fichero del disco y de la base de datos.
\end_layout

\begin_layout Enumerate
envía un paquete del tipo 
\family sans
Solicitud de borrado recibida
\family default
 a la máquina remota.
\end_layout

\begin_layout Paragraph
Solicitudes de estado
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Recopilación-del-estado-repositorio"

\end_inset

 muestra cómo se procesan los paquetes de solicitud de estado.
 Estos permiten que una máquina remota conozca el espacio en disco total
 y el espacio en disco disponible.
 
\end_layout

\begin_layout Standard
Con esta información podemos garantizar que, siempre que se suba un fichero
 al repositorio de imágenes, habrá suficiente espacio en disco.
 Así, no se desperdiciará el ancho de banda que requieren las transferencias
 de subida que requieren demasiado espacio en disco y que, por tanto, fallarán
 irremediablemente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Interacción estado.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Recopilación-del-estado-repositorio"

\end_inset

Recopilación del estado del repositorio
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como puede observarse en el diagrama de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Recopilación-del-estado-repositorio"

\end_inset

, para averiguar uso de disco del repositorio,
\end_layout

\begin_layout Enumerate
la máquina remota envía un paquete del tipo 
\family sans
Solicitud de estado
\family default
.
 
\end_layout

\begin_layout Enumerate
para procesarlo, el objeto 
\family typewriter
CommandsCallback
\family default
 averigua el espacio en disco total y el espacio en disco disponible (en
 
\emph on
kilobytes
\emph default
), 
\end_layout

\begin_layout Enumerate
con estos valores, el objeto 
\family typewriter
CommandsCallback
\family default
 construye un paquete del tipo 
\family sans
Estado del repositorio
\family default
 y lo envía a la máquina remota.
\end_layout

\begin_layout Paragraph
Apagado del repositorio de imágenes 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Repositorio/Apagado repositorio.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Apagado-del-repositorio-DS"

\end_inset

Apagado del repositorio de imágenes: diagrama de secuencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Apagado-del-repositorio-DS"

\end_inset

 muestra el proceso de apagado del demonio del repositorio de imágenes.
 Como puede observarse en el diagrama de secuencia, el apagado del repositorio
 es bastante sencillo:
\end_layout

\begin_layout Enumerate
cuando se recibe el paquete de apagado, el objeto 
\family typewriter
CommandsCallback
\family default
 modifica una variable compartida con el método 
\family typewriter
initTransfers()
\family default
.
 Como consecuencia de ello, el método 
\family typewriter
initTransfers()
\family default
 termina.
 
\end_layout

\begin_layout Enumerate
el hilo principal invoca al método 
\family typewriter
stopListenning()
\family default
 del reactor del repositorio.
 
\end_layout

\begin_layout Enumerate
el servidor FTP finaliza su ejecución.
\end_layout

\begin_layout Enumerate
se cierran todas las conexiones de red.
\end_layout

\begin_layout Standard
Tras esto, el demonio del repositorio de imágenes habrá terminado de ejecutarse.
\end_layout

\begin_layout Subsubsection
Formatos de paquete
\begin_inset CommandInset label
LatexCommand label
name "sub:Formatos-de-paquete-repositorio"

\end_inset


\end_layout

\begin_layout Standard
En esta sección, mostraremos detalladamente las características de los tipos
 de paquete asociados al repositorio de imágenes.
 El cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Paquetes-repositorio-imágenes"

\end_inset

 muestra los códigos, prioridades y las constantes del tipo enumerado 
\family typewriter
PACKET_T
\family default
 (definido en el paquete 
\family typewriter
imageRepository.packetHandling
\family default
) asociados a cada clase de paquete.
 
\end_layout

\begin_layout Standard
Como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-clase-Packet"

\end_inset

, cuanto menor es la valor numérico de la prioridad de un paquete, más prioritar
io es.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="4">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row endhead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo de paquete
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Código
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Prioridad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Constante (tipo enumerado)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Apagado
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HALT
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Crear imagen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ADD_IMAGE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Imagen creada
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ADDED_IMAGE_ID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud 
\family typewriter
FTP RETR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RETR_REQUEST
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud 
\family typewriter
FTP RETR
\family default
 recibida
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RETR_REQUEST_RECVD
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud 
\family typewriter
FTP RETR
\family default
 errónea
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RETR_REQUEST_ERROR
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inicio de transferencia 
\family typewriter
FTP RETR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RETR_START
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error en la transferencia 
\family typewriter
FTP RETR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RETR_ERROR
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud 
\family typewriter
FTP STOR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STOR_REQUEST
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud 
\family typewriter
FTP STOR
\family default
 recibida
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STOR_REQUEST_RECVD
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud 
\family typewriter
FTP STOR
\family default
 errónea
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STOR_REQUEST_ERROR
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inicio de transferencia 
\family typewriter
FTP STOR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STOR_START
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Error en la transferencia 
\family typewriter
FTP STOR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STOR_ERROR
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud de borrado
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DELETE_REQUEST
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud de borrado recibida
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DELETE_REQUEST_RECVD
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud de borrado errónea
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DELETE_REQUEST_ERROR
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Solicitud de estado
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STATUS_REQUEST
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Estado del repositorio
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STATUS_DATA
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Liberar imagen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
CANCEL_EDITION
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Imagen liberada
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
IMAGE_EDITION_CANCELLED
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Paquetes-repositorio-imágenes"

\end_inset

Características principales de los paquetes utilizados en el repositorio
 de imágenes
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
El contenido de los distintos tipos de paquete es el siguiente:
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Apagado
\family default
 
\series default
no contienen información adicional.
 
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Crear imagen
\family default
\series default
 tampoco contienen información adicional.
 
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Imagen creada
\family default
\series default
 contienen un nuevo identificador de imagen generado por el repositorio
 de imágenes.
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Solicitud
\family default
 
\family typewriter
FTP RETR
\family default
\series default
 contienen el identificador único del fichero a transferir, y un 
\emph on
flag
\family typewriter
\emph default
 modify
\family default
 que indica si desea descargar el fichero en exclusividad o no.
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Solicitud
\family default
 
\family typewriter
FTP STOR
\family default
\series default
 contienen el identificador único del fichero a transferir.
\end_layout

\begin_layout Itemize
los paquetes de los tipos 
\family sans
\series bold
Solicitud
\family default
 
\family typewriter
FTP RETR 
\family sans
recibida
\family default
\series default
 y 
\family sans
\series bold
Solicitud
\family default
 
\family typewriter
FTP STOR
\family default
 
\family sans
recibida
\family default
\series default
 contienen el identificador único del fichero a descargar
\end_layout

\begin_layout Itemize
los paquetes de los tipos 
\family sans
\series bold
Solicitud
\family default
 
\family typewriter
FTP RETR
\family default
 
\family sans
errónea
\family default
\series default
, 
\family sans
\series bold
Solicitud
\family default
 
\family typewriter
FTP STOR
\family default
 
\family sans
errónea
\family default
\series default
, 
\family sans
\series bold
Error en la transferencia
\family default
 
\family typewriter
FTP RETR
\family default
\series default
 y 
\family sans
\series bold
Error en la transferencia 
\family typewriter
FTP STOR
\family default
\series default
 contienen el identificador único del fichero a descargar y un código de
 descripción del error.
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Inicio de transferencia
\family default
 
\family typewriter
FTP RETR
\family default
\series default
 e 
\family sans
\series bold
Inicio de transferencia 
\family typewriter
FTP STOR
\family default
\series default
 contienen todo lo que necesita una máquina remota para subir o descargar
 una imagen desde el servidor FTP del repositorio de imágenes, es decir
\end_layout

\begin_deeper
\begin_layout Itemize
el nombre de usuario y la contraseña del servidor FTP
\end_layout

\begin_layout Itemize
el identificador del fichero a transferir
\end_layout

\begin_layout Itemize
el puerto en el que escucha el servidor FTP,
\end_layout

\begin_layout Itemize
el directorio del servidor donde se encuentra el fichero a transferir y
\end_layout

\begin_layout Itemize
el nombre del fichero a transferir.
\end_layout

\end_deeper
\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Solicitud de borrado
\family default
\series default
 contienen el identificador de la imagen a borrar.
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Solicitud de borrado recibida
\family default
\series default
 contienen el identificador único de la imagen borrada.
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Solicitud de borrado errónea
\series default
 
\family default
contienen el identificador único del fichero a borrar (un valor entero)
 y un código de descripción del error.
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Solicitud de estado
\family default
\series default
 no contienen información adicional
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Estado del repositorio
\family default
\series default
 contienen el espacio en disco total y el espacio en disco utilizado en
 el repositorio de imágenes.
\end_layout

\begin_layout Itemize
los paquetes del tipo 
\family sans
\series bold
Liberar imagen
\family default
\series default
 e 
\family sans
\series bold
Imagen liberada
\family default
\series default
 contienen el identificador único del fichero a liberar.
 
\end_layout

\begin_layout Standard
Finalmente, los 
\emph on
flags
\emph default
, los identificadores de imagen, los puertos y los códigos de error son
 valores enteros.
 El resto de datos que transportan los paquetes del repositorio de imaǵenes
 son 
\emph on
strings
\emph default
.
\end_layout

\begin_layout Subsubsection
Distribución de los ficheros
\end_layout

\begin_layout Standard
Como hemos visto en las interacciones correspondientes de la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Interacciones-del-repositorio"

\end_inset

, cuando una transferencia FTP finaliza se llamará al método 
\family typewriter
on_file_sent()
\family default
 o al método 
\family typewriter
on_file_received()
\family default
 del objeto 
\family typewriter
FTPServerCallback
\family default
.
 Estos métodos reciben, como único argumento, la ruta del fichero cuya transfere
ncia acaba de finalizar.
\end_layout

\begin_layout Standard
Es importante notar que, tras finalizar una transferencia, debemos actualizar
 el estado de las imágenes de disco correspondientes en la base de datos.
 Por ello es necesario que, a partir del nombre del fichero comprimido,
 sea posible obtener el identificador de las imágenes de disco.
\end_layout

\begin_layout Standard
Así, los nombres de los ficheros comprimidos no pueden fijarse arbitrariamente,
 y deben seguir cierto convenio.
 Por simplicidad, los nombres de todos los ficheros comprimidos que se almacenan
 en el repositorio de imágenes son de la forma
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
<identificador de las imágenes>.zip
\end_layout

\begin_layout Standard
Por ejemplo, el fichero comprimido cuyas imágenes de disco tienen asociado
 el identificador 
\family typewriter
1
\family default
 se llamará 
\family typewriter
1.zip
\family default
.
\end_layout

\begin_layout Standard
Por otra parte, resulta interesante que, cuando una máquina remota se conecte
 al servidor FTP, sólo pueda leer o escribir un único fichero comprimido.
 Por ello, en el directorio raíz del repositorio de imágenes existen múltiples
 subdirectorios.
 Cada uno de ellos contiene un único fichero comprimido, y su nombre también
 se fija a partir del identificador de las imágenes de disco almacenadas
 en dicho fichero comprimido.
\end_layout

\begin_layout Standard
Por ejemplo, la ruta del fichero comprimido 
\family typewriter
1.zip
\family default
, que contiene las imágenes de disco asociadas al identificador 
\family typewriter
1
\family default
, será la siguiente:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
<directorio raíz servidor FTP>/1/1.zip
\end_layout

\begin_layout Subsubsection
Esquema de la base de datos
\end_layout

\begin_layout Standard
La base de datos del repositorio de imágenes contiene una única tabla, 
\family typewriter
Image
\family default
, cuyas columnas son las siguientes:
\end_layout

\begin_layout Itemize

\family typewriter
imageID
\family default
.
 Este valor entero es la clave primaria de la tabla, y es el identificador
 único de las imágenes de disco que hemos mencionado en múltiples ocasiones.
\end_layout

\begin_deeper
\begin_layout Standard
Las imágenes de disco de cada máquina virtual comparten el mismo identificador
 único, y están almacenadas en el mismo fichero comprimido.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
compressedFilePath
\family default
.
 Se trata de un 
\emph on
string
\emph default
 de hasta 100 caracteres de longitud, que almacena la ruta absoluta del
 fichero comprimido correspondiente en el repositorio de imágenes.
\end_layout

\begin_layout Itemize

\family typewriter
imageStatus
\family default
.
 Este valor ocupa un 
\emph on
byte
\emph default
, y codifica los tres posibles estados de las imágenes de disco, que aparecen
 en el cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Codificación-del-estado-imagen"

\end_inset

.
 
\end_layout

\begin_deeper
\begin_layout Standard
Para evitar errores, en el código fuente no hemos manipulado estos valores
 directamente, sino a través del tipo enumerado 
\family typewriter
IMAGE_STATUS_T
\family default
, definido en el paquete 
\family typewriter
imageRepository.database
\family default
.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Código
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Constante (tipo enumerado)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Descripción
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
NOT_RECEIVED
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "7cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
El identificador de las imágenes de disco está reservado, pero no tiene
 asociado ningún fichero comprimido en el repositorio de imágenes.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
READY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "7cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
El repositorio de imágenes dispone del fichero comprimido.
 Además, ninguna máquina lo ha descargado en exclusividad.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
EDITION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "7cm"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
El repositorio de imágenes dispone del fichero comprimido.
 En este caso, una máquina lo ha descargado en exclusividad.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Codificación-del-estado-imagen"

\end_inset

Codificación del estado de una imagen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
virtualMachineServer
\end_layout

\begin_layout Standard
Como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Decisiones-de-diseño"

\end_inset

, los servidores de máquinas virtuales albergan
\end_layout

\begin_layout Itemize
las máquinas virtuales que utilizan los usuarios,
\end_layout

\begin_layout Itemize
las redes virtuales a través de las cuales las máquinas virtuales se conectan
 a la red troncal de la UCM, y
\end_layout

\begin_layout Itemize
las máquinas virtuales cuya configuración está siendo editada por un profesor
 o por un administrador.
\end_layout

\begin_layout Standard
En esta sección, mostraremos en detalle su diseño.
\end_layout

\begin_layout Subsubsection
Redes virtuales
\end_layout

\begin_layout Paragraph
Creación de una red virtual en modo NAT
\end_layout

\begin_layout Standard
En todos los servidores de máquinas virtuales existe una red virtual configurada
 en modo NAT.
 A través de ella, las máquinas virtuales pueden acceder a la red troncal
 de la UCM.
\end_layout

\begin_layout Standard
Para crear las redes virtuales, ejecutamos las órdenes 
\family typewriter
virsh net-define
\family default
 y 
\family typewriter
virsh net-create
\family default
 durante el arranque del servidor de máquinas virtuales.
 
\end_layout

\begin_layout Standard
La orden 
\family typewriter
virsh net-define
\family default
 recibe como argumento la ruta de un fichero 
\family typewriter
.xml
\family default
 en el que se define la configuración de la red virtual.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Formato-de-los-ficheros-definición-red"

\end_inset

 muestra el contenido de un fichero de configuración asociado a una red
 virtual que opera en modo NAT.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "80col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
<network> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<name>default</name>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<bridge name="virbr0" /> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<forward/>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<ip address="192.168.122.1" netmask="255.255.255.0">
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<dhcp>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<range start="192.168.122.2" end="192.168.122.254" />
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</dhcp>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</ip>
\end_layout

\begin_layout Plain Layout

\family typewriter
</network>
\family default
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Formato-de-los-ficheros-definición-red"

\end_inset

Fichero de configuración de una red virtual operando en modo NAT
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar, para configurar la red virtual basta con
\end_layout

\begin_layout Itemize
indicar el nombre de la red virtual.
\end_layout

\begin_layout Itemize
indicar el nombre de la interfaz virtual asociada al encaminador predeterminado.
 En el caso de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Formato-de-los-ficheros-definición-red"

\end_inset

, esta se llamará 
\family typewriter
virbr0
\family default
.
\end_layout

\begin_layout Itemize
especificar la dirección IP y la máscara de red del encaminador predeterminado
 como atributos del elemento 
\family typewriter
ip
\family default
.
 Usando notación CIDR, en el fichero anterior se especifica que 
\family typewriter
192.168.122.1/24
\family default
 será la dirección IP del encaminador predeterminado.
\end_layout

\begin_layout Itemize
indicar el rango de direcciones que asignará el servidor DHCP.
 Para ello, se utiliza el elemento 
\family typewriter
dhcp
\family default
.
\end_layout

\begin_layout Standard
Cuando se ejecuta la orden 
\family typewriter
virsh net-create
\family default
, se configuran convenientemente las redirecciones de paquetes en el 
\emph on
kernel 
\emph default
(a través de la orden 
\family typewriter
iptables
\family default
) y se lanza el proceso servidor DHCP (
\family typewriter
dnsmasq
\family default
).
 A partir de este momento, toda máquina virtual que se conecte a la puerta
 de enlace podrá acceder a la red virtual y, por tanto, a la red troncal
 de la UCM.
\end_layout

\begin_layout Standard
Finalmente, las redes virtuales se destruyen ejecutando las órdenes 
\family typewriter
virsh net-destroy
\family default
 y 
\family typewriter
virsh net-undefine
\family default
.
 La primera elimina las redirecciones de paquetes y mata el servidor DHCP,
 y la segunda borra la configuración de la red virtual.
 
\end_layout

\begin_layout Standard
Nótese que es posible destruir una red virtual manteniendo su configuración.
 En estos casos, es posible reactivar directamente la red virtual ejecutando
 la orden 
\family typewriter
virsh net-create
\family default
.
\end_layout

\begin_layout Paragraph*
La clase 
\family typewriter
VirtualNetworkManager
\end_layout

\begin_layout Standard
La clase 
\family typewriter
VirtualNetworkManager
\family default
 define e implementa una interfaz que permite manipular redes virtuales
 a un elevado nivel de abstracción.
 El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-VirtualNetworkManager"

\end_inset

 muestra sus dependencias.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Servidor MVs/Dependencias VirtualNetworkManager.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-VirtualNetworkManager"

\end_inset

Relaciones de la clase 
\family typewriter
VirtualNetworkManager
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las clases 
\family typewriter
ElementTree
\family default
 y 
\family typewriter
SubElement
\family default
 forman parte de la librería estándar de 
\emph on
Python
\emph default
, y se utilizan para generar el fichero 
\family typewriter
.xml
\family default
 con la configuración de la red.
\end_layout

\begin_layout Standard
Por otra parte, la clase 
\family typewriter
ChildProcessManager
\family default
 dispone de métodos que permiten ejecutar comandos en 
\emph on
foreground
\emph default
 y 
\emph on
background
\emph default
.
 La clase 
\family typewriter
VirtualNetworkManager
\family default
 los utiliza para ejecutar los comandos 
\family typewriter
virsh net-define
\family default
, 
\family typewriter
virsh net-create
\family default
, 
\family typewriter
virsh net-undefine
\family default
 y 
\family typewriter
virsh net-destroy
\family default
.
\end_layout

\begin_layout Subsubsection
Interacción con 
\family typewriter
libvirt
\family default
 a bajo nivel
\end_layout

\begin_layout Standard
En esta sección, mostraremos cómo se interactúa a bajo nivel con la librería
 
\family typewriter
libvirt
\family default
 para crear y destruir máquinas virtuales.
 
\end_layout

\begin_layout Standard
Para comenzar, explicaremos qué recursos son necesarios para arrancar una
 máquina virtual.
 Posteriormente, presentaremos el formato de los ficheros de configuración
 de máquinas virtuales y, finalmente, mostraremos la forma en que se interactúa
 con 
\family typewriter
libvirt
\family default
 desde 
\emph on
Python
\emph default
.
\end_layout

\begin_layout Paragraph
Recursos asignados a una máquina virtual
\end_layout

\begin_layout Standard
Toda máquina virtual debe tener asociados, como mínimo, 
\end_layout

\begin_layout Itemize
una o más CPUs virtuales, todas pertenecientes a la misma arquitectura,
\end_layout

\begin_layout Itemize
una memoria principal, y
\end_layout

\begin_layout Itemize
dos imágenes de disco, en las que se almacenarán el 
\emph on
software
\emph default
 instalado y los datos de la máquina virtual respectivamente.
 En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-de-dos-discos-duros"

\end_inset

 justificamos por qué es necesario utilizar dos imágenes de disco en lugar
 de una sola.
\end_layout

\begin_layout Standard
Aunque estos recursos son suficientes para que la máquina virtual arranque,
 no permiten interactuar con ella.
 Para que esta interacción sea posible, también es necesario 
\end_layout

\begin_layout Itemize
utilizar un servidor VNC, que se usará para interactuar con la máquina virtual,
 o
\end_layout

\begin_layout Itemize
utilizar una conexión de red que permita interactuar con la máquina vía
 SSH (
\emph on
Secure Shell
\emph default
) o 
\family typewriter
telnet
\family default
.
\end_layout

\begin_layout Standard
Puesto que en la mayoría de casos los usuarios utilizarán interfaces gráficas
 de usuario para interactuar con la máquina virtual, el uso de un servidor
 VNC es imprescindible.
 Todo servidor VNC debe tener asignados los siguientes recursos:
\end_layout

\begin_layout Itemize
un puerto, que debe ser único dentro de cada servidor de máquinas virtuales.
 Este permitirá utilizar la máquina virtual mediante un cliente VNC convencional.
\end_layout

\begin_layout Itemize
un 
\emph on
websocket
\emph default
, que también tiene asociado un puerto único dentro de cada servidor de
 máquinas virtuales.
 Los 
\emph on
websockets
\emph default
 permiten utilizar las máquinas virtuales utilizando el cliente VNC noVNC,
 del que hablamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-del-cliente-web-noVNC"

\end_inset

.
\end_layout

\begin_layout Itemize
una dirección IP, que coincide con la dirección IP de una de las interfaces
 de red del servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
una contraseña, que impide que los usuarios ajenos a la máquina virtual
 puedan visualizar su pantalla o utilizarla.
\end_layout

\begin_layout Standard
Como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Cifrado-selectivo-del-tráfico"

\end_inset

, dado que la red troncal de la UCM es segura, por motivos de eficiencia
 el tráfico VNC no viajará cifrado.
 En caso de hacerlo, cada servidor VNC también tendría asociado un certificado
 SSL.
\end_layout

\begin_layout Standard
Además, los usuarios también necesitarán acceder a la red troncal de la
 UCM o a internet para poder introducir o extraer datos de la máquina virtual,
 por lo que es fundamental que esta esté conectada a una red virtual.
\end_layout

\begin_layout Standard
Para ello, la máquina virtual debe tener asignada una dirección MAC, que
 debe ser única dentro de la red virtual y, por ende, dentro del servidor
 de máquinas virtuales en el que reside.
\end_layout

\begin_layout Standard
Finalmente, para que 
\family typewriter
libvirt
\family default
 pueda identificar correctamente todas las máquinas virtuales, estas deben
 disponer de
\end_layout

\begin_layout Itemize
un nombre, que debe ser único dentro del servidor de máquinas virtuales
 en el que reside la máquina, y
\end_layout

\begin_layout Itemize
un UUID (
\emph on
Universally Unique Identifier
\emph default
), que debe identificar a la máquina virtual de forma única en toda la infraestr
uctura.
\end_layout

\begin_layout Paragraph
Formato de los ficheros de definición
\end_layout

\begin_layout Standard
Para crear una máquina virtual a través de 
\family typewriter
libvirt
\family default
 es necesario reservar previamente todos los recursos que tiene asignados
 e incluirlos en un fichero 
\family typewriter
.xml
\family default
, llamado fichero de definición.
 En esta sección, explicaremos en el formato de estos ficheros.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\family typewriter
<domain type='kvm'>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<name>Squeeze_AMD64</name>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<uuid>34ed2109-cd6d-6048-d47c-55bea73e39fd</uuid>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<memory>1048576</memory>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<currentMemory>1048576</currentMemory>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<vcpu>1</vcpu> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<os> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<type arch='x86_64' machine='pc-1.0'>hvm</type>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<boot dev='hd'/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</os>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<features>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<acpi/> <apic/> <pae/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</features>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<clock offset='utc'/>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<on_poweroff>destroy</on_poweroff>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<on_reboot>restart</on_reboot>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<on_crash>restart</on_crash> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<devices>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<emulator>/usr/bin/kvm</emulator> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<disk type='file' device='disk'>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<driver name='qemu' type='qcow2' cache='writeback' io='native'/>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<source file='/home/luis/SqueezeAMD64.qcow2'/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<target dev='vda' bus='virtio'/>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</disk>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<interface type='network'> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<source network='default'/> <mac address='52:54:00:8a:56:41'/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</interface> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<input type='tablet' bus='usb'/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<input type='mouse' bus='ps2'/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<graphics type='vnc' port='15010' websocket='15011' autoport='no' passwd='CCRule
s!' 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

keymap='es'>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<listen type='address' address='192.168.0.5'/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</graphics> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<video>
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

<model type='cirrus' vram='9216' heads='1'/> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</video> 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

</devices>
\end_layout

\begin_layout Plain Layout

\family typewriter
</domain> 
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fichero-de-definición-Linux"

\end_inset

Fichero de definición de una máquina 
\emph on
Linux
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fichero-de-definición-Linux"

\end_inset

 muestra el contenido de un fichero de definición utilizado para crear máquinas
 virtuales 
\emph on
Linux
\emph default
.
 Las características más relevantes de este fichero son las siguientes:
\end_layout

\begin_layout Itemize
el atributo 
\family typewriter
type
\family default
 del elemento 
\family typewriter
domain
\family default
 indica la solución de virtualización que se utilizará para gestionar la
 máquina virtual.
 En nuestro caso toma el valor 
\family typewriter
kvm
\family default
, ya que utilizamos el hipervisor KVM.
 
\end_layout

\begin_deeper
\begin_layout Standard
Es importante notar que las funciones que se pueden especificar en los ficheros
 de definición varían en función del sistema de virtualización que estemos
 usando.
\end_layout

\end_deeper
\begin_layout Itemize
los elementos 
\family typewriter
name
\family default
, 
\family typewriter
uuid
\family default
, 
\family typewriter
vcpu
\family default
 y 
\family typewriter
memory
\family default
 especifican el nombre, el UUID, el número de CPUs virtuales y el tamaño
 de la memoria de la máquina virtual.
\end_layout

\begin_layout Itemize
esencialmente, el elemento 
\family typewriter
os
\family default
 define la arquitectura del sistema operativo de la máquina virtual y la
 secuencia de arranque de la misma.
 
\end_layout

\begin_deeper
\begin_layout Standard
En el caso del fichero de definición anterior, el sistema operativo podrá
 ser cualquier sistema operativo de 32 o 64 bits soportado por la arquitectura
 
\family typewriter
x86_64
\family default
, y la máquina virtual arrancará directamente del primer disco duro.
\end_layout

\end_deeper
\begin_layout Itemize
el elemento 
\family typewriter
features
\family default
 permite activar las características ACPI (
\emph on
Advanced Configuration and Power Interface
\emph default
), APIC (
\emph on
Advance Programmable Interrupt Controller
\emph default
) y PAE (
\emph on
Physical Address Extension
\emph default
) de la máquina virtual.
 
\end_layout

\begin_deeper
\begin_layout Standard
Sin entrar demasiado en detalles, podemos decir que la práctica totalidad
 de las CPUs 
\family typewriter
x86
\family default
 con hasta diez años de antigüedad y todos los sistemas operativos existentes
 en el mercado soportan estas características, por lo que es mejor dejarlas
 activadas.
 En caso de que detecte alguna incompatibilidad, el sistema operativo de
 la máquina virtual podrá deshabilitarlas.
\end_layout

\end_deeper
\begin_layout Itemize
el elemento 
\family typewriter
clock
\family default
 permite configurar el desfase del reloj.
 Puede tomar dos valores: 
\family typewriter
localtime
\family default
 y 
\family typewriter
utc
\family default
, que difieren en la forma en que se almacena la hora en la máquina virtual.
 
\end_layout

\begin_deeper
\begin_layout Standard
Sin entrar en detalles, basta recordar que el elemento 
\family typewriter
clock
\family default
 debe tomar el valor 
\family typewriter
localtime
\family default
 en sistemas 
\emph on
Windows
\emph default
, y 
\family typewriter
utc
\family default
 en sistemas tipo UNIX.
\end_layout

\end_deeper
\begin_layout Itemize
los elementos 
\family typewriter
on_poweroff
\family default
, 
\family typewriter
on_reboot
\family default
 y 
\family typewriter
on_crash
\family default
 determinan cómo actuar cuando la máquina virtual se apaga, se reinicia
 o falla respectivamente.
 En el fichero de definición de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fichero-de-definición-Linux"

\end_inset

, la máquina virtual se destruirá al apagarse, y se reiniciará en el resto
 de casos.
\end_layout

\begin_layout Itemize
el elemento 
\family typewriter
devices
\family default
 permite definir la configuración del subsistema de entrada/salida de la
 máquina virtual.
 Sus principales elementos son los siguientes:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
emulator
\family default
, que especifica la ruta del fichero binario que emulará los dispositivos
 de entrada/salida de la máquina virtual.
 El emulador de KVM está ubicado en 
\family typewriter
/usr/bin/kvm
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
disk
\family default
, que especifica la configuración de un disco duro.
 La máquina virtual asociada al fichero de definición de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fichero-de-definición-Linux"

\end_inset

 tiene un único disco duro, cuyos datos se extraen de una imagen de disco
 
\family typewriter
qcow2
\family default
.
 
\end_layout

\begin_deeper
\begin_layout Standard
Para obtener el mejor rendimiento posible, este disco duro se conecta al
 bus VirtIO que, como sabemos, proporciona un rendimiento muy similar al
 de un disco duro real.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
network
\family default
, que especifica la configuración de una tarjeta de red.
 La máquina virtual asociada al fichero de definición de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fichero-de-definición-Linux"

\end_inset

 se conectará a la red virtual 
\family typewriter
default
\family default
, utilizando para ello la dirección MAC 
\family typewriter
52:54:00:8a:56:41
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
input
\family default
, que define un dispositivo de entrada.
 Habitualmente, los ficheros de definición especifican dos: un ratón PS/2
 y una tableta gráfica USB que permiten el correcto movimiento del cursor
 cuando se utiliza el protocolo VNC.
\end_layout

\begin_layout Itemize

\family typewriter
graphics
\family default
, que especifica la configuración del servidor VNC asociado a la máquina
 virtual.
 Entre otras cosas, es necesario especificar el puerto (
\family typewriter
port
\family default
), la contraseña (
\family typewriter
passwd
\family default
), la distribución del teclado (
\family typewriter
keymap
\family default
) y la dirección IP (atributo 
\family typewriter
address
\family default
 del elemento 
\family typewriter
listen
\family default
) en la que escuchará el servidor VNC.
\end_layout

\begin_deeper
\begin_layout Standard
Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-del-servidor-VNC-KVM"

\end_inset

, estamos utilizando el servidor VNC integrado en KVM.
 Si utilizásemos otro, el elemento 
\family typewriter
graphics
\family default
 no sería necesario, por lo que no aparecería en el fichero de definición.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
video
\family default
, que define la configuración de la tarjeta gráfica de la máquina virtual.
 En el fichero de configuración de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fichero-de-definición-Linux"

\end_inset

, se utiliza una tarjeta gráfica 
\family typewriter
CLGD 5446
\family default
 fabricada por 
\emph on
Cirrus Logic Inc.
\emph default
, con 9 MB de memoria de vídeo y un único monitor conectado.
\end_layout

\end_deeper
\begin_layout Standard
Finalmente, los ficheros de definición de máquinas virtuales 
\emph on
Windows
\emph default
 son muy similares.
 Tan sólo es necesario dar el valor 
\family typewriter
localtime
\family default
 al elemento 
\family typewriter
clock
\family default
: el resto de elementos se configuran como ya hemos visto.
\end_layout

\begin_layout Paragraph
La clase 
\family typewriter
LibvirtConnector
\end_layout

\begin_layout Standard
Para interactuar con 
\family typewriter
libvirt
\family default
 desde 
\emph on
Python
\emph default
, se utilizan dos tipos de llamadas a métodos:
\end_layout

\begin_layout Itemize

\series bold
llamadas síncronas
\series default
.
 En general, estas llamadas se utilizan para realizar consultas relacionadas
 con las máquinas virtuales activas (como, por ejemplo, para obtener los
 recursos asociados a cada una de ellas) y para enviar consultas al hipervisor
 (como, por ejemplo, las que leen el tiempo que cada máquina virtual ha
 usado la CPU).
\end_layout

\begin_layout Itemize

\series bold
llamadas asíncronas
\series default
.
 Sus resultados no están disponibles al finalizar la llamada, y se obtienen
 procesando los eventos asociados.
 Las llamadas síncronas se utilizan para realizar operaciones con una gran
 latencia, tales como el arranque y la destrucción de una máquina virtual.
\end_layout

\begin_layout Standard
Para paralelizar la implementación del servidor de máquinas virtuales es
 necesario definir una interfaz que permita interactuar con 
\family typewriter
libvirt
\family default
 a un elevado nivel de abstracción.
 La clase 
\family typewriter
LibvirtConnector
\family default
 define e implementa dicha interfaz.
 El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Dependencias-libvirtconnector"

\end_inset

 muestra sus relaciones.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Servidor MVs/Dependencias libvirtconnector.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Dependencias-libvirtconnector"

\end_inset

Relaciones de la clase 
\family typewriter
LibvirtConnector
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La clase 
\family typewriter
VirConnection
\family default
 forma parte de los 
\emph on
bindings 
\emph default
de 
\family typewriter
libvirt
\family default
 escritos en 
\emph on
Python
\emph default
, y permite establecer la conexión e interactuar con el hipervisor.
 La conexión al hipervisor se hace con una URI, que en el caso de KVM es
 
\family typewriter
qemu:///system
\family default
.
 
\end_layout

\begin_layout Standard
Por otra parte, toda conexión a 
\family typewriter
libvirt
\family default
 tiene asociado un hilo, que muestreará periódicamente el estado del hipervisor
 para generar los eventos de arranque, apagado, reinicio,\SpecialChar \ldots{}
 de las máquinas
 virtuales.
 Estos hilos pertenecen a una clase de hilo anónima que, como todas las
 clases de hilo de 
\emph on
Python
\emph default
, hereda de 
\family typewriter
Thread
\family default
.
\end_layout

\begin_layout Standard
Finalmente, las clases abstractas 
\family typewriter
DomainStartCallback
\family default
 y 
\family typewriter
DomainStopCallback
\family default
 definen la interfaz que se usará para procesar los eventos de arranque
 y apagado de una máquina virtual.
 El resto de eventos generados por 
\family typewriter
libvirt
\family default
 se ignorarán.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
DomainHandler
\end_layout

\begin_layout Standard
Como ya hemos visto, para crear una máquina virtual es necesario
\end_layout

\begin_layout Itemize
reservar todos los recursos que tiene asignados,
\end_layout

\begin_layout Itemize
crear un fichero de definición en el que se aparezcan todos estos recursos,
 y
\end_layout

\begin_layout Itemize
crear la máquina virtual utilizando una llamada a 
\family typewriter
libvirt
\family default
.
\end_layout

\begin_layout Standard
Por otra parte, también es necesario procesar los eventos generados por
 
\family typewriter
libvirt
\family default
.
 Como dijimos en la sección anterior, en el servidor de máquinas virtuales
 sólo se procesan dos tipos de evento:
\end_layout

\begin_layout Itemize
los eventos de arranque de una máquina virtual.
 Cuando se generan, la máquina virtual acaba de arrancar.
 Para procesarlos, se envían al propietario de la máquina virtual los datos
 de conexión al servidor VNC asociado a dicha máquina.
\end_layout

\begin_layout Itemize
los eventos de apagado de una máquina virtual.
 Cuando se generan, la máquina virtual acaba de apagarse.
 Para procesarlos, es necesario liberar los recursos asociados a la máquina
 virtual y, adelantando algo de lo que veremos más adelante, transferir
 las imágenes de disco al repositorio de imágenes en algunos casos.
\end_layout

\begin_layout Standard
Para acotar el nivel de complejidad de las clases del subsistema servidor
 de máquinas virtuales, lo más conveniente es ocultar al exterior 
\end_layout

\begin_layout Itemize
los procesos configuración, creación y destrucción de las redes virtuales,
\end_layout

\begin_layout Itemize
los procesos de reserva y liberación de recursos, 
\end_layout

\begin_layout Itemize
las interacciones con 
\family typewriter
libvirt
\family default
, y 
\end_layout

\begin_layout Itemize
el procesamiento de los eventos generados por 
\family typewriter
libvirt
\family default
.
 
\end_layout

\begin_layout Standard
Para ello, utilizamos la clase 
\family typewriter
DomainHandler
\family default
.
 Sus relaciones aparecen en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-DomainHandler"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Servidor MVs/Relaciones DomainHandler.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-DomainHandler"

\end_inset

Relaciones de la clase 
\family typewriter
DomainHandler
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
En primer lugar, la clase 
\family typewriter
DomainHandler
\family default
 hereda de las clases 
\family typewriter
DomainStartCallback
\family default
 y 
\family typewriter
DomainStopCallback
\family default
, por lo que podrá procesar los eventos de arranque y apagado de una máquina
 virtual.
 Asimismo, la clase 
\family typewriter
DomainHandler
\family default
 utiliza un objeto 
\family typewriter
LibvirtConnector
\family default
 para realizar las llamadas a 
\family typewriter
libvirt
\family default
.
\end_layout

\begin_layout Standard
Es importante notar que, en 
\emph on
Python
\emph default
, no existen interfaces, por lo que estas deben definirse como clases abstractas.
 Por tanto, para implementar varias interfaces es necesario heredar de varias
 clases.
 Así, las dos relaciones de herencia del diagrama deben interpretarse como
 dos relaciones de realización de interfaz.
\end_layout

\begin_layout Standard
Además, como vimos en las secciones 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-de-imágenes-cow"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-del-formato-qcow2"

\end_inset

, cada máquina virtual tiene asociadas dos imágenes 
\family typewriter
qcow2
\family default
, y una de ellas es del tipo 
\emph on
copy-on-write
\emph default
.
 Durante el proceso de arranque de una máquina virtual, es necesario crear
 la imagen 
\emph on
copy-on-write
\emph default
 y crear una copia de la imagen restante.
 Para ello, los objetos 
\family typewriter
DomainHandler
\family default
 ejecutan los comandos correspondientes utilizando los métodos de la clase
 
\family typewriter
ChildProcessManager
\family default
.
\end_layout

\begin_layout Standard
Por otra parte, los métodos de la clase 
\family typewriter
DefinitionFileEditor
\family default
 permiten generar los ficheros de definición de las máquinas virtuales a
 partir de otros que sirven como plantilla.
 Esto simplifica su implementación.
\end_layout

\begin_layout Standard
La clase 
\family typewriter
VMServerPacketHandler
\family default
 dispone de métodos para leer y crear los diversos tipos de paquete del
 servidor de máquinas virtuales.
 Los objetos 
\family typewriter
DomainHandler
\family default
 los utilizan para generar los paquetes con los datos de conexión a los
 servidores VNC de las máquinas virtuales, que enviará a los propietarios
 de las máquinas virtuales mediante un objeto 
\family typewriter
NetworkManager
\family default
.
\end_layout

\begin_layout Standard
Finalmente, los métodos de la clase 
\family typewriter
VMServerDBConnector
\family default
 manipulan la base de datos del servidor de máquinas virtuales.
 Los objetos 
\family typewriter
DomainHandler
\family default
 los utilizan para registrar y liberar los recursos asignados a las distintas
 máquinas virtuales.
\end_layout

\begin_layout Subsubsection
Creación y edición de imágenes de disco
\end_layout

\begin_layout Standard
Para crear y editar imágenes de disco, el servidor de máquinas virtuales
 debe comunicarse con el repositorio de imágenes.
 Como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Almacenamiento-imágenes-zip"

\end_inset

, para ahorrar ancho de banda el servidor de máquinas virtuales y el repositorio
 de imágenes no intercambian directamente imágenes de disco, sino ficheros
 
\family typewriter
.zip
\family default
 que contienen imágenes de disco.
 
\end_layout

\begin_layout Standard
Asimismo, tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-del-protocolo-FTP"

\end_inset

, los servidores de máquinas virtuales y el repositorio de imágenes utilizarán
 el protocolo FTP para intercambiar ficheros comprimidos.
\end_layout

\begin_layout Standard
Así pues, para que el servidor de máquinas virtuales pueda comunicarse con
 el repositorio de imágenes, es necesario que
\end_layout

\begin_layout Itemize
pueda generar y descomprimir ficheros .zip,
\end_layout

\begin_layout Itemize
pueda transferir, mediante el protocolo FTP, un fichero comprimido al repositori
o de imágenes, y
\end_layout

\begin_layout Itemize
pueda recibir, mediante el protocolo FTP, un fichero comprimido desde el
 repositorio de imágenes.
\end_layout

\begin_layout Standard
En esta sección presentaremos las clases que intervienen en estos procesos.
\end_layout

\begin_layout Paragraph
Colas de transferencias y de compresión
\end_layout

\begin_layout Standard
En todas las comunicaciones con el repositorio de imágenes, podemos distinguir
 dos fases:
\end_layout

\begin_layout Itemize
el intercambio, a través del protocolo FTP, de un fichero comprimido con
 imágenes de disco, y
\end_layout

\begin_layout Itemize
la descompresión o la creación de un fichero comprimido con imágenes de
 disco
\end_layout

\begin_layout Standard
Para reducir el tiempo que tardan en realizarse estas transferencias, es
 posible realizar estas fases en paralelo.
 Por ello, los servidores de máquinas virtuales utilizan una cola para cada
 una de estas fases, es decir, una cola de transferencias y una cola de
 compresión.
\end_layout

\begin_layout Standard
Así, la cola de transferencias incluye todas las peticiones de intercambio
 de ficheros comprimidos con el repositorio de imágenes, y en la cola de
 compresión se encuentran todas las peticiones de compresión y descompresión
 de ficheros 
\family typewriter
.zip
\family default
.
\end_layout

\begin_layout Standard
Por otra parte, no debemos olvidar que los usuarios pueden dedicar mucho
 tiempo y esfuerzo a los procesos de creación y edición de imágenes de disco.
 Por ello, es necesario dotar de una gran robustez a esta parte de los servidore
s de máquinas virtuales, de modo que sólo se pierdan datos de los usuarios
 en los casos más extremos.
\end_layout

\begin_layout Standard
Para ello, la cola de transferencias y la cola de compresión tienen persistencia
 en disco, y su contenido se almacena en dos tablas de la base de datos.
 De esta manera, aunque se produzcan caídas del servidor de máquinas virtuales,
 las imágenes de disco de los usuarios acabarán transfiriéndose normalmente
 al repositorio de imágenes.
\end_layout

\begin_layout Paragraph
La clase 
\family typewriter
FileTransferThread
\end_layout

\begin_layout Standard
La clase 
\family typewriter
FileTransferThread
\family default
 se corresponde con el hilo asociado a la cola de transferencias.
 Este hilo intercambia paquetes con el repositorio de imágenes y realiza
 las correspondientes transferencias FTP cuando el repositorio de imágenes
 se lo indica.
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-FileTransferThread"

\end_inset

 muestra las principales relaciones de la clase 
\family typewriter
FileTransferThread
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Servidor MVs/Relaciones FileTransferThread.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-FileTransferThread"

\end_inset

Principales relaciones de la clase 
\family typewriter
FileTransferThread
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para borrar los ficheros 
\family typewriter
.zip
\family default
 transferidos, la clase 
\family typewriter
FileTransferThread
\family default
 utiliza los métodos de la clase 
\family typewriter
ChildProcessManager
\family default
.
 Asimismo, la clase FileTransferThread utiliza los servicios de las clases
 
\family typewriter
VMServerPacketHandler
\family default
 y 
\family typewriter
NetworkManager
\family default
 para informar de los errores de conexión al repositorio de imágenes.
\end_layout

\begin_layout Standard
Por otra parte, los objetos 
\family typewriter
FileTransferThread
\family default
 interactúan con el repositorio de imágenes a través de un objeto 
\family typewriter
FileTransferCallback
\family default
.
 Estos objetos intercambian paquetes con el repositorio de imágenes y realizan
 las transferencias FTP correspondientes.
 Para ello, utilizan los servicios de tres objetos: un objeto 
\family typewriter
FTPClient
\family default
, un objeto 
\family typewriter
ImageRepositoryPacketHandler
\family default
 y un objeto 
\family typewriter
NetworkManager
\family default
.
\end_layout

\begin_layout Standard
Debemos recordar que, como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:El-cliente-FTP-cc"

\end_inset

, que la clase 
\family typewriter
FTPClient
\family default
 ofrece una interfaz para manipular a un alto nivel de abstracción el cliente
 FTP incluido en la librería estándar de 
\emph on
Python
\emph default
.
 
\end_layout

\begin_layout Standard
Además, la clase 
\family typewriter
FileTransferThread
\family default
 hereda de 
\family typewriter
NetworkCallback
\family default
, ya que procesará los paquetes recibidos a través de la conexión de red
 con el repositorio de imágenes.
 
\end_layout

\begin_layout Standard
Finalmente, los elementos de la cola de transferencias se almacenan en una
 tabla de la base de datos del servidor de máquinas virtuales.
 Para desencolarlos, los objetos 
\family typewriter
FileTransferThread
\family default
 utilizan un objeto 
\family typewriter
VMServerDBConnector
\family default
.
\end_layout

\begin_layout Paragraph
La clase 
\family typewriter
CompressionThread
\end_layout

\begin_layout Standard
La clase 
\family typewriter
CompressionThread
\family default
 está asociada al hilo que procesa los elementos de la cola de compresión.
 Para realizar este procesamiento, se distinguen dos casos:
\end_layout

\begin_layout Itemize
cuando se descomprime un fichero 
\family typewriter
.zip
\family default
, las imágenes de disco que contiene se registran en la base de datos y
 se copian al directorio correspondiente del servidor de máquinas virtuales.
\end_layout

\begin_deeper
\begin_layout Standard
Además, cuando las imágenes se han descargado del repositorio de imágenes
 para crear o editar una imagen, también se ordena el arranque de una máquina
 virtual, que las usará como discos duros.
\end_layout

\end_deeper
\begin_layout Itemize
cuando se genera un fichero 
\family typewriter
.zip
\family default
, es necesario registrar la petición correspondiente en la cola de transferencia
s.
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-CompressionThread"

\end_inset

 muestra las principales relaciones de la clase 
\family typewriter
CompressionThread
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Servidor MVs/Relaciones CompressionThread.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-CompressionThread"

\end_inset

Principales relaciones de la clase 
\family typewriter
CompressionThread
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para crear y descomprimir ficheros .zip, la clase 
\family typewriter
CompressionThread
\family default
 utiliza los servicios de la clase 
\family typewriter
ZipBasedCompressor
\family default
.
 Esta ejecutará los comandos 
\family typewriter
zip
\family default
 y 
\family typewriter
unzip
\family default
 utilizando los métodos de la clase 
\family typewriter
ChildProcessManager
\family default
.
\end_layout

\begin_layout Standard
En la librería estándar de 
\emph on
Python
\emph default
 existen clases que permiten crear y descomprimir ficheros 
\family typewriter
.zip
\family default
, pero existe un 
\emph on
bug
\emph default
 en las mismas que impide crear archivos 
\family typewriter
.zip
\family default
 mayores de 4 GB.
 Es importante notar que, cuando se comprimen imágenes de disco, frecuentemente
 se obtienen ficheros 
\family typewriter
.zip
\family default
 de más de 4 GB.
\end_layout

\begin_layout Standard
Aunque este error ha sido subsanado en las nuevas versiones de las ramas
 2.x y 3.x de 
\emph on
Python
\emph default
, en muchas distribuciones 
\emph on
Linux
\emph default
 actuales se sigue utilizando la versión antigua.
 Por ello, de cara a facilitar la instalación de 
\emph on
CygnusCloud
\emph default
, hemos decidido no utilizar estas clases e invocar directamente a los comandos
 
\family typewriter
zip
\family default
 y 
\family typewriter
unzip
\family default
.
\end_layout

\begin_layout Standard
Por otra parte, la clase 
\family typewriter
CompressionThread
\family default
 utiliza los servicios de las clases 
\family typewriter
NetworkManager
\family default
 y 
\family typewriter
VMServerPacketHandler
\family default
 para enviar los paquetes de error.
 Estos se generarán si, por ejemplo, el fichero 
\family typewriter
.zip
\family default
 descargado del repositorio de imágenes está corrupto.
\end_layout

\begin_layout Standard
Como ya hemos dicho, cuando en algunos casos se descomprimen imágenes de
 disco es necesario arrancar una máquina virtual.
 Para ello, la clase CompressionThread utilizará los servicios de la clase
 
\family typewriter
DomainHandler
\family default
.
\end_layout

\begin_layout Standard
Finalmente, los objetos 
\family typewriter
CompressionThread
\family default
 utilizarán un objeto 
\family typewriter
VMServerDBConnector
\family default
 para extraer las peticiones de compresión y descompresión de la cola de
 compresión (que, al igual que en el caso de la cola de transferencias,
 se almacenan en una tabla de la base de datos), y también para registrar
 y borrar las imágenes de disco en la base de datos.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
VMServerReactor
\end_layout

\begin_layout Standard
La clase 
\family typewriter
VMServerReactor
\family default
 es la clase principal del subsistema servidor de máquinas virtuales.
 Estos objetos se ocupan de realizar el proceso de inicialización, y también
 de procesar los paquetes que envía el servidor de 
\emph on
cluster
\emph default
 al servidor de máquinas virtuales a través de la conexión de control.
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-VMServerReactor"

\end_inset

 muestra las principales relaciones de la clase 
\family typewriter
VMServerReactor
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de clase/Servidor MVs/Relaciones VMServerReactor.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-VMServerReactor"

\end_inset

Principales relaciones de la clase 
\family typewriter
VMServerReactor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
En primer lugar, la clase 
\family typewriter
VMServerReactor
\family default
 utiliza los servicios de la clase 
\family typewriter
VMServerConfigurationFileParser
\family default
 para procesar el contenido del fichero de configuración.
 Como viene siendo habitual, el 
\emph on
parser 
\emph default
del fichero de configuración del servidor de máquinas virtuales, 
\family typewriter
VMServerConfigurationFileParser
\family default
, hereda de la clase abstracta 
\family typewriter
ConfigurationFileParser
\family default
, el ancestro común de todos los 
\emph on
parsers 
\emph default
de ficheros de configuración.
 Como ya hemos visto, esta clase está definida en el paquete 
\family typewriter
ccutils
\family default
.
\end_layout

\begin_layout Standard
Por otra parte, al igual que sucede en el caso del repositorio de imágenes,
 para interactuar desde el exterior con un servidor de máquinas virtuales
 es necesario enviarle paquetes a través de una conexión de control.
 A diferencia de lo que ocurría en el repositorio de imágenes, sólo el servidor
 de 
\emph on
cluster 
\emph default
se comunicará con el servidor de máquinas virtuales.
\end_layout

\begin_layout Standard
Como la clase 
\family typewriter
VMServerReactor
\family default
 hereda de 
\family typewriter
NetworkCallback
\family default
, en el servidor de máquinas virtuales se utilizará un objeto 
\family typewriter
VMServerReactor
\family default
 para procesar los paquetes recibidos desde el servidor de 
\emph on
cluster
\emph default
.
 
\end_layout

\begin_layout Standard
Para realizar dicho procesamiento, es necesario enviar respuestas al servidor
 de 
\emph on
cluster
\emph default
, iniciar transferencias con el repositorio de imágenes y crear o destruir
 máquinas virtuales.
 Por ello, la clase 
\family typewriter
VMServerReactor
\family default
 utiliza los servicios de las clases 
\family typewriter
NetworkManager
\family default
, 
\family typewriter
VMServerPacketHandler
\family default
, 
\family typewriter
DomainHandler
\family default
 y 
\family typewriter
VMServerDBConnector
\family default
.
\end_layout

\begin_layout Standard
Finalmente, es importante notar que la clase 
\family typewriter
VMServerReactor
\family default
 no iniciará directamente las transferencias con el repositorio de imágenes.
 Al recibir el paquete correspondiente, encolará una petición en la cola
 de transferencias.
 Para procesar dicha petición, intervendrán los objetos 
\family typewriter
FileTransferThread
\family default
 y 
\family typewriter
CompressionThread
\family default
.
\end_layout

\begin_layout Subsubsection
Arranque del servidor de máquinas virtuales
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Arranque.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-servidor-mvs"

\end_inset

Arranque del servidor de máquinas virtuales
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En esta sección mostraremos el proceso de arranque del servidor de máquinas
 virtuales.
 Para ello, haremos uso del diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-servidor-mvs"

\end_inset

.
 Como podemos observar en dicho diagrama, se siguen los siguientes pasos:
\end_layout

\begin_layout Enumerate
se realiza la configuración inicial de la base de datos del servidor de
 máquinas virtuales si es necesario.
 Para ello, se crea el esquema de la base de datos y el usuario a utilizar
 a través de un objeto 
\family typewriter
DBConfigurator
\family default
.
 Como ya hemos dicho, la clase 
\family typewriter
DBConfigurator
\family default
 se define en el paquete 
\family typewriter
ccutils
\family default
.
\end_layout

\begin_layout Enumerate
se parsea el fichero de configuración.
 Para ello, se utiliza un objeto 
\family typewriter
VMServerConfigurationFileParser
\family default
.
 Por limitaciones de espacio, no hemos incluido su línea de vida en el diagrama
 de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-servidor-mvs"

\end_inset

.
\end_layout

\begin_layout Enumerate
se crean, si es necesario, los distintos directorios utilizados por el servidor
 de máquinas virtuales.
\end_layout

\begin_layout Enumerate
se crea un objeto 
\family typewriter
VMServerReactor
\family default
 y se inicializa su estado.
 Como hemos dicho, estos objetos procesarán los paquetes enviados desde
 el servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Enumerate
se establece la conexión con la base de datos del servidor de máquinas virtuales.
\end_layout

\begin_layout Enumerate
se crean las direcciones MAC y los UUIDs que usarán las máquinas virtuales
 activas.
 Todas las direcciones MAC creadas son de la forma
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center

\family typewriter
2C:00:00:00:00:M
\end_layout

\begin_layout Standard
siendo 
\family typewriter
M
\family default
 un número entero entre 0 y 255 codificado en hexadecimal.
 
\end_layout

\begin_layout Standard
Por tanto, todas las direcciones MAC son 
\emph on
unicast
\emph default
 y de uso local, y el servidor de máquinas virtuales podrá albergar un máximo
 de 256 máquinas virtuales.
 
\end_layout

\begin_layout Standard
Teniendo en cuenta los recursos que, como mínimo, hay que asociar a un sistema
 operativo con interfaz gráfica de usuario, resulta difícil alcanzar este
 límite con el 
\emph on
hardware
\emph default
 actual.
\end_layout

\end_deeper
\begin_layout Enumerate
se reservan 512 puertos, que utilizarán los servidores VNC de las máquinas
 virtuales y los 
\emph on
websockets
\emph default
 que estos tienen asociados.
\end_layout

\begin_layout Enumerate
se inicializa el objeto 
\family typewriter
NetworkManager
\family default
, que permitirá crear y enviar información a través de la conexión con el
 servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Enumerate
se inicializa el objeto 
\family typewriter
VMServerPacketHandler
\family default
, que se utilizará para crear y leer los diversos tipos de paquete que utiliza
 el servidor de 
\emph on
cluster
\emph default
 para comunicarse con el servidor de máuquinas virtuales.
\end_layout

\begin_layout Enumerate
se instancia un objeto 
\family typewriter
DomainHandler
\family default
.
 Como sabemos, se utilizará para crear y destruir máquinas virtuales.
\end_layout

\begin_layout Enumerate
se comprueba qué máquinas virtuales activas están registradas en la base
 de datos, reasignando o liberando recursos como corresponda.
 Para ello, se invoca al método 
\family typewriter
doInitialCleanup()
\family default
 de la clase 
\family typewriter
DomainHandler
\family default
.
 Esto permite que, si el demonio del servidor de máquinas virtuales termina
 de forma abrupta,
\end_layout

\begin_deeper
\begin_layout Itemize
las máquinas virtuales activas vuelvan a reasociarse al servidor de máquinas
 virtuales, y que
\end_layout

\begin_layout Itemize
los recursos asociados a las máquinas virtuales apagadas se liberen.
\end_layout

\end_deeper
\begin_layout Enumerate
se liberan los ficheros 
\family typewriter
.zip
\family default
 temporales.
 Esto hace posible que, si falla el demonio del servidor de máquinas virtuales,
 se libere el espacio en disco asociado a los ficheros 
\family typewriter
.zip
\family default
 parcialmente generados.
\end_layout

\begin_deeper
\begin_layout Standard
Adelantando algo de lo que veremos más adelante, estos ficheros volverán
 a generarse cuando se reanude el procesamiento de los elementos de la cola
 de compresión.
\end_layout

\end_deeper
\begin_layout Enumerate
se inicializan los hilos de procesamiento asociados a la cola de transferencias
 y a la cola de compresión.
\end_layout

\begin_layout Enumerate
se crea la conexión de control.
 A partir de este momento, el servidor de máquinas virtuales estará preparado
 para atender las peticiones del servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Subsubsection
Interacciones básicas con el servidor de 
\emph on
cluster
\end_layout

\begin_layout Standard
En esta sección, mostraremos todas las interacciones básicas que pueden
 tener lugar entre un servidor de máquinas virtuales y el servidor de 
\emph on
cluster
\emph default
.
 
\end_layout

\begin_layout Standard
Por claridad, en todos los casos comenzaremos mostrando el flujo básico,
 para posteriormente mostrar los flujos alternativos, que se corresponden
 con el tratamiento de diversos errores.
 
\end_layout

\begin_layout Standard
Asimismo, en esta sección omitiremos las interacciones que despliegan, crean,
 editan o borran imágenes de disco: consideramos que tienen entidad suficiente
 como para tratarlas en una sección separada.
\end_layout

\begin_layout Paragraph
Solicitud de estado
\end_layout

\begin_layout Standard
Para poder realizar correctamente el balanceado de carga entre los diversos
 servidores de máquinas virtuales, los servidores de 
\emph on
cluster
\emph default
 deben conocer, en tiempo real, el estado de cada servidor de máquinas virtuales.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Actualización estado.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Solicitud-estado-servidor-MVs"

\end_inset

Solicitud del estado del servidor de máquinas virtuales
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para ello, hacen uso de los paquetes del tipo 
\family sans
Solicitud de Estado
\family default
, que se procesan en el servidor de máquinas virtuales tal y como se indica
 en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Solicitud-estado-servidor-MVs"

\end_inset

.
 Como puede observarse en dicho diagrama, se siguen los siguientes pasos:
\end_layout

\begin_layout Enumerate
el servidor de 
\emph on
cluster
\emph default
 envía un paquete del tipo 
\family sans
Solicitud de Estado
\family default
 al servidor de máquinas virtuales.
 Este no contiene ningún tipo de información adicional.
\end_layout

\begin_layout Enumerate
el objeto 
\family typewriter
NetworkManager
\family default
 invoca al método de procesamiento de paquetes del objeto 
\family typewriter
VMServerReactor
\family default
.
\end_layout

\begin_layout Enumerate
para procesar el paquete, el objeto 
\family typewriter
VMServerReactor
\end_layout

\begin_deeper
\begin_layout Enumerate
\noindent
invoca al método 
\family typewriter
readPacket()
\family default
 del objeto 
\family typewriter
VMServerPacketHandler
\family default
.
 Este método lee el contenido del paquete.
 Como los paquetes del tipo 
\family sans
Solicitud de Estado
\family default
 no transportan información adicional, en este caso no se lee nada.
\end_layout

\begin_layout Enumerate
averigua las cantidades de memoria RAM en uso y disponible.
 Para ello, ejecuta el comando 
\family typewriter
free
\family default
, haciendo uso de los servicios de la clase 
\family typewriter
ChildProcessManager
\family default
.
\end_layout

\begin_layout Enumerate
averigua el número de CPUs virtuales en uso consultando los recursos asignados
 a las máquinas virtuales activas.
\end_layout

\begin_layout Enumerate
utiliza la utilidad 
\family typewriter
qemu-img info
\family default
 para averiguar el espacio en disco requerido por todas las máquinas virtuales
 activas.
 Para ello, vuelve a utilizar los servicios de la clase 
\family typewriter
ChildProcessManager
\family default
.
\end_layout

\end_deeper
\begin_layout Enumerate
el objeto 
\family typewriter
VMServerReactor
\family default
 construye un paquete con toda la información recopilada, utilizando para
 ello un objeto 
\family typewriter
VMServerPacketHandler
\family default
.
 Posteriormente lo envía al servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Standard
De ahora en adelante, omitiremos las llamadas a los métodos 
\family typewriter
readPacket()
\family default
 y 
\family typewriter
buildPacket()
\family default
 del objeto 
\family typewriter
VMServerPacketHandler
\family default
 en todos los diagramas de secuencia del servidor de máquinas virtuales.
 Estas siempre se realizarán para leer y construir un paquete respectivamente.
\end_layout

\begin_layout Paragraph
Creación de una máquina virtual: secuencia básica
\end_layout

\begin_layout Standard
Los servidores de máquinas virtuales sólo crean una máquina virtual bajo
 petición expresa del servidor de 
\emph on
cluster
\emph default
.
 Para ello, este utiliza un paquete del tipo 
\family sans
Creación de máquina virtual
\family default
, que se procesa de acuerdo al diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Creación-MV"

\end_inset

.
 Por claridad, en dicho diagrama sólo hemos recogido la secuencia básica,
 en la que no aparecen errores.
 
\end_layout

\begin_layout Standard
Asimismo, por limitaciones de espacio, hemos eliminado las líneas de vida
 de las clase 
\family typewriter
ChildProcessManager
\family default
 y 
\family typewriter
VMServerPacketHandler
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Arranque MV sin errores.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Creación-MV"

\end_inset

Creación de una máquina virtual: secuencia básica
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar en el diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Creación-MV"

\end_inset

, en el arranque de una máquina virtual se siguen estos pasos:
\end_layout

\begin_layout Enumerate
se invoca al método de procesamiento de paquetes del objeto 
\family typewriter
VMServerReactor
\family default
.
 Para crear la máquina virtual, este delega en un objeto DomainHandler.
\end_layout

\begin_layout Enumerate
el método 
\family typewriter
createDomain()
\family default
 de la clase 
\family typewriter
DomainHandler
\family default
,
\end_layout

\begin_deeper
\begin_layout Enumerate
lee el contenido del paquete 
\family sans
Creación de máquina virtual
\family default
 utilizando un objeto 
\family typewriter
VMServerPacketHandler
\family default
.
 En él se incluye el identificador de la máquina virtual, el identificador
 único de la petición y el identificador del usuario que ha enviado la petición.
\end_layout

\begin_layout Enumerate
reserva una dirección MAC y un UUID para la máquina virtual.
\end_layout

\begin_layout Enumerate
reserva dos puertos para la máquina virtual.
 Uno de ellos se corresponderá con el servidor VNC de la máquina virtual,
 y el otro con el 
\emph on
websocket 
\emph default
asociado.
\end_layout

\begin_layout Enumerate
genera aleatoriamente una contraseña para el servidor VNC.
 Para ello, invoca al comando 
\family typewriter
openssl
\family default
 a través de los servicios de la clase 
\family typewriter
ChildProcessManager
\family default
.
 La longitud de la contraseña generada es configurable.
\end_layout

\begin_layout Enumerate
genera las rutas donde colocar las imágenes de disco de la máquina virtual.
\end_layout

\begin_layout Enumerate
crea dichas imágenes, ejecutando los comandos 
\family typewriter
qemu-img create
\family default
 y 
\family typewriter
cp
\family default
.
 Para ello, utiliza los servicios de la clase 
\family typewriter
ChildProcessManager
\family default
.
\end_layout

\begin_layout Enumerate
genera el fichero de definición de la máquina virtual.
 Por motivos de eficiencia, su contenido no se escribe a disco, sino que
 se genera un 
\emph on
string
\emph default
 con el contenido de dicho fichero.
\end_layout

\begin_layout Enumerate
si el servidor de máquinas virtuales está configurado para no utilizar los
 
\emph on
websockets
\emph default
 nativos de QEMU, se arranca el proceso 
\family typewriter
websockify
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
A diferencia de lo que suele ocurrir habitualmente, en este caso el proceso
 
\family typewriter
websockify
\family default
 se ejecutará en 
\emph on
background
\emph default
.
 Para ello, los objetos 
\family typewriter
ChildProcessManager
\family default
 también son capaces de iniciar y recoger los valores devueltos por los
 procesos que se ejecutan en 
\emph on
background
\emph default
.
\end_layout

\end_deeper
\begin_layout Enumerate
invoca al método de creación de un dominio de la clase 
\family typewriter
LibvirtConnector
\family default
.
 Durante este proceso, se iniciará el servidor VNC asociado a la máquina
 virtual.
\end_layout

\begin_layout Enumerate
registra en la base de datos del servidor de máquinas virtuales los recursos
 asignados a la máquina virtual.
\end_layout

\end_deeper
\begin_layout Enumerate
cuando 
\family typewriter
libvirt
\family default
 genera el evento de arranque de máquina virtual, el objeto 
\family typewriter
LibvirtConnector
\family default
 invocará al método 
\family typewriter
onDomainStart()
\family default
 del objeto 
\family typewriter
DomainHandler
\family default
.
 En él,
\end_layout

\begin_deeper
\begin_layout Enumerate
se obtienen el puerto del 
\emph on
websocket
\emph default
, la contraseña del servidor VNC, el identificador único de la petición
 y el identificador del usuario que ha enviado la petición de arranque de
 la máquina virtual.
\end_layout

\begin_layout Enumerate
se construye un paquete del tipo 
\family sans
Datos de conexión de máquina virtual
\family default
, utilizando para ello un objeto 
\family typewriter
VMServerPacketHandler
\family default
.
 Este contiene la información que se ha extraído de la base de datos del
 servidor de máquinas virtuales.
\end_layout

\begin_layout Enumerate
se envía dicho paquete al servidor de 
\emph on
cluster
\emph default
.
\end_layout

\end_deeper
\begin_layout Standard
El hecho de que las direcciones MAC libres se extraigan de la base de datos
 no es casual.
 
\end_layout

\begin_layout Standard
Siempre que el servidor DHCP concede una dirección IP a una máquina virtual
 lo hace durante un tiempo prefijado.
 
\end_layout

\begin_layout Standard
Cuando se arranca y detiene un gran número de máquinas virtuales en un corto
 periodo de tiempo, los tiempos de concesión de las direcciones IP no habrán
 expirado, por lo que corremos el riesgo de el servidor DHCP se quede sin
 direcciones IP.
 
\end_layout

\begin_layout Standard
No obstante, como las direcciones IP se asignan a direcciones MAC y estas
 siempre se extraen de la base de datos, las nuevas máquinas virtuales podrán
 
\begin_inset Quotes eld
\end_inset

reciclar
\begin_inset Quotes erd
\end_inset

 las direcciones IP de las máquinas antiguas, lo que impide que nos quedemos
 sin direcciones IP.
\end_layout

\begin_layout Standard
Finalmente, es importante notar que, cuando se reciben las peticiones de
 arranque de máquinas virtuales, la propia cola de paquetes recibidos y
 aún no procesados actúa como cola de peticiones de arranque de máquinas
 virtuales.
\end_layout

\begin_layout Paragraph
Creación de una máquina virtual: tratamiento de errores
\end_layout

\begin_layout Standard
En el proceso de creación de una máquina virtual, pueden producirse múltiples
 errores: las conexiones con la base de datos o con 
\family typewriter
libvirt
\family default
 pueden fallar, y también pueden recibirse peticiones incorrectas.
 Una petición de arranque de máquina virtual será incorrecta cuando
\end_layout

\begin_layout Itemize
el servidor de máquinas virtuales no dispone de las imágenes de disco asociadas
 a la máquina virtual, o cuando
\end_layout

\begin_layout Itemize
las imágenes de disco asociadas a la máquina virtual se están editando en
 el servidor de máquinas virtuales, o cuando
\end_layout

\begin_layout Itemize
el servidor de máquinas virtuales no disponga de suficientes CPUs, memoria
 RAM o espacio libre en disco.
\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:El-paquete-clusterServer"

\end_inset

 mostraremos que, para ahorrar ancho de banda, el servidor de 
\emph on
cluster
\emph default
 nunca enviará a los servidores de máquinas virtuales peticiones incorrectas.
 No obstante, para que la infraestructura pueda tolerar los errores del
 servidor de 
\emph on
cluster
\emph default
, estos errores se siguen detectando y tratando en los servidores de máquinas
 virtuales.
\end_layout

\begin_layout Standard
Durante el proceso de creación de una máquina virtual, los errores pueden
 detectarse
\end_layout

\begin_layout Itemize
al consultar la base de datos del servidor de máquinas virtuales para obtener
 el estado de la imagen.
 Este es el caso de los dos primeros tipos de peticiones incorrectas que
 pueden recibirse en el servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
al realizar las llamadas a 
\family typewriter
libvirt
\family default
.
 Los errores restantes se detectan al realizar estas llamadas.
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-MV-estado-incorrecto"

\end_inset

 muestra cómo se procede al detectar un error tras consultar el estado de
 la imagen en la base de datos del servidor de máquinas virtuales.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Arranque MV error 1.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-MV-estado-incorrecto"

\end_inset

Arranque de una máquina virtual: imágenes de disco en estado incorrecto
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar, el paquete del tipo 
\family sans
Arranque de máquina virtual
\family default
 empieza a procesarse igual que en el arranque normal.
 En cuanto se detecta el error,
\end_layout

\begin_layout Enumerate
se liberan la MAC, el UUID y los puertos que se reservaron,
\end_layout

\begin_layout Enumerate
se construye un paquete del tipo 
\family sans
Error de arranque de máquina virtual
\family default
.
 Este paquete contiene el identificador único de la petición y un código
 de descripción del error.
\end_layout

\begin_layout Enumerate
se envía el paquete de error al servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Standard
Por otra parte, los errores restantes se procesan tratando excepciones.
 El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-MV-excepción"

\end_inset

 muestra cómo se trata el error de este tipo que requiere más procesamiento:
 un fallo en la llamada a 
\family typewriter
libvirt
\family default
.
 
\end_layout

\begin_layout Standard
Es importante notar que las direcciones MAC y los UUIDs, los puertos, las
 imágenes de disco,\SpecialChar \ldots{}
 no se intentan liberar si no se han asociado a la máquina
 virtual.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Arranque MV error 2.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-MV-excepción"

\end_inset

Arranque de una máquina virtual: fallo en la llamada a 
\family typewriter
libvirt
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar en el diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-MV-excepción"

\end_inset

, cuando se detecta el error
\end_layout

\begin_layout Enumerate
se liberan la MAC, el UUID y los puertos que se reservaron,
\end_layout

\begin_layout Enumerate
se borran las imágenes de disco, 
\end_layout

\begin_layout Enumerate
se construye un paquete del tipo 
\family sans
Error interno
\family default
.
 Este paquete contiene el identificador único de la petición.
\end_layout

\begin_layout Enumerate
se envía el paquete de error al servidor de 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Standard
Finalmente, debemos observar que, en caso de que no se produzcan errores,
 el registro de los recursos asociados a la máquina virtual se realiza tras
 realizar la llamada a 
\family typewriter
libvirt
\family default
.
 Esto nos permite que, en caso de producirse algún error, no sea necesario
 borrar de la base de datos el identificador único de la petición, el identifica
dor del usuario que la envió, las rutas de las imágenes de disco,\SpecialChar \ldots{}

\end_layout

\begin_layout Paragraph
Apagado de una máquina virtual 
\begin_inset CommandInset label
LatexCommand label
name "par:Apagado-MV"

\end_inset


\end_layout

\begin_layout Standard
Cuando se apaga una máquina virtual, se liberan todos los recursos que esta
 tiene asociados.
 Este proceso se muestra en el diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Apagado-MV"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Apagado MV.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Apagado-MV"

\end_inset

Apagado de una máquina virtual: secuencia básica
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar en dicho diagrama, sucede lo siguiente:
\end_layout

\begin_layout Enumerate
cuando la máquina virtual se apaga, libvirt genera el evento correspondiente.
 Para tratarlo, el objeto 
\family typewriter
LibvirtConnector
\family default
 invoca al método 
\family typewriter
onDomainStop()
\family default
 de la clase 
\family typewriter
DomainHandler
\family default
.
\end_layout

\begin_layout Enumerate
el objeto 
\family typewriter
DomainHandler
\family default
 extrae de la base de datos los recursos asignados a la máquina virtual.
\end_layout

\begin_layout Enumerate
acto seguido, el objeto 
\family typewriter
DomainHandler
\family default
 libera dichos recursos.
 Para ello, 
\end_layout

\begin_deeper
\begin_layout Enumerate
llama al método 
\family typewriter
unregisterVMAllocatedResources()
\family default
 del objeto 
\family typewriter
VMServerDBConnector
\family default
.
 En esta llamada, se liberan la dirección MAC, el UUID y los puertos asignados
 al servidor VNC y al 
\emph on
websocket
\emph default
.
 Asimismo, también se borra de la base de datos toda la información asociada
 a la máquina virtual (como el identificador de usuario que la creó, la
 ruta de las imágenes de disco que utilizaba,\SpecialChar \ldots{}
)
\end_layout

\begin_layout Enumerate
borra las imágenes de disco.
 Para ello, ejecuta dos veces el comando 
\family typewriter
rm
\family default
, haciendo uso de los servicios de la clase 
\family typewriter
ChildProcessManager
\family default
.
\end_layout

\end_deeper
\begin_layout Standard
La librería 
\family typewriter
libvirt
\family default
 se ocupa del apagado del servidor VNC asociado a la máquina virtual, por
 lo que no debemos preocuparnos por él cuando la máquina se apaga.
\end_layout

\begin_layout Standard
Asimismo, cuando el servidor VNC se apaga, el demonio 
\family typewriter
websockify
\family default
 lo detectará y se también se apagará.
 Por ello, no es necesario matarlo cuando la máquina virtual se apaga..
\end_layout

\begin_layout Paragraph
Apagado del servidor de máquinas virtuales
\end_layout

\begin_layout Standard
El servidor de máquinas virtuales se apagará cuando el servidor de 
\emph on
cluster
\emph default
 le envíe un paquete del tipo 
\family sans
Apagado inmediato
\family default
 o un paquete del tipo 
\family sans
Apagado con espera
\family default
.
 Los primeros no contienen información adicional, y los segundos contienen
 un intervalo de espera en segundos.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Apagado largo.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Apagado-Servidor-MVs"

\end_inset

Apagado del servidor de máquinas virtuales
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Apagado-Servidor-MVs"

\end_inset

 muestra cómo se procesa un paquete del tipo 
\family sans
Apagado con espera
\family default
.
 Como puede observarse en él, se dan los siguientes pasos:
\end_layout

\begin_layout Enumerate
el objeto 
\family typewriter
NetworkManager
\family default
 llama al método de procesamiento de paquetes del objeto 
\family typewriter
VMServerReactor
\family default
.
 En él,
\end_layout

\begin_deeper
\begin_layout Enumerate
se leerá el contenido del paquete, utilizando un objeto 
\family typewriter
VMServerPacketHandler
\family default
.
\end_layout

\begin_layout Enumerate
se esperará a que los usuarios apaguen las máquinas virtuales arrancadas.
 El tiempo que se esperará se incluye en el paquete.
 Es importante notar que, durante ese tiempo, el servidor de máquinas virtuales
 sigue atendiendo peticiones de forma normal.
\end_layout

\end_deeper
\begin_layout Enumerate
cuando ha transcurrido el tiempo de espera, desde el hilo principal se invoca
 al método 
\family typewriter
shutdown()
\family default
 del objeto 
\family typewriter
VMServerReactor
\family default
.
 Esto es necesario ya que, como hemos mencionado en anteriores ocasiones,
 los hilos de la red sólo pueden detenerse desde el hilo principal.
 
\end_layout

\begin_deeper
\begin_layout Standard
Durante la ejecución de ese método,
\end_layout

\begin_layout Enumerate
se apagan todas las máquinas virtuales activas.
 Sus recursos se liberan como vimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Apagado-MV"

\end_inset

.
\end_layout

\begin_layout Enumerate
se paran los hilos asociados a la cola de transferencia y a la cola de compresió
n.
 Puesto que estas colas tienen persistencia en disco, el procesamiento de
 sus elementos se reanudará en el siguiente arranque del servidor de máquinas
 virtuales, por lo que no se perderán datos.
\end_layout

\begin_layout Enumerate
se detiene el servicio de red, y finaliza la ejecución del demonio del servidor
 de máquinas virtuales.
\end_layout

\end_deeper
\begin_layout Standard
Finalmente, los paquetes del tipo 
\family sans
Apagado inmediato
\family default
 se procesan de forma muy similar.
 No obstante, al procesarlos el tiempo de espera será siempre 0, por lo
 que no se esperará a que las máquinas virtuales arrancadas se apaguen.
\end_layout

\begin_layout Subsubsection
Interacciones relacionadas con la creación, edición, despliegue y borrado
 de imágenes de disco
\end_layout

\begin_layout Standard
En esta sección mostraremos cómo los servidores de máquinas virtuales interactúa
n con el servidor de 
\emph on
cluster
\emph default
 y el repositorio de imágenes durante los procesos de creación, edición,
 despliegue y borrado de imágenes de disco.
\end_layout

\begin_layout Standard
En primer lugar, nos centraremos en la creación y edición de imágenes de
 disco.
 Para ello, seguiremos el siguiente orden:
\end_layout

\begin_layout Enumerate
descarga del fichero comprimido desde el repositorio de imágenes.
\end_layout

\begin_layout Enumerate
descompresión del fichero comprimido
\end_layout

\begin_layout Enumerate
arranque y apagado de una máquina virtual temporal.
\end_layout

\begin_layout Enumerate
creación de un nuevo fichero comprimido
\end_layout

\begin_layout Enumerate
subida del fichero comprimido al repositorio de imágenes
\end_layout

\begin_layout Standard
Posteriormente, mostraremos las operaciones que tienen lugar durante el
 despliegue de imágenes de disco.
 Esta operación comparte muchas fases con las de creación y edición de imágenes.
 Finalmente, mostraremos qué sucede en el servidor de máquinas virtuales
 durante el borrado de una imagen de disco.
\end_layout

\begin_layout Standard
Nuevamente, en todos los casos empezaremos mostrando el flujo básico para
 posteriormente mostrar los distintos flujos alternativos, que están relacionado
s con el tratamiento de errores.
\end_layout

\begin_layout Paragraph
Creación y edición de imágenes de disco: descarga del fichero comprimido
 
\begin_inset CommandInset label
LatexCommand label
name "par:Creación-y-edición-descarga-normal"

\end_inset


\end_layout

\begin_layout Standard
En esta sección y en las siguientes, mostraremos los procesos que tienen
 lugar en el servidor de máquinas virtuales durante los procesos de creación
 y edición de imágenes de disco.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Descarga repositorio sin errores.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-temporal-fase-1"

\end_inset

Creación y edición de imágenes de disco: descarga del fichero comprimido
 desde el repositorio de imágenes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para empezar, nos centraremos en el proceso de descarga del fichero comprimido
 desde el repositorio de imágenes, que se recoge en el diagrama de secuencia
 de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1"

\end_inset

.
 En la interacción que recoge dicho diagrama no se produce ningún error,
 y se siguen estos pasos:
\end_layout

\begin_layout Enumerate
el servidor de 
\emph on
cluster
\emph default
 envía al servidor de máquinas virtuales un paquete del tipo 
\family sans
Editar imagen
\family default
.
 Este contiene, entre otras cosas, 
\end_layout

\begin_deeper
\begin_layout Itemize
la dirección IP y el puerto de la conexión de control del repositorio de
 imágenes,
\end_layout

\begin_layout Itemize
el identificador único del fichero comprimido a descargar,
\end_layout

\begin_layout Itemize
un 
\emph on
flag
\emph default
 que indica si se van a editar las imágenes de disco correspondientes o
 si se van a utilizar como base para crear nuevas imágenes de disco,
\end_layout

\begin_layout Itemize
el identificador único del usuario que ha desencadenado la edición de la
 imagen, y
\end_layout

\begin_layout Itemize
el identificador único de la petición\SpecialChar \@.

\end_layout

\end_deeper
\begin_layout Enumerate
al procesar el paquete, el objeto 
\family typewriter
VMServerReactor
\family default
 lo lee utilizando un objeto 
\family typewriter
VMServerPacketHandler
\family default
.
 Por claridad, hemos decidido no incluir su línea de vida en el diagrama
 de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1"

\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
Tras leer el paquete, el objeto 
\family typewriter
VMServerReactor
\family default
 crea y añade la petición correspondiente a la cola de transferencias.
\end_layout

\end_deeper
\begin_layout Enumerate
cuando le llega el turno, el hilo de transferencias desencolará la petición
 y
\end_layout

\begin_deeper
\begin_layout Enumerate
construirá el paquete utilizado para enviar la petición inicial al repositorio
 de imágenes.
 Estos paquetes se construyen a través de un objeto 
\family typewriter
ImageRepositoryPacketReactor
\family default
.
 Nuevamente, por claridad hemos eliminado la línea de vida del diagrama
 de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1"

\end_inset

.
\end_layout

\begin_layout Enumerate
crea un objeto 
\family typewriter
FileTransferCallback
\family default
, que interactuará con el repositorio de imágenes, y
\end_layout

\begin_layout Enumerate
se conectará al repositorio de imágenes y le enviará el paquete.
\end_layout

\begin_layout Standard
El objeto 
\family typewriter
FileTransferCallback
\family default
 descargará el fichero comprimido desde el repositorio de imágenes tal y
 como vimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Descarga-de-imágenes"

\end_inset

.
 
\end_layout

\begin_layout Standard
Además, cuando las imágenes de disco que este contiene se utilicen como
 base para crear una imagen nueva, también se solicitará un identificador
 al repositorio de imágenes de acuerdo a lo que vimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Registro-identificador-imagen"

\end_inset

.
\end_layout

\begin_layout Standard
Por ello, no hemos reproducido estos procesos en el diagrama de secuencia
 de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1"

\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Enumerate
tras finalizar la transferencia, se comprueba si se ha producido algún error
 durante la misma.
\end_layout

\begin_layout Enumerate
como no se han producido errores, el fichero comprimido se encontrará en
 el servidor de máquinas virtuales.
 Para terminar de procesar la petición de transferencia,
\end_layout

\begin_deeper
\begin_layout Enumerate
se cerrará la conexión con el repositorio de imágenes, y
\end_layout

\begin_layout Enumerate
se construirá y añadirá una petición a la cola de compresión.
\end_layout

\end_deeper
\begin_layout Standard
Es importante notar que, para no saturar el repositorio de imágenes, las
 transferencias de ficheros se procesarán de una en una.
 De esta manera, es posible conectar un número muy elevado de servidores
 de máquinas virtuales al repositorio de imágenes sin que este llegue a
 saturarse.
 Y por la misma razón, los servidores de máquinas virtuales se desconectan
 del repositorio de imágenes tan pronto como dejan de utilizarlo.
 
\end_layout

\begin_layout Standard
Finalmente, los servidores de 
\emph on
cluster
\emph default
 siempre suministran a los servidores de máquinas virtuales los datos de
 conexión al repositorio de imágenes.
 Aunque con ello se consume un poco más de ancho de banda, se gana en flexibilid
ad: permite utilizar varios repositorios de imágenes en el mismo 
\emph on
cluster
\emph default
 de forma sencilla.
\end_layout

\begin_layout Paragraph
Creación y edición de imágenes de disco: errores durante la descarga
\end_layout

\begin_layout Standard
Durante la descarga del fichero comprimido, se producirán errores cuando
\end_layout

\begin_layout Itemize
el repositorio de imágenes no tiene el fichero comprimido que se pretende
 descargar, o cuando
\end_layout

\begin_layout Itemize
no se puede establecer la comunicación con el repositorio de imágenes, o
 cuando
\end_layout

\begin_layout Itemize
la transferencia FTP con el repositorio de imágenes falla.
\end_layout

\begin_layout Standard
Centrémonos en el primer error.
 Puesto que las transferencias con el repositorio de imágenes no se inician
 inmediatamente, es posible que ocurra lo siguiente:
\end_layout

\begin_layout Enumerate
un profesor decide crear una máquina virtual a partir de las imágenes de
 disco asociadas al identificador 1.
\end_layout

\begin_layout Enumerate
mientras la petición de transferencia está encolada, un administrador borra
 el fichero comprimido del repositorio de imágenes.
\end_layout

\begin_layout Enumerate
cuando se va a tratar la petición de transferencia, las imágenes de disco
 asociadas al identificador 1 han dejado de existir en el repositorio de
 imágenes.
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1-error-nE"

\end_inset

 muestra cómo se procede en estos casos.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Descarga repositorio error ne.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-temporal-fase-1-error-nE"

\end_inset

Creación y edición de imágenes de disco: imágenes no registradas en el repositor
io de imágenes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar en dicho diagrama de secuencia, la descarga del fichero
 comprimido se inicia igual que en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Creación-y-edición-descarga-normal"

\end_inset

.
 No obstante, al comprobar si se ha producido un error, se detecta que el
 repositorio de imágenes no dispone de las imágenes de disco solicitadas.
 
\end_layout

\begin_layout Standard
Por ello, se cierra la conexión con el repositorio, se construye un paquete
 del tipo 
\family sans
Error de edición de imagen
\family default
 (usando un objeto 
\family typewriter
VMServerPacketHandler
\family default
) y se envía dicho paquete de error al servidor de 
\emph on
cluster
\emph default
.
 Los paquetes del tipo 
\family sans
Error de edición de imagen
\family default
 contienen el identificador de la petición y un código de descripción del
 error.
\end_layout

\begin_layout Standard
Asimismo, la petición se elimina de la cola de transferencias y no se inserta
 en la cola de compresión, por lo que su procesamiento termina.
\end_layout

\begin_layout Standard
Es importante notar que, cuando se produce un error de este tipo, no se
 descargan datos del repositorio.
 Por ello, no es necesario realizar ninguna acción adicional.
\end_layout

\begin_layout Standard
Por otra parte, el diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1-error-conexión"

\end_inset

 muestra cómo se tratan los errores de conexión al repositorio de imágenes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Descarga repositorio error conexión.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-temporal-fase-1-error-conexión"

\end_inset

Creación y edición de imágenes de disco: error al establecer la conexión
 con repositorio de imágenes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cuando el establecimiento de la conexión falla, se lanza una excepción.
 Al procesarla, el hilo de transferencias 
\end_layout

\begin_layout Enumerate
actualiza un contador de intentos fallidos,
\end_layout

\begin_layout Enumerate
duerme durante 
\begin_inset Formula $4^{\textrm{intentos fallidos}}$
\end_inset

 segundos, e
\end_layout

\begin_layout Enumerate
reinicia el procesamiento de la transferencia, volviendo a instanciar un
 objeto 
\family typewriter
FileTransferCallback
\family default
 y creando nuevamente la conexión con el repositorio de imágenes.
\end_layout

\begin_layout Enumerate
cuando el número de intentos de conexión fallidos supera un determinado
 umbral, que es configurable, se construye el paquete del tipo 
\family sans
Error de edición de imagen
\family default
, se envía al servidor de 
\emph on
cluster
\emph default
 y se elimina la petición de la cola de transferencias.
\end_layout

\begin_layout Standard
Finalmente, el diagrama de secuencia de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1-error-FTP"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-1-error-FTP-1"

\end_inset

 muestra cómo se procesan los errores en las transferencias FTP.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Descarga repositorio error FTP parte 1.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-temporal-fase-1-error-FTP"

\end_inset

Creación y edición de imágenes de disco: error al realizar la transferencia
 FTP (parte 1)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Descarga repositorio error FTP.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Descarga repositorio error FTP parte 2.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-temporal-fase-1-error-FTP-1"

\end_inset

Creación y edición de imágenes de disco: error al realizar la transferencia
 FTP (parte 2)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar, la forma de proceder es idéntica a la del caso anterior.
 Es importante notar que, en ambos, se utiliza el mismo contador de intentos
 fallidos, por lo que los errores de conexión al repositorio de imágenes
 y los errores en las transferencias FTP tienen la misma importancia.
\end_layout

\begin_layout Paragraph
Creación y edición de imágenes de disco: extracción del fichero comprimido
\end_layout

\begin_layout Standard
Una vez se ha descargado el fichero comprimido desde el repositorio de imágenes,
 es necesario extraer su contenido.
 Por convenio, el fichero comprimido contiene tres ficheros ubicados en
 su directorio raíz:
\end_layout

\begin_layout Itemize
el fichero 
\family typewriter
Definition.xml
\family default
 es la plantilla que se usará para generar el fichero de configuración de
 todas las máquinas virtuales que usen las imágenes de disco correspondientes.
\end_layout

\begin_layout Itemize
el fichero 
\family typewriter
OS.qcow2
\family default
 es la imagen de disco que contiene el sistema operativo y los programas
 instalados.
 Durante el proceso de arranque de las máquinas virtuales, se crearán imágenes
 
\emph on
copy-on-write
\emph default
 a partir de este fichero.
\end_layout

\begin_layout Itemize
el fichero 
\family typewriter
Data.qcow2
\family default
 es la imagen de disco que contiene el fichero de paginación y los datos
 temporales que usan los usuarios.
 Durante el proceso de arranque de las máquinas virtuales, se creará una
 copia de este fichero.
\end_layout

\begin_layout Standard
Tras finalizar la extracción del fichero comprimido,
\end_layout

\begin_layout Itemize
los ficheros 
\family typewriter
.qcow2
\family default
 se moverán al directorio 
\family typewriter
imagenes/<identificador del fichero comprimido>
\family default
, y
\end_layout

\begin_layout Itemize
el fichero 
\family typewriter
.xml
\family default
 se moverá al directorio 
\family typewriter
configuraciones/<identificador del fichero comprimido>
\end_layout

\begin_layout Standard
Los directorios 
\family typewriter
imagenes
\family default
 y 
\family typewriter
configuraciones
\family default
 se encuentran en la raíz del directorio de trabajo del servidor de máquinas
 virtuales.
\end_layout

\begin_layout Standard
Finalmente, se creará la máquina virtual que se utilizará para editar las
 imágenes de disco.
 Todos estos pasos se reflejan en el diagrama de secuencia de la figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Arranque-temporal-fase-2"

\end_inset

.
 Por claridad, supondremos que no se produce ningún error.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagramas de secuencia/Servidor MVs/Descompresión sin errores.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Arranque-temporal-fase-2"

\end_inset

Creación y edición de imágenes de disco: extracción del fichero comprimido
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es importante notar que
\end_layout

\begin_layout Itemize
siempre se modifican los permisos de las imágenes de disco.
 Así, nos aseguramos de que pueden leerse y escribirse en el servidor de
 máquinas virtuales.
\end_layout

\begin_layout Itemize
si la imagen ya está dada de alta en la base de datos, se borra.
 Como veremos más adelante, esto hace posible que el servidor de 
\emph on
cluster
\emph default
 pueda enviar menos paquetes cuando se modifica el contenido de las imágenes
 de disco, ahorrando así ancho de banda.
\end_layout

\begin_layout Paragraph
Creación y edición de imágenes de disco: errores en la extracción del fichero
 comprimido
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
clusterServer 
\begin_inset CommandInset label
LatexCommand label
name "sub:El-paquete-clusterServer"

\end_inset


\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
clusterEndpoint
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
clusterConnector
\end_layout

\begin_layout Subsection
Códigos de error generados por la infraestructura
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
webServer
\end_layout

\begin_layout Standard
En este paquete se trata todo lo relacionado con la gestión de la web de
 CygnusCloud.
 Así, en él, se incluyen todos los módulos encargados de gestionar las funcional
idades de interacción con los usuarios a través de la web y los ficheros
 html y css necesarios para la implementación de las páginas.
 
\end_layout

\begin_layout Subsubsection
Modelo Vista-Controlador
\end_layout

\begin_layout Standard
Para llevar a cabo el desarrollo de la web ha sido necesario la utilización
 de un framework web que nos facilitase algunos aspectos y estructurase
 el sistema de forma correcta.
 Para ello, hemos optado por la utilización de Web2py cuyas principales
 características se mencionaron en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-web2py"

\end_inset

.
\end_layout

\begin_layout Standard
Web2py fuerza al desarrollador a utilizar unas buenas prácticas de ingeniería
 del software, evitando la repetición de código en la medida de lo posible
 y estandarizando la manera de hacer las cosas.
 
\end_layout

\begin_layout Standard
Por ello, este 
\shape italic
framework
\shape default
 utiliza un modelo Vista-Controlador que incentiva al desarrollador a separar
 la forma de representar los datos (la vista) y el flujo de trabajo de la
 aplicación (el controlador).
 Este modelo ofrece una estructura modular que permite aislar los posibles
 errores en una sección de código concreta y trabajar en paralelo de forma
 independiente, reduciendo así los posibles tiempos de espera en el desarrollo
 de la web.
\end_layout

\begin_layout Standard
El flujo de trabajo típico de una petición web2py viene representado en
 el diagrama 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagram-web2py"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaSecuenciaWeb2py.png
	scale 50
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagram-web2py"

\end_inset

Diagrama de secuencia web2py
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este diagrama podemos destacar los siguientes elementos:
\end_layout

\begin_layout Itemize
El navegador, a partir del cual el usuario se conectará a la web.
\end_layout

\begin_layout Itemize
El servidor, puede ser el servidor incluido en web2py o un servidor de terceros,
 tal como Apache.
\end_layout

\begin_layout Itemize
La aplicación principal, encargada de realizar todas las tareas comunes
 tal y como la gestión de 
\shape italic
cookies
\shape default
, sesiones, transacciones y enrutamiento.
\end_layout

\begin_layout Itemize
Los modelos, vistas y controladores que componen la aplicación del desarrollador.
\end_layout

\begin_layout Itemize
La base de datos que se encargará de almacenar la información utilizada
 por la web.
\end_layout

\begin_layout Standard
Todas las llamadas se encierran en una transacción.
 Cualquier excepción no contemplada hace que la transacción se cancele.
 
\end_layout

\begin_layout Standard
Con web2py es posible registrar tareas recurrentes para ejecutarse en horas
 específicas y/o después de determinadas acciones.
 También es posible alojar varias aplicaciones en una misma instancia.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Web2PyBook"

\end_inset


\end_layout

\begin_layout Subsubsection
Estructura general de la web
\end_layout

\begin_layout Standard
Como Web2py estructura las aplicaciones siguiendo un modelo vista-controlador,
 en CygnusCloud ha sido necesario estructurar el código de la web en un
 grupo de control y un grupo de vista.
 A parte de ambos grupos también se han creado más grupos con ficheros estáticos
, ficheros css y html, módulos importados y en general todos los ficheros
 necesarios para dar la funcionalidad y el aspecto requeridos en la web.
\end_layout

\begin_layout Standard
Con todo esto, la web de CygnusCloud puede subdividirse en los siguientes
 grupos según su finalidad y tipo:
\end_layout

\begin_layout Itemize
Vistas: Este grupo incluye todos los ficheros de formato html encargados
 de establecer el aspecto de los componentes, su posicionamiento en las
 páginas y su comportamiento.
 Entendemos por comportamiento de un componente, su capacidad para realizar
 ciertas acciones que mejoren la interacción con los usuarios.
 Según las restricciones de web2py será necesario disponer de un fichero
 de vista por cada sección disponible en la web.
 Cada uno de estos ficheros de vista reciben los componentes creados en
 el controlador asociado, ajustan su aspecto al que se mostrará en la web,
 y los posicionan en el lugar deseado.
\end_layout

\begin_layout Itemize
Controladores: Este grupo incluye el conjunto de módulos python que aportan
 todas las funcionalidades que serán gestionadas por la web.
 CygnusCloud dispone de un módulo para cada uno de los tipos de usuarios
 que pueden acceder a la web (alumnos, administradores y profesores), un
 módulo para las páginas de acceso público, un módulo para la página que
 contiene el cliente VNC y un módulo 
\family sans
appAdmin
\family default
 creado automáticamente por web2py para la gestión de las bases de datos.
 Dentro de cada módulo encontramos una función asociada a cada una de las
 secciones que forman la web.
 Hablaremos más en profundidad sobre este tema en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Secciones-y-subsecciones"

\end_inset

.
\end_layout

\begin_layout Itemize
Modelos: Este grupo incluye dos módulos python encargados de la creación
 de las bases de datos y las características generales de la aplicación.
 Así, el módulo 
\family sans
db.py
\family default
 crea las tablas de la base de datos encargada de la gestión de la información
 en la web.
 El módulo 
\family sans
menu.py
\family default
 define las características generales de la aplicación web, tales como su
 logo, su autor, sus 
\shape italic
tags
\shape default
 de búsqueda\SpecialChar \ldots{}
 Este par de módulos son creados y exigidos por web2py.
\end_layout

\begin_layout Itemize
Lenguajes: Este grupo incluye los diccionarios de traducción de las páginas
 de la web.
 Estos diccionarios deben ser rellenados por el desarrollador y son usados
 internamente por web2py para traducir todas las palabras de la web que
 aparezcan en los mismos.
\end_layout

\begin_layout Itemize
Archivos estáticos: Este grupo incluye los ficheros css y js encargados
 de definir la apariencia de la web, las imágenes y en general cualquier
 fichero que defina algún componente externo se importará en la web.
\end_layout

\begin_layout Itemize
Módulos: En este apartado se incluyen todos los módulos python secundarios
 utilizados por los controladores.
 Así, en este grupo se encuentra el conector que permite la interacción
 entre el servidor web y el servidor de cluster.
\end_layout

\begin_layout Subsubsection
Estructura de direcciones
\begin_inset CommandInset label
LatexCommand label
name "sub:Estructura-de-direcciones"

\end_inset


\end_layout

\begin_layout Standard
Con el fin de poder gestionar la web de la forma más modular posible y aprovecha
ndo el flujo de direcciones usado por web2py, vamos a estructurar los diferentes
 apartados de la web en forma de árbol de direcciones, de forma que cada
 uno de sus nodos pueda realizar saltos a cualquier otro nodo del árbol
 según las acciones llevadas a cabo por los usuarios.
 Así, el elemento principal será la aplicación en sí (/CygnusCloud).
 A partir de esta dirección comenzarán a surgir las direcciones asociadas
 a las páginas manteniendo la estructura de secciones y subsecciones correspondi
entemente.
 De esta forma, las diferentes URLs sobre las que trabajará la web son:
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/main/login
\family default
: Es la página de inicio de sesión donde el usuario introduce su nombre
 y contraseña para iniciar la sesión.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/main/about
\family default
: Es la página en la que se habla acerca de CygnusCloud y su finalidad.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/student/runVM
\family default
: Es la página de arranque de máquinas virtuales para los usuarios.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/student/runningVM/stopVM
\family default
: Página encargada de detener máquinas virtuales en ejecución.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/student/runningVM/openVM
\family default
: Esta página permite abrir una máquina virtual en ejecución arrancada por
 el alumnos.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/runVM/run
\family default
: Es la página de arranque de máquinas virtuales para los administradores.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/runVM/stop
\family default
: Es la página de detención de máquinas virtuales en ejecución para los
 administradores.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/runVM/open
\family default
: Página que permite abrir una máquina en ejecución.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/runVM/edit
\family default
: Página que permite editar una máquina virtual con respecto a el servidor
 de máquinas virtuales donde se encuentra desplegada.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/servers/add_servers
\family default
: Es la página encargada de añadir nuevos servidores y borrar algún servidor
 existente.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/servers/remove_servers
\family default
: Es la página encargada de eliminar servidores de máquinas virtuales existentes.
\end_layout

\begin_layout Itemize
/
\family typewriter
CygnusCloud/administrator/servers/servers_state
\family default
: Página que muestra el estado en que se encuentra el repositorio y los
 servidores de máquinas virtuales activos.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/servers/stop_system
\family default
: Es la página que permite detener todos los servidores de la infraestructura.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/users/remove
\family default
: Esta es la página encargada de eliminar a usuarios previamente creados.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/users/add
\family default
: Es la página encargada de crear nuevos usuarios con las especificaciones
 determinadas por el administrador.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/users/associate_subjects
\family default
: Es la página encargada de establecer las relaciones entre un usuario previamen
te creado y un grupo de asignatura.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/subjects/add
\family default
: Es la página encargada de crear nuevos grupos de asignaturas con la informació
n introducida por el administrador.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/subjects/remove
\family default
: Es la página encargada de eliminar algún grupo de asignatura existente.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/administrator/showNotifications
\family default
: Página que muestra las notificaciones pendientes para este administrador.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/vncClient/VNCPage
\family default
: Página que contiene el escritorio de trabajo ejecutado por noVNC.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/teacher/runVM/run
\family default
: Esta página muestra las máquinas que pueden ser ejecutadas por el profesor
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/teacher/runningVM/stopVM
\family default
: Página que permite detener una máquina virtual en ejecución para los profesore
s.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/teacher/runningVM/openVM
\family default
: Es la página de apertura de máquinas en ejecución para los profesores.
\end_layout

\begin_layout Itemize
/
\family typewriter
CygnusCloud/teacher/createAndEdit/createVanillaVM
\family default
: Esta página permite a un profesor crear una nueva máquina virtual a partir
 de otra existente.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/teacher/createAndEdit/editVM
\family default
: Esta página permite editar máquinas virtuales por parte de un profesor.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/teacher/associateSubjects
\family default
: Página que permite asociar una máquina virtual con un determinado grupo
 de asignatura.
\end_layout

\begin_layout Itemize

\family typewriter
/CygnusCloud/teacher/showNotifications
\family default
: Es la página que muestra las notificaciones pendientes para los profesores.
\end_layout

\begin_layout Standard
La distribución de estas páginas con respecto a su estructura en el flujo
 de direcciones viene representado en el diagrama de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-direcciones_Web"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DireccionesWeb.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de direcciones web2py.
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-direcciones_Web"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Secciones y subsecciones
\begin_inset CommandInset label
LatexCommand label
name "sub:Secciones-y-subsecciones"

\end_inset


\end_layout

\begin_layout Standard
Para poder hacer frente al elevado número de páginas que ofrece CygnusCloud,
 hemos optado por estructurarlas en un sistema de 3 niveles, que permite
 filtrarlas teniendo en cuenta los privilegios de acceso y la finalidad
 de cada página.
 
\end_layout

\begin_layout Standard
El primer nivel se centra en los privilegios de acceso.
 CygnusCloud agrupa a los usuarios registrados en 3 tipos según los privilegios
 de los que dispongan.
 Estos privilegios dan acceso a unas u otras páginas.
 Podemos encontrar los siguientes tipos de usuarios:
\end_layout

\begin_layout Itemize
Alumnos : En este tipo se incluyen todos los alumnos que cursan alguna de
 las asignaturas registradas en la web.
 Este tipo de usuarios es el más restringido, dándole únicamente acceso
 a la página de arranque de máquinas virtuales , asociadas a las asignaturas
 matriculadas por el alumno, y a la página de visualización, detención y
 apertura de máquinas arrancadas.
\end_layout

\begin_layout Itemize
Profesores : Este tipo incluye a todos los profesores que imparten alguna
 de las asignaturas registradas en la web.
 Dispone de unos privilegios de acceso mayores que el caso del alumno, pudiendo
 acceder, además de las páginas de arranque de máquinas virtuales y gestión
 de máquinas arrancadas, a páginas de creación, edición y borrado de máquinas
 virtuales.
\end_layout

\begin_layout Itemize
Administradores: Este tipo incluye a todos los técnicos y administradores
 encargados de la gestión total de la página.
 Es el tipo más privilegiado, teniendo acceso a las páginas de :
\end_layout

\begin_deeper
\begin_layout Itemize
Arranque de todas máquinas virtuales.
\end_layout

\begin_layout Itemize
Detención, apertura de máquinas virtuales arrancadas independientemente
 del usuarios que las arrancó.
\end_layout

\begin_layout Itemize
Edición de máquinas virtuales existentes.
\end_layout

\begin_layout Itemize
Gestión de usuarios.
\end_layout

\begin_layout Itemize
Gestión de servidores de máquinas virtuales.
\end_layout

\begin_layout Itemize
Gestión de grupos de asignaturas, así como de las máquinas virtuales asociadas
 a cada grupo.
\end_layout

\end_deeper
\begin_layout Standard
Además de estos tipos de usuarios, CygnusCloud también ofrece acceso a ciertas
 páginas públicas.
 Estas páginas podrán ser vistas por cualquier usuarios que se conecte a
 la web de CygnusCloud, aunque no se encuentre registrado.
 
\end_layout

\begin_layout Standard
Como ya hemos dicho, cada uno de estos grupos de primer nivel concretan
 el conjunto de páginas al cual se quiere acceder.
 
\end_layout

\begin_layout Standard
En el segundo nivel las páginas se encuentran agrupadas por secciones.
 Entendemos como una sección, el conjunto de páginas que abordan un aspecto
 común para un tipo de usuario concreto.
 Cada tipo de usuario tendrá acceso a unas secciones u otras.
 Algunos ejemplos de secciones son la gestión de usuarios, el arranque de
 máquinas virtuales o el inicio de sesión.
 En la tabla 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tabla-rtipos-secciones"

\end_inset

puede verse el conjunto de secciones asociadas a cada tipo de usuario.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tipo de usuario
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Secciones
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Main
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Login
\family default
,
\family sans
About
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Student
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
RunVM
\family default
,
\family sans
RunningVM
\family default
,
\family sans
ShowNotifications
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Teacher
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
RunVM
\family default
,
\family sans
RunningVM
\family default
,
\family sans
CreateAndEdit
\family default
,
\family sans
AssociateSubjects
\family default
,
\family sans
ShowNotifications
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Administrator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
RunVM
\family default
, 
\family sans
Servers
\family default
, 
\family sans
Users
\family default
, 
\family sans
Subjects
\family default
, 
\family sans
ShowNotifications
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla relación tipos de usuario y secciones.
\begin_inset CommandInset label
LatexCommand label
name "tab:Tabla-rtipos-secciones"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por último, en el tercer nivel, las páginas se encuentran definidas en subseccio
nes.
 Cada subsección es una página que contiene las funcionalidades relacionadas
 con un aspecto concreto y más limitado que el de la sección que la incluye.
 Existirán por tanto, tantas subsecciones como páginas creadas en la web.
 En la tabla 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tabla-seccion-subseccion"

\end_inset

 pueden verse las diferentes subsecciones asociadas a cada sección.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sección
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subsección
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Login
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
About
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
RunVM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Run
\family default
, 
\family sans
Stop
\family default
, 
\family sans
Open
\family default
, 
\family sans
Edit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
RunningVM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
StopVM
\family default
, 
\family sans
OpenVM
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
ShowNotifications
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
CreateAndEdit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
CreateVanillaVM
\family default
, 
\family sans
EditVM
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
AssociateSubjects
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Servers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Add_servers
\family default
,
\family sans
Remove_servers
\family default
, 
\family sans
Servers_state
\family default
, 
\family sans
Stop_system
\family default
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Users
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Add
\family default
,
\family sans
Remove
\family default
,
\family sans
Associate_subjects
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Subjects
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family sans
Add
\family default
, 
\family sans
Remove
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla relación secciones y subsecciones
\begin_inset CommandInset label
LatexCommand label
name "tab:Tabla-seccion-subseccion"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La barra de secciones permanente en la web muestra la distribución de las
 páginas en secciones y subsecciones.
\end_layout

\begin_layout Standard
De cara a la implementación, es necesario ajustar esta estructura para que
 siga el modelo definido por web2py.
 Web2py gestiona sus direcciones con respecto a la estructura de los módulos
 python que actúan como controladores.
 El conjunto de controladores presentes en la web coincide con los tipos
 de usuarios definidos en el primer nivel.
 Así disponemos de 5 controladores:
\end_layout

\begin_layout Itemize
Uno para las páginas de acceso público.
\end_layout

\begin_layout Itemize
Uno para las páginas de los alumnos.
\end_layout

\begin_layout Itemize
Uno para las páginas de los profesores.
\end_layout

\begin_layout Itemize
Uno para las páginas de los administradores.
\end_layout

\begin_layout Itemize
Uno para la página que mantendrá el cliente VNC.
\end_layout

\begin_layout Standard
Este último controlador no corresponde a ningún tipo concreto de usuario
 pero se define a parte ya que su uso es común para todos.
 
\end_layout

\begin_layout Standard
Dentro de cada controlador es necesario definir una función python para
 cada una de las secciones del nivel 2 asociadas a este tipo de usuario.
 Así todo el código presente en los controladores debe pertenecer a una
 función, bien una función que defina una determinada sección o bien una
 función auxiliar utilizada por alguna de las funciones principales.
\end_layout

\begin_layout Standard
Por último cada una de las funciones python contendrán un variable que les
 indique cual de las subsecciones del tercer nivel deben controlar en cada
 momento.
\end_layout

\begin_layout Standard
Con respecto a las vistas, el diseño de los niveles se simplifica bastante,
 siendo necesario tener un fichero html para cada una de las secciones del
 segundo nivel.
 El nombre de estos ficheros html deben seguir la siguiente estructura:
\end_layout

\begin_layout Standard
\noindent
\align center
<Nombre del controlador>/<nombre de la función>.html
\end_layout

\begin_layout Standard
A modo de resumen, el esquema 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-niveles-web"

\end_inset

 muestra como CygnusCloud estructura sus páginas en estos 3 niveles.
 Como podemos observar, las rutas de direcciones de las que hablamos en
 la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Estructura-de-direcciones"

\end_inset

 coinciden con la estructura en los 3 niveles.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/NivelesWeb.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de niveles de la web.
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-niveles-web"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
La barra de direcciones
\end_layout

\begin_layout Standard
Con el fin de permitir a los usuarios acceder a las diferentes páginas de
 forma directa sin necesidad de utilizar redirecciones a páginas intermedias,
 la web dispone de una barra de direcciones permanente que permite al usuario
 redirigirse a cualquier página dentro de su rango de acción.
 De esta forma dependiendo del tipo de usuarios dispondremos de las siguientes
 barras:
\end_layout

\begin_layout Itemize
barra de direcciones para páginas de acceso público.
 En esta barra aparecen las páginas de inicio de sesión y de 
\family typewriter
Acerca de
\family default
, a las cuales pueden acceder libremente cualquier usuario que entre en
 la web.
\end_layout

\begin_layout Itemize
barra de direcciones para alumnos.
 Esta barra incluye las páginas de arranque, apertura y detención de máquinas
 virtuales y está restringida a usuarios de tipo alumno registrados en la
 web.
\end_layout

\begin_layout Itemize
barra de direcciones para profesores.
 Esta barra incluye las páginas de arranque, creación y edición de máquinas
 virtuales, accesibles para los profesores.
\end_layout

\begin_layout Itemize
barra de direcciones para administradores.
 Esta barra contiene todas las páginas de gestión de máquinas, servidores,
 asignaturas y usuarios, además de la página de arranque de máquinas virtuales.
 Su acceso está restringido a usuarios de tipo administrador.
\end_layout

\begin_layout Subsubsection
Gestión de usuarios 
\end_layout

\begin_layout Standard
Para llevar a cabo la gestión de usuarios hemos optado por utilizar una
 de las librerías que Web2py nos ofrece.
 Esta librería, de nombre 
\family sans
Auth
\family default
, contiene todas las funcionalidades necesarias con respecto a la gestión
 de usuarios.
 
\family sans
Auth
\family default
 contiene funciones para gestionar la creación de usuarios, los inicios
 de sesión y las restricciones de acceso a las diferentes páginas.
 Además esta librería ofrece también funciones que devuelven los formularios
 de inicio de sesión y cierre de la misma totalmente implementados para
 ser directamente incorporados en nuestras páginas.
\begin_inset CommandInset citation
LatexCommand cite
key "ACWeb2PyBook"

\end_inset


\end_layout

\begin_layout Subsubsection
Interacción entre páginas
\end_layout

\begin_layout Standard
Aunque bien es cierto que cada página debe ser controlada y representada
 por un controlador y una vista particulares, es posible que requiera de
 cierta información proveniente de la página a partir de la cual se accedió
 a ella.
 
\end_layout

\begin_layout Standard
Por esta razón, nuestra web debe ser capaz de trasmitir argumentos entre
 las diferentes páginas.
 Como ya mencionamos en el apartado 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Secciones-y-subsecciones"

\end_inset

, las diferentes secciones que componen la web son interpretadas por parte
 del controlador como simples funciones python sin argumentos.
 Aunque a simple vista lo más lógico pueda parecer que la forma correcta
 de trasmitir información entre páginas sea definiendo las funciones python
 con tantos argumentos como datos de entrada deba recibir esto no sucede
 así.
 Las razones por las cuales el envío y recepción de datos entre páginas
 no se da de esta forma son básicamente dos:
\end_layout

\begin_layout Enumerate
La redirección de una página a otra no puede darse llamando a la función
 del controlador directamente.
 Cuando el desarrollador quiera realizar una redirección, deberá llamar
 a una función 
\family typewriter
redirect 
\family default
con el
\family typewriter
 
\family default
nombre del controlador que la contiene, el nombre de la función de la sección
 correspondiente, los argumentos necesarios y el conjunto de variables.
 Una vez llamado a 
\family typewriter
redirect
\family default
, es Web2py el encargado de llamar a la función del controlador que corresponda
 y pasar los argumentos y variables.
\end_layout

\begin_layout Enumerate
El número de argumentos no siempre es el mismo.
 Dependiendo de la página a partir de la cual pueda realizarse la redirección,
 es posible que la función de la sección correspondiente reciba más o menos
 argumentos por lo que estos no pueden definirse como argumentos directos
 en la definición de la sección.
\end_layout

\begin_layout Standard
Por lo tanto la forma correcta de trasmitir información entre las diferentes
 páginas será utilizando la función 
\family typewriter
redirect
\family default
.
 Como podemos observar en la definición dada, esta función recibe además
 del nombre del controlador y la sección, un campo argumentos y un campo
 variables.
 Ambos campos permite trasmitir información entre dos páginas con unas caracterí
sticas particulares para cada uno de ellos.
 
\end_layout

\begin_layout Standard
En el caso de trasmitir información por el campo de argumentos, esta formará
 parte de la ruta de direcciones de la página destino.
 Así todos los argumentos que pasemos por este campo vendrán acoplados a
 la dirección de la página junto al nombre de la aplicación, el nombre del
 controlador y el nombre de la sección.
 Los valores en este campo son trasmitidos como una lista y son accedidos
 desde la página destino por medio de la llamada a 
\family typewriter
request.args(i)
\family default
 siendo 
\family typewriter
i
\family default
 la posición de la lista donde se encuentra el elemento deseado.
\end_layout

\begin_layout Standard
El segundo campo nos permite transferir la información como variables y
 no como argumentos.
 En esta caso el nombre de la variable no formará parte de la dirección
 destino.
 Este campo recibe un diccionario con el nombre que se quiere dar a cada
 una de estas variables y su contenido.
 Será accedido desde la página destino por medio de la llamada a 
\family typewriter
request.vars.x
\family default
 donde 
\family typewriter
x
\family default
 es el nombre que se le dio a la variable concreta a la que se quiere acceder.
\end_layout

\begin_layout Standard
En el caso de CygnusCloud, el campo de argumentos se utiliza para retrasmitir
 el nombre de la subsección que debe ejecutarse dentro de la sección correspondi
ente.
 El campo de variables se utiliza para trasmitir el resto de información
 útil como por ejemplo los resultados de las búsquedas.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Revisar diferencias
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Flujo de ejecución de arranque de una máquina virtual
\end_layout

\begin_layout Standard
En este apartado vamos a ejemplificar de forma detallada cada una de las
 acciones que debe realizar el sistema para atender la petición de arranque
 de una máquina virtual por parte de un alumno que se conecte a nuestra
 web.
\end_layout

\begin_layout Standard
Una vez que el alumno haya pulsado el vínculo que le da acceso a la página
 de CygnusCloud:
\end_layout

\begin_layout Itemize
Se ejecuta la función 
\family typewriter
login
\family default
 dentro del controlador 
\family typewriter
Main
\family default
.
 Esta función crea el formulario de inicio de sesión (utilizando la utilidad
 
\family typewriter
auth
\family default
 que se encarga de la gestión de usuarios) y lo devuelve.
\end_layout

\begin_layout Itemize
Justamente después se ejecuta la vista asociada a esta función (
\family typewriter
main/login.html
\family default
), la cual recibe el formulario creado por el controlador, le aplica el
 aspecto correspondiente y lo coloca en la página.
\end_layout

\begin_layout Itemize
Una vez el usuario ha introducido su nombre, contraseña y ha pulsado el
 botón de inicio de sesión, el controlador envía una consulta a la base
 de datos para comprobar que el usuario existe y que su contraseña es correcta.
 Tras esto mira el tipo de usuario y redirecciona a la página que sea necesaria.
 En nuestro caso, al ser un alumno el que inicia la sesión, redirecciona
 a la sección 
\family typewriter
runVM
\family default
 del controlador 
\family typewriter
student
\family default
 con el argumento 
\family typewriter
run
\family default
.
\end_layout

\begin_layout Itemize
Una vez en la función 
\family typewriter
runVM
\family default
 del controlador 
\family typewriter
student
\family default
, la cual solo es accesible para alumnos registrados, se evalúa el argumento
 de entrada para comprobar que subsección debe ejecutarse.
 Tras esto, se extrae la lista de asignaturas asociadas a este alumno concreto.
 Para ello, se envía una petición a la base de datos preguntando por estos
 valores.
 Para cada una de las asignaturas encontradas se crea una tabla, cuyas filas
 corresponden a las máquinas virtuales que pueden arrancarse en esta asignatura.
 La información de las máquinas virtuales asociadas a cada asignaturas se
 extrae también a partir de consultas a la base de datos.
 Cada tabla creada se añade al formulario que es devuelto por la función.
\end_layout

\begin_layout Itemize
A continuación se ejecuta la vista 
\family typewriter
student/runVM.html
\family default
 la cual recibe el formulario, ajusta su aspecto y lo coloca en la página.
 Además, esta vista, define un 
\shape italic
script
\shape default
 que permite mostrar y ocultar la descripción de las diferentes máquinas
 virtuales según se encuentren seleccionadas o no.
\end_layout

\begin_layout Itemize
Una vez el usuario ha seleccionado alguna máquina virtual y ha pulsado el
 botón de arranque, el controlador extrae el identificador de la máquina
 virtual y pide al conector que arranque dicha máquina.
 El conector devuelve los parámetros de conexión, los cuales son enviados
 como variable en la redirección a la página 
\family typewriter
vncPage
\family default
, la cual es creada en una nueva pestaña.
\end_layout

\begin_layout Itemize
Llegados al controlador 
\family typewriter
vncClient
\family default
 y a su sección única 
\family typewriter
vncPage
\family default
, se extrae la variable con la información de conexión y se devuelve como
 resultado de la función.
\end_layout

\begin_layout Itemize
La vista asociada a este controlador (
\family typewriter
vncClient/vncPage.html
\family default
) recibe los datos de conexión y ejecuta 
\family typewriter
noVNC
\family default
, el cual se encarga de mostrar el escritorio de trabajo por pantalla.
\end_layout

\begin_layout Standard
La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Secuencia-de-arranque"

\end_inset

 muestra un diagrama de secuencia con todo este proceso.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaSecuenciaArranqueMVWeb.pdf
	scale 70
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Secuencia de arranque de una máquina virtual.
\begin_inset CommandInset label
LatexCommand label
name "fig:Secuencia-de-arranque"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Flujo de ejecución de creación de una máquina virtual
\end_layout

\begin_layout Standard
A continuación se explicarán cada una de las acciones que deberá realizar
 la web para poder ejecutar otra de las funcionalidades más importantes
 del sistema, la creación de máquinas virtuales por parte del profesor a
 partir de máquinas creadas previamente.
\end_layout

\begin_layout Standard
Una vez que el profesor haya accedido a la web de CygnusCloud:
\end_layout

\begin_layout Itemize
Se ejecuta la secuencia de inicio de sesión por parte del controlador 
\family sans
Main
\family default
 de forma similar a como se especifico en los tres primeros puntos del apartado
 anterior.
\end_layout

\begin_layout Itemize
Una vez iniciada la sesión , al ser el usuario del tipo profesor, será redirecci
onado a la función 
\family sans
runVM
\family default
 , dentro del controlador 
\family sans
teacher
\family default
.
\end_layout

\begin_layout Itemize
El profesor pulsará en la barra de menú sobre la opción 
\family typewriter
crear nueva máquina
\family default
, dentro de la sección 
\family typewriter
crear y editar
\family default
.
 En este momento la función se redirecciona a la función 
\family sans
createAndEdit
\family default
 con el estado 
\family sans
createVanillaVM
\family default
 como variable pasada por parámetro.
\end_layout

\begin_layout Itemize
En la función 
\family sans
createAndEdit
\family default
, se comprueba el valor de la variable de estado, se crean los formularios
 asociados y se devuelven como resultado de la función.
\end_layout

\begin_layout Itemize
El fichero html asociado (
\family typewriter
teacher/createVanillaVM.html
\family default
) recibe ambos formularios, aplica el aspecto correspondiente y los coloca
 en la página.
\end_layout

\begin_layout Itemize
En este momento el profesor indica un nombre y una descripción para la máquina
 virtual que quiere crear.
 Después selecciona una de las posibles imágenes base que se le ofrecen
 teniendo en cuenta el consumo de recursos requerido por cada una.
 Es posible filtrar las imágenes por el sistema operativa y la variante
 que tienen instalados por defecto.
 una vez rellenado todos los campos y seleccionada la imagen base, se pulsa
 sobre 
\family typewriter
crear máquina virtual
\family default
.
\end_layout

\begin_layout Itemize
En este momento, la función recopila la información introducida por el profesor,
 comprueba que no se haya cometido ningún error y llama a la función 
\family sans
createImage
\family default
 del conector con esta información.
\end_layout

\begin_layout Itemize
La función 
\family sans
createImage
\family default
 envía la petición al sistema y en caso de no producirse ningún error directo,
 indica a la web que la petición ha sido enviada.
\end_layout

\begin_layout Itemize
Si todo sale bien en el proceso de creación, el profesor podrá comenzar
 a editar dicha máquina en la página de edición dentro de la sección 
\family typewriter
crear y editar
\family default
, tal y como se explica en el flujo de ejecución del apartado siguiente.
\end_layout

\begin_layout Subsubsection
Seguridad
\end_layout

\begin_layout Standard
Con respecto a la seguridad, web2py se centra en resolver los 10 principales
 problemas de seguridad definidos por OWASP (Proyecto de Seguridad de Aplicacion
es Web Abiertas), una comunidad mundial libre enfocada en la mejora de la
 seguridad de aplicaciones de software
\begin_inset CommandInset citation
LatexCommand cite
key "OWASP"

\end_inset

.
\end_layout

\begin_layout Standard
En términos generales, estos 10 problemas son:
\end_layout

\begin_layout Itemize
Cross Site Scripting (XSS)
\end_layout

\begin_layout Itemize
inyecciones SQL
\end_layout

\begin_layout Itemize
Ejecución de archivos maliciosos
\end_layout

\begin_layout Itemize
Referencia directa a objetos
\end_layout

\begin_layout Itemize
Cross Site Request Forgery (CSRF)
\end_layout

\begin_layout Itemize
Fugas de información y manejo de errores inapropiado
\end_layout

\begin_layout Itemize
Administración de sesiones y autentificación
\end_layout

\begin_layout Itemize
Almacenamiento criptográfico inseguro
\end_layout

\begin_layout Itemize
Comunicaciones inseguras
\end_layout

\begin_layout Itemize
Restricciones de acceso URL
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Sección sobre el conector
\end_layout

\end_inset


\end_layout

\begin_layout Section
Vista de procesos
\end_layout

\begin_layout Section
Vista de despliegue
\end_layout

\begin_layout Section
Vista de implementación
\end_layout

\end_body
\end_document
