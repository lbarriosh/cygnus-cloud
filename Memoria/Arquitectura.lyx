#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Arquitectura del sistema
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: meter referencias noVNC, KVM y Twisted
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
En este capítulo presentaremos una visión general de la arquitectura de
 
\emph on
CygnusCloud
\emph default
.
 Para facilitar su comprensión, hemos intentado que la claridad prevalezca
 a la hora de exponer los distintos conceptos y decisiones de diseño.
 Por ello, evitaremos a toda costa realizar descripciones exhaustivas de
 todas y cada una de las clases y de sus distintos atributos.
 Si el lector desea conocer con total precisión qué atributos y qué métodos
 tiene cada clase, cómo se comporta cierto método o cuál es la finalidad
 de un determinado atributo, le remitimos al código fuente, extensamente
 comentado.
\end_layout

\begin_layout Standard
Por otra parte, en este capítulo también prestaremos especial atención a
 las decisiones de diseño que hemos tomado ya que, a nuestro parecer, son
 fundamentales para comprender el funcionamiento del sistema, sus ventajas
 y sus limitaciones.
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
Los contenidos de este capítulo se agrupan en las siguientes secciones:
\end_layout

\begin_layout Enumerate
La presente 
\series bold
introducción
\series default
.
\end_layout

\begin_layout Enumerate

\series bold
Objetivos de la arquitectura y restricciones
\series default
.
 En esta sección expondremos todos los objetivos que se tuvieron al diseñar
 
\emph on
CygnusCloud
\emph default
, y también recopilaremos las restricciones con las que hemos tenido que
 tratar a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Enumerate

\series bold
Decisiones de diseño
\series default
.
 En esta sección justificaremos las decisiones más relevantes que hemos
 tomado en el proceso de diseño.
\end_layout

\begin_layout Enumerate

\series bold
Vista lógica
\series default
.
 En esta sección, mostraremos cómo las funciones de cada subsistema se distribuy
en entre sus distintos módulos con la ayuda de un diagrama de paquetes.
 Además, utilizaremos diagramas de clase y diagramas de secuencia para exponer
 las responsabilidades de cada elemento significativo de la arquitectura
 y sus relaciones con el resto de componentes de la misma.
\end_layout

\begin_layout Enumerate

\series bold
Vista de procesos
\series default
.
 En ella mostraremos el funcionamiento de cada subsistema desde el punto
 de vista de los procesos ligeros o 
\emph on
threads
\emph default
, y también discutiremos el cometido de los mismos.
\end_layout

\begin_layout Enumerate

\series bold
Vista de despliegue
\series default
.
 En esta sección mostraremos cómo se distribuyen los distintos subsistemas
 que forman parte de 
\emph on
CygnusCloud
\emph default
 entre las distintas máquinas que forman parte de la infraestructura utilizada.
\end_layout

\begin_layout Enumerate

\series bold
Vista de implementación
\series default
.
 Concluiremos el presente capítulo con esta sección, en la que describiremos
 los componentes que se distribuyen con cada subsistema.
\end_layout

\begin_layout Subsection
Sobre los diagramas UML de este documento
\end_layout

\begin_layout Standard
Para que el aumento del tamaño de los diagramas UML en un lector de ficheros
 PDF no suponga una pérdida de calidad de los mismos, hemos procurado incrustarl
os en este documento como ficheros 
\family typewriter
.pdf
\family default
.
\end_layout

\begin_layout Standard
El comando de 
\emph on
IBM Rational Software Architect 7.5
\emph default
 que los genera usa degradados para mejorar la presentación de los diagramas,
 haciendo que los elementos que aparecen en la parte superior del diagrama
 sean más oscuros que los que aparecen en la parte inferior del mismo.
 En cualquier caso, este efecto 
\emph on
no
\emph default
 tiene asociado ningún tipo de significado en los diagramas.
\end_layout

\begin_layout Section
Objetivos de la arquitectura y restricciones
\end_layout

\begin_layout Standard
En esta sección describiremos todos los objetivos que consideramos a la
 hora de diseñar la arquitectura, así como las restricciones que hemos tenido
 en cuenta a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Subsection
Objetivos 
\begin_inset CommandInset label
LatexCommand label
name "sub:Objetivos-arquitectura"

\end_inset


\end_layout

\begin_layout Standard
Con 
\emph on
CygnusCloud
\emph default
 queremos hacer posible que cualquier estudiante de la Universidad Complutense,
 sea de la titulación que sea, pueda sacar el máximo partido a cualquier
 aula de informática infrautilizada del campus.
 Para ello, es necesario que
\end_layout

\begin_layout Itemize
el sistema pueda atender a más alumnos utilizando más servidores y más ancho
 de banda.
 Por tanto, la 
\emph on
escalabilidad
\emph default
 debe considerarse en el diseño.
\end_layout

\begin_layout Itemize
los alumnos y profesores puedan utilizar 
\emph on
CygnusCloud
\emph default
 sin necesidad de instalar ningún 
\emph on
software
\emph default
 adicional en las aulas de informática.
 De no ser así, no es posible aprovechar los equipos de las aulas que no
 tienen instalado el 
\emph on
software
\emph default
 adicional.
\end_layout

\begin_layout Standard
Además, dada la actual situación de crisis económica, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con 
\emph on
coste cero
\emph default
.
 Para ello,
\end_layout

\begin_layout Itemize
debemos utilizar exclusivamente software gratuito, y
\end_layout

\begin_layout Itemize
el 
\emph on
software
\emph default
 debe ejecutarse sobre servidores antiguos.
 Así, resulta imprescindible que el 
\emph on
software
\emph default
 sea tan eficiente como sea posible.
 
\end_layout

\begin_layout Standard
Por otra parte, el sistema sólo podrá utilizarse con garantías cuando detecte
 y trate un número suficiente de errores.
 Por ello, 
\emph on
el diseño debe contemplar y tratar el mayor número de errores posible
\emph default
.
\end_layout

\begin_layout Standard
Finalmente, dado que el desarrollo de 
\emph on
CygnusCloud 
\emph default
sólo se extiende a lo largo de un curso académico, también queremos que
 cualquiera que lo desee pueda continuarlo.
 Por ello, hemos procurado que nuestro diseño también se caracterice por
 su 
\emph on
simplicidad
\emph default
.
\end_layout

\begin_layout Subsection
Restricciones
\begin_inset CommandInset label
LatexCommand label
name "sub:Restricciones-arquitectura"

\end_inset


\end_layout

\begin_layout Standard
Tal y como mencionamos en el apartado 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Objetivos-arquitectura"

\end_inset

, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con coste cero, por lo que debemos construirlo utilizand
o 
\emph on
software
\emph default
 gratuito.
 Puesto que los hipervisores deben instalarse en un sistema operativo en
 concreto, que tiene que ser gratuito, esto ha impuesto la primera restricción
 importante: la 
\emph on
dependencia de la plataforma Linux
\emph default
.
 
\end_layout

\begin_layout Standard
Por otra parte, existe una ingente cantidad de distribuciones 
\emph on
Linux
\emph default
, que utilizan distintos sistemas de gestión de paquetes y distintos procedimien
tos de configuración.
 Para garantizar que 
\emph on
CygnusCloud
\emph default
 funciona correctamente en el mayor número posible de distribuciones 
\emph on
Linux
\emph default
, resulta fundamental utilizar mecanismos estándar para interactuar con
 los hipervisores y, a ser posible, lenguajes interpretados.
 Esto ha impuesto una doble restricción: 
\end_layout

\begin_layout Itemize
el uso obligatorio de la librería 
\emph on
libvirt 
\emph default
para interactuar con los hipervisores y configurar las redes virtuales,
 y
\end_layout

\begin_layout Itemize
el uso de un lenguaje de tipo interpretado, como Java o Python, como principal
 lenguaje de programación.
\end_layout

\begin_layout Standard
Además, la práctica totalidad de los 
\emph on
frameworks
\emph default
 que hemos evaluado al diseñar la web se basan en el modelo vista-controlador
 o en otros patrones de diseño derivados de él, lo que nos ha obligado a
 utilizar dicho patrón de diseño.
\end_layout

\begin_layout Standard
Finalmente, para reducir el tiempo de implementación de 
\emph on
CygnusCloud
\emph default
 resulta imprescindible que todos los subsistemas compartan tanta funcionalidad
 como sea posible.
 De esta manera, todos ellos utilizan el mismo código para realizar, entre
 otras cosas, operaciones básicas sobre una base de datos y comunicaciones
 a través de una red.
\end_layout

\begin_layout Standard
Pero esto sólo es posible si 
\emph on
todos los subsistemas se implementan utilizando el mismo lenguaje de programació
n
\emph default
, lo que ha restringido considerablemente el número de librerías y 
\emph on
frameworks 
\emph default
que hemos podido considerar.
\end_layout

\begin_layout Section
Decisiones de diseño
\end_layout

\begin_layout Subsection
Uso de una aplicación web para interactuar con 
\emph on
CygnusCloud
\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Objetivos-arquitectura"

\end_inset

 dijimos, entre otras cosas, que 
\emph on
CygnusCloud
\emph default
 debe poder utilizarse sin necesidad de instalar 
\emph on
software
\emph default
 adicional en las aulas de informática.
 Para ello, existen dos alternativas: crear una aplicación web o crear una
 aplicación de escritorio convencional que pueda utilizarse sin necesidad
 de ser instalada.
\end_layout

\begin_layout Standard
El uso de una aplicación de escritorio tiene una gran ventaja: no es necesario
 utilizar tecnologías web, totalmente desconocidas para nosotros al inicio
 del proyecto.
 No obstante, también tiene asociados algunos inconvenientes considerables:
\end_layout

\begin_layout Itemize
para utilizar 
\emph on
CygnusCloud
\emph default
 en móviles o tabletas es necesario crear una una aplicación específica,
 muy dependiente de la plataforma del dispositivo.
 
\end_layout

\begin_layout Itemize
puesto que los usuarios no tienen por qué descargarse siempre la aplicación
 antes de utilizar 
\emph on
CygnusCloud
\emph default
, es posible que convivan varias versiones de esta, lo que puede dar lugar
 a conflictos y, sobre todo, a problemas de seguridad.
 Para evitar todos estos problemas, es necesario crear un sistema de actualizaci
ones periódicas, por lo que el diseño y la implementación de la aplicación
 se complican.
\end_layout

\begin_layout Itemize
para poder enviar las peticiones al sistema, la aplicación necesita averiguar
 la dirección IP y el puerto de la máquina que las tratará.
 Para ello, existen dos alternativas: 
\end_layout

\begin_deeper
\begin_layout Itemize
incrustar estos datos en el código.
 Esto dificulta el cambio de la IP y el puerto de la máquina que tratará
 las peticiones.
\end_layout

\begin_layout Itemize
anunciarlos periódicamente a través de la red.
 Con esto, además de desperdiciar ancho de banda, estamos comprometiendo
 la seguridad del sistema, ya que cualquier usuario malintencionado podrá
 recibir estos mensajes.
\end_layout

\end_deeper
\begin_layout Itemize
aunque el tráfico viaje cifrado, cualquier usuario que utilice un analizador
 de tráfico podrá averiguar la dirección IP y el puerto de la máquina que
 trata sus peticiones, lo que facilita mucho la realización de ataques de
 denegación de servicio.
\end_layout

\begin_layout Standard
Por otra parte, al utilizar una aplicación web desaparecen muchos de estos
 inconvenientes, ya que
\end_layout

\begin_layout Itemize
para utilizar 
\emph on
CygnusCloud
\emph default
 en móviles o tabletas sólo es necesario introducir cambios en el 
\emph on
layout
\emph default
 o la disposición de elementos de la página.
\end_layout

\begin_layout Itemize
no es necesario descargar ningún programa en los PCs que usan los usuarios.
 Esto hace el sistema más fácil de usar (basta con utilizar un navegador
 web) y permite ahorrar ancho de banda.
\end_layout

\begin_layout Itemize
las actualizaciones son muy fáciles de aplicar: basta con parar el servidor
 web, copiar en él los ficheros binarios y reiniciarlo.
\end_layout

\begin_layout Itemize
aunque sigue siendo posible realizar ataques de denegación de servicio,
 estos sólo afectarán al servidor web y no a los servidores de la infraestructur
a, por lo que esta seguirá procesando las peticiones ya recibidas correctamente.
\end_layout

\begin_layout Standard
Finalmente, el uso de una aplicación web tiene un serio inconveniente: debido
 a nuestra inexperiencia en este campo, es posible que no detectemos algunas
 alternativas para comprometer la seguridad del sistema.
 De todas formas, podemos considerar que la red troncal de la UCM es segura,
 por lo que este tipo de prácticas no serán muy frecuentes.
\end_layout

\begin_layout Subsection
Descomposición del sistema 
\emph on
CygnusCloud
\emph default
 en cuatro subsistemas
\begin_inset CommandInset label
LatexCommand label
name "sub:Descomposición-del-sistema"

\end_inset


\end_layout

\begin_layout Standard
Para atender las peticiones de los usuarios, en la infraestructura de 
\emph on
CygnusCloud
\emph default
 colaboran hasta cuatro subsistemas distintos.
 En esta sección, mostraremos, de forma general, las responsabilidades de
 cada uno de ellos.
 Además, también expondremos los motivos que nos llevaron a hacer esta descompos
ición.
\end_layout

\begin_layout Subsubsection
Los servidores de máquinas virtuales
\end_layout

\begin_layout Standard
Instanciar una máquina virtual requiere muchos recursos.
 No basta con asignarle memoria RAM y tiempo de CPU: también es necesario
 reservar espacio en disco en el que almacenar los datos de los usuarios
 y los archivos de paginación.
 
\end_layout

\begin_layout Standard
Por muy potente que sea el 
\emph on
hardware 
\emph default
del servidor que alojará las máquinas virtuales, el número máximo de máquinas
 virtuales estará siempre limitado.
 Por tanto, la única forma de superar esta limitación y aumentar el número
 de máquinas virtuales que pueden estar activas a la vez es utilizando varios
 servidores para albergarlas.
\end_layout

\begin_layout Standard
Por otra parte, el arranque y la creación o edición de máquinas virtuales
 son operaciones que requieren mucha entrada/salida.
 Para garantizar que el tiempo de respuesta del sistema es adecuado, lo
 más conveniente es que los nodos que albergan máquinas virtuales se dediquen
 a ello en exclusiva.
 De ahora en adelante, llamaremos 
\series bold
servidores de máquinas virtuales
\series default
 a los nodos que albergan exclusivamente máquinas virtuales.
\end_layout

\begin_layout Standard
Es importante notar que, una vez creadas las las máquinas virtuales, el
 servidor VNC que utilizarán los usuarios para interactuar con ellas reside
 en el propio servidor de máquinas virtuales, por lo que el tráfico VNC
 circulará exclusivamente entre los PCs de los usuarios y los servidores
 de máquinas virtuales.
 Además, el tráfico que los usuarios generan para conectarse a internet
 se vuelca directamente a la red, es decir, no atraviesa ninguna otra máquina
 de la infraestructura de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Subsubsection
El repositorio de imágenes
\end_layout

\begin_layout Standard
Los usuarios sólo pueden arrancar, crear y editar máquinas virtuales cuando
 sus imágenes de disco están desplegadas en un servidor de máquinas virtuales.
 No obstante, hay imágenes de disco que no deben estar desplegadas en ningún
 servidor de máquinas virtuales.
 Este es el caso de
\end_layout

\begin_layout Itemize
las imágenes 
\emph on
vanilla
\emph default
, que sólo tienen el sistema operativo configurado con los programas más
 básicos instalados, y
\end_layout

\begin_layout Itemize
las imágenes que no han terminado de editarse.
 
\end_layout

\begin_layout Standard
Estas imágenes no están completamente configuradas, por lo que ningún alumno
 las podrá arrancar.
 Así, su presencia en un servidor de máquinas virtuales supone un desperdicio
 de espacio en disco.
\end_layout

\begin_layout Standard
Además, para simplificar la administración del sistema no resulta conveniente
 que las imágenes de disco se dispersen entre múltiples máquinas.
 Si existe una máquina que almacena una copia de todas las imágenes de disco
 existentes, para modificar todas las copias existentes de una de ellas
 sólo será necesario acudir a esta máquina, modificar los ficheros correspondien
tes y volver a desplegar la imagen de disco.
\end_layout

\begin_layout Standard
Esta máquina, a la que llamaremos 
\series bold
repositorio de imágenes
\series default
, almacenará una copia de todas las imágenes de disco existentes.
 Es importante notar que la única copia de las imágenes 
\emph on
vanilla
\emph default
 y de las imágenes de disco que se están editando se encuentra en el repositorio
 de imágenes.
\end_layout

\begin_layout Subsubsection
El servidor de 
\emph on
cluster
\end_layout

\begin_layout Standard
En un momento dado, varios servidores de máquinas virtuales pueden albergar
 una nueva instancia de cierta máquina virtual.
 Ahora bien, no todos ellos tienen por qué encontrarse en las mismas condiciones.
\end_layout

\begin_layout Standard
Por ejemplo, si los servidores 
\family sans
A
\family default
 y 
\family sans
B
\family default
 pueden albergar una nueva instancia de la máquina virtual 
\family sans
Debian-LSO
\family default
 y el servidor 
\family sans
A
\family default
 alberga más instancias que el servidor 
\family sans
B
\family default
, la experiencia del usuario mejorará si alojamos la nueva instancia la
 nueva instancia en el servidor 
\family sans
B
\family default
.
\end_layout

\begin_layout Standard
Por tanto, necesitamos utilizar una máquina que
\end_layout

\begin_layout Itemize
averigüe periódicamente el estado de todos los servidores de máquinas virtuales
 y del repositorio de imagenes,
\end_layout

\begin_layout Itemize
al atender las peticiones del usuario, compruebe que estas se pueden satisfacer.
 Esto resulta fundamental para ahorrar ancho de banda.
 
\end_layout

\begin_deeper
\begin_layout Standard
Por ejemplo, si el repositorio de imágenes no tiene suficiente espacio en
 disco para alojar una nueva máquina virtual, no tiene sentido transferir
 sus imágenes de disco a un servidor de máquinas virtuales y configurar
 en él la máquina virtual, ya que estas no podrán subirse al repositorio
 de imágenes.
\end_layout

\end_deeper
\begin_layout Itemize
realice el balanceado de carga entre todos los servidores de máquinas virtuales.
\end_layout

\begin_layout Standard
Además, para facilitar la administración del sistema, esta máquina también
 se ocupará de arrancar, parar, dar de alta y borrar servidores de máquinas
 virtuales.
 De ahora en adelante, llamaremos a esta máquina 
\series bold
servidor de 
\emph on
cluster
\series default
.
\end_layout

\begin_layout Standard
Como el lector habrá notado ya, este diseño tiene un serio inconveniente:
 el servidor de 
\emph on
cluster
\emph default
 se convierte un cuello de botella que limita el número máximo de servidores
 de máquinas virtuales.
 
\end_layout

\begin_layout Standard
Para superar esta limitación, podemos crear varias agrupaciones (
\emph on
clusters
\emph default
) de servidores de máquinas virtuales, cada una de las cuales tendrá asociado
 su propio servidor de 
\emph on
cluster
\emph default
 y su propio repositorio de imágenes.
 De esta manera, para atender a un número mayor de usuarios bastará con
 utilizar más 
\emph on
clusters
\emph default
.
 
\end_layout

\begin_layout Standard
Finalmente, es importante notar que cada 
\emph on
cluster
\emph default
 es completamente autónomo, por lo que no tiene por qué compartir máquinas
 virtuales con otros 
\emph on
clusters
\emph default
.
\end_layout

\begin_layout Subsubsection
El servidor web
\end_layout

\begin_layout Standard
Como los servidores de 
\emph on
cluster
\emph default
 son ya un cuello de botella y puede haber varios, la página web de 
\emph on
CygnusCloud
\emph default
 no puede residir en ninguno de ellos.
 Además, por motivos de eficiencia, los servidores de 
\emph on
cluster
\emph default
 no realizan ningún tipo de control de acceso, por lo que no pueden atender
 directamente las peticiones de los usuarios.
 
\end_layout

\begin_layout Standard
Así pues, es necesario utilizar una máquina adicional, el 
\series bold
servidor web
\series default
, para alojar la página web de 
\emph on
CygnusCloud
\emph default
.
 A través de ella,
\end_layout

\begin_layout Itemize
se realizará el control de acceso,
\end_layout

\begin_layout Itemize
se enviarán las peticiones de los usuarios a un servidor de 
\emph on
cluster
\emph default
, y
\end_layout

\begin_layout Itemize
se administrará el sistema.
\end_layout

\begin_layout Subsection
Implementación de una infraestructura 
\emph on
ad-hoc
\end_layout

\begin_layout Standard
Para realizar la gestión de las máquinas de la infraestructura podemos utilizar
 soluciones gratuitas como 
\emph on
OpenStack 
\emph default
y 
\emph on
OpenNebula.
\end_layout

\begin_layout Standard
Muchas organizaciones utilizan estas soluciones para gestionar 
\emph on
clouds
\emph default
 de gran tamaño.
 Además, 
\emph on
OpenStack 
\emph default
y 
\emph on
OpenNebula.

\emph default
 implementan toda la funcionalidad que necesitamos en lo que a la gestión
 de máquinas virtuales se refiere: arranques y apagados, despliegues, borrados,\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
No obstante, hemos preferido diseñar e implementar una infraestructura 
\emph on
ad-hoc
\emph default
 por las siguientes razones:
\end_layout

\begin_layout Itemize

\emph on
OpenStack
\emph default
 y 
\emph on
OpenNebula
\emph default
 proporcionan muchas funciones a costa de consumir muchos recursos.
 Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Objetivos-arquitectura"

\end_inset

, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con coste cero, y para ello es imprescindible que
 consuma muy pocos recursos.
 Esto nos permite aprovechar servidores antiguos para implantar 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Itemize

\emph on
OpenStack
\emph default
 y 
\emph on
OpenNebula
\emph default
 son excesivamente grandes.
 Sólo hemos tenido un curso académico para desarrollar 
\emph on
CygnusCloud
\emph default
, y aprender a utilizar estas soluciones nos habría llevado fácilmente la
 mitad de él.
 
\end_layout

\begin_layout Itemize
al implantar una infraestructura 
\emph on
ad-hoc
\emph default
, hemos podido descubrir por nosotros mismos qué hace falta para suministrar
 un servicio del tipo infraestructura como servicio.
 Así, nos hemos familizarizado con muchas de las tecnologías de virtualización
 existentes en el mercado.
 
\end_layout

\begin_deeper
\begin_layout Standard
Además, puesto que ya sabemos qué es necesario hacer en muchos casos, el
 tiempo que tardemos en familiarizarnos con 
\emph on
OpenStack
\emph default
 y 
\emph on
OpenNebula
\emph default
 en el futuro será menor.
\end_layout

\end_deeper
\begin_layout Subsection
Uso del gestor de bases de datos MariaDB
\end_layout

\begin_layout Standard
MySQL y MariaDB son los dos gestores de bases de datos relacionales gratuitos
 más completos del mercado.
 Por ello, en su momento decidimos utilizar uno de ellos para manipular
 las bases de datos de todos los servidores de la infraestructura.
\end_layout

\begin_layout Standard
MariaDB es un 
\emph on
fork
\emph default
 de la versión 5.5 de MySQL, por lo que es compatible a nivel binario con
 ella.
 En principio, estos dos sistemas pueden parecer iguales, pero no lo son.
\end_layout

\begin_layout Standard
Tras la compra de Sun Microsystems por parte de Oracle en 2009, el desarrollo
 de MySQL se ha ido abandonando de forma progresiva, y en la actualidad
 todo parece indicar que Oracle va a dejar de dar soporte al proyecto.
\end_layout

\begin_layout Standard
En cambio, el desarrollo de MariaDB se ha intensificado mucho en los últimos
 meses, y cada vez más organizaciones pasan a utilizarlo, por lo que el
 soporte de MariaDB es ya igual o incluso mejor que el de MySQL.
 
\end_layout

\begin_layout Standard
Además, MariaDB es totalmente compatible con la sintaxis de MySQL y permite
 utilizar los propios conectores de MySQL para interactuar con las bases
 de datos.
 
\end_layout

\begin_layout Standard
Por todas estas razones, hemos decidido utilizar MariaDB en lugar de MySQL.
\end_layout

\begin_layout Subsection
Uso de 
\emph on
Python
\emph default
 como principal lenguaje de programación
\end_layout

\begin_layout Standard
Tal y como mencionamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, debido a las distintas características y procedimientos de configuración
 de las distribuciones 
\emph on
Linux
\emph default
, es altamente recomendable utilizar lenguajes interpretados para facilitar
 la portabilidad del sistema.
 Los lenguajes de este tipo que consideramos al inicio del proyecto fueron
 esencialmente dos: 
\emph on
Java
\emph default
 y 
\emph on
Python
\emph default
.
 
\end_layout

\begin_layout Standard
El uso de 
\emph on
Python 
\emph default
tenía las siguientes ventajas:
\end_layout

\begin_layout Itemize
el grado de adopción de 
\emph on
Python
\emph default
 no ha hecho más que crecer a lo largo de los últimos años, por lo que aprender
 a utilizarlo era muy importante para mejorar nuestras perspectivas laborales.
\end_layout

\begin_layout Itemize
a diferencia de 
\emph on
Java
\emph default
, 
\emph on
Python
\emph default
 es 
\emph on
software
\emph default
 libre, por lo que sus restricciones de uso son considerablemente menores
 que las de 
\emph on
Java
\emph default
.
\end_layout

\begin_layout Itemize
la interacción entre 
\emph on
scripts
\emph default
 y programas escritos en 
\emph on
Python
\emph default
 es claramente mejor en 
\emph on
Python
\emph default
 que en Java.
\end_layout

\begin_layout Itemize
los programas escritos en 
\emph on
Python
\emph default
 son mucho más breves y más fáciles de leer que los programas escritos en
 
\emph on
Java
\emph default
, lo que facilita la comprensión del código.
 
\end_layout

\begin_layout Itemize
para ejecutar un programa 
\emph on
Python
\emph default
 se utiliza su propio código fuente, lo que facilita enormemente la resolución
 de los problemas que aparecen al utilizar componentes de terceros.
\end_layout

\begin_layout Itemize

\emph on
Python
\emph default
 forma parte de la instalación estándar de la inmensa mayoría de distribuciones
 
\emph on
GNU/Linux
\emph default
, lo que simplifica el proceso de instalación de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Standard
Los grandes inconvenientes del uso de 
\emph on
Python
\emph default
 eran principalmente dos:
\end_layout

\begin_layout Itemize
era necesario aprender a utilizar un lenguaje totalmente nuevo para nosotros,
 cosa que no ocurría en el caso de 
\emph on
Java
\emph default
.
\end_layout

\begin_layout Itemize
en general, hay muchas más bibliotecas y 
\emph on
frameworks
\emph default
 escritos en 
\emph on
Java
\emph default
 que escritos en 
\emph on
Python
\emph default
, lo que limitaba las alternativas que podíamos considerar a lo largo del
 desarrollo del proyecto.
\end_layout

\begin_layout Standard
Ante el gran número de ventajas que tenía el uso de 
\emph on
Python
\emph default
, estos dos inconvenientes nos parecieron aceptables, por lo que decidimos
 utilizar 
\emph on
Python
\emph default
 como el principal lenguaje de programación de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Subsection
Uso del hipervisor KVM
\end_layout

\begin_layout Subsection
Uso de la librería de virtualización 
\emph on
libvirt
\emph default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-de-libvirt"

\end_inset


\end_layout

\begin_layout Standard
Para utilizar una máquina virtual no basta con crearla: también hay que
 conectarla a una red virtual, a través de la cual su usuario podrá acceder
 a internet.
\end_layout

\begin_layout Standard
Ahora bien, tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, cada distribución
\emph on
 Linux
\emph default
 tiene sus propios procedimientos de configuración por lo que, aunque utilicemos
 el mismo hipervisor, la forma de crear las máquinas y redes virtuales será
 distinta.
\end_layout

\begin_layout Standard
Por otra parte, no es conveniente interactuar directamente con el hipervisor
 ya que, si pasamos a utilizar otro distinto, será necesario introducir
 muchas modificaciones.
 Para superar estas limitaciones, creamos las redes virtuales e interactuamos
 con el hipervisor a través de una librería, 
\emph on
libvirt
\emph default
.
\end_layout

\begin_layout Standard

\emph on
Libvirt
\emph default
 es la librería por excelencia, que nos permite no solo comunicarnos con
 KVM, si no con muchos otros sistemas de virtualización
\begin_inset CommandInset citation
LatexCommand cite
key "LibvirtSupported"

\end_inset

.
 La comunicación nos permite las siguientes operaciones, tanto para las
 máquinas como las redes y el almacenamiento virtual: configurar, encender
 y apagar.
 Las confguraciones nos permite hacerlas mediante un archivo XML y dado
 lo extendida que está esta tecnología, nos permite modificarlo fácilmente,
 para modificar los datos únicos de cada máquina.
 Además esta librería avisa mediante eventos cuando una máquina cambia de
 estado, esto es, se enciende, se apaga, se reinicia\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Y por último, aunque 
\emph on
libvirt
\emph default
 está escrita en 
\emph on
C
\emph default
 hay 
\emph on
bindings
\emph default
 a muchos otros lenguajes entre los que se encuentra 
\emph on
Python
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "LibvirtBindings"

\end_inset

.
\end_layout

\begin_layout Subsection
Uso de la librería de red 
\emph on
twisted
\emph default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-de-twisted"

\end_inset


\end_layout

\begin_layout Standard
Puesto que 
\emph on
CygnusCloud
\emph default
 se compone de sistemas diferentes que residen en máquinas distintas, es
 imprescindible comunicarlos.
 Puesto que las máquinas intercambian entre sí un gran volumen de datos,
 es muy conveniente utilizar un servicio orientado a conexión y fiable:
 TCP.
\end_layout

\begin_layout Standard
Para realizar las comunicaciones 
\emph on
socket 
\emph default
a 
\emph on
socket
\emph default
, optamos por utilizar la librería de red 
\emph on
twisted
\emph default
, que se basa en eventos y está íntegramente escrita en Python.
 Las razones que nos llevaron a elegirla fueron las siguientes:
\end_layout

\begin_layout Itemize

\emph on
twisted 
\emph default
es el estándar 
\emph on
de facto
\emph default
 para comunicar programas escritos en 
\emph on
Python
\emph default
 sin necesidad de manipular 
\emph on
sockets
\emph default
 directamente, y forma parte de la instalación predeterminada de la mayoría
 de distribuciones 
\emph on
GNU/Linux
\emph default
 (e incluso de 
\emph on
Mac OS X
\emph default
).
\end_layout

\begin_layout Itemize
existen libros, una ingente cantidad de documentación, foros y tutoriales
 con abundantes explicaciones de uso.
\end_layout

\begin_layout Itemize
se trata de una librería de código abierto, distribuida bajo licencia MIT
 y actualizada periódicamente.
\end_layout

\begin_layout Itemize
proporciona toda la funcionalidad que hemos utilizado a lo largo del desarrollo
 del proyecto.
\end_layout

\begin_layout Standard
El gran inconveniente de esta librería es su propia documentación.
 Debido a su enorme extensión, hay partes desactualizadas, partes que contradice
n a otras, partes sin apenas documentar\SpecialChar \ldots{}
 por lo que en la práctica su uso
 requiere seguir el método de prueba y error.
\end_layout

\begin_layout Standard
No obstante, tal y como expusimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, para facilitar la portabilidad entre distribuciones 
\emph on
GNU/Linux 
\emph default
es imprescindible utilizar mecanismos estandarizados, por lo que nos acabamos
 decantando por utilizar esta librería.
\end_layout

\begin_layout Subsection
Cifrado selectivo del tráfico
\end_layout

\begin_layout Standard
El tráfico que genera el sistema 
\emph on
CygnusCloud
\emph default
 puede clasificarse en dos grupos:
\end_layout

\begin_layout Itemize
tráfico generado por el protocolo de escritorio remoto VNC.
 Se trata del tráfico mayoritario, y permite a los usuarios manipular sus
 máquinas virtuales utilizando las interfaces gráficas a las que están acostumbr
ados.
\end_layout

\begin_layout Itemize
tráfico generado por los protocolos de 
\emph on
CygnusCloud
\emph default
.
 Este tráfico es minoritario, y se genera al procesar peticiones como la
 instanciación y destrucción de máquinas virtuales, la recopilación de estadísti
cas dentro de los distintos 
\emph on
clusters
\emph default
, \SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Considerando que la red de la UCM es ya de por sí segura, no sería necesario
 cifrar el tráfico.
 No obstante, para garantizar el correcto funcionamiento del sistema 
\emph on
CygnusCloud
\emph default
, todas las comunicaciones salvo las conexiones a escritorio remoto están
 protegidas mediante cifrado SSL.
 Esto nos permite:
\end_layout

\begin_layout Itemize
ahorrar ancho de banda.
 Como el tráfico mayoritario está sin cifrar, es posible utilizar el ancho
 de banda para soportar más conexiones a escritorio remoto (y, por tanto,
 dar servicio a un mayor número de usuarios).
\end_layout

\begin_layout Itemize
monitorizar fácilmente las actividades que realizan los usuarios en sus
 máquinas virtuales.
\end_layout

\begin_layout Itemize
aumentar la robustez del sistema frente a ataques desde la propia red de
 la UCM.
 Gracias al cifrado de los datos generados por los protocolos, lo único
 que un atacante puede controlar con facilidad es una única máquina virtual,
 pero no la infraestructura de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Subsection
Uso del 
\emph on
framework
\emph default
 
\emph on
web2py
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-web2py"

\end_inset


\end_layout

\begin_layout Standard
Web2py es una plataforma web de código abierto (licencia GPL versión 2)
 que permite un ágil desarrollo de aplicaciones web seguras, gestionadas
 por medio de bases de datos.
 Esta escrito y es programable en python y contiene todos los componentes
 necesarios para construir aplicaciones completamente funcionales.
\end_layout

\begin_layout Standard
Al ser un framework web, web2py ofrece un rígido diseño de cara a la seguridad.
 Así, es capaz de resolver ciertas vulnerabilidades de forma automática
 siguiendo unas prácticas bien establecidas.
 Por ejemplo, web2py gestiona automáticamente el formateo de las entradas
 y salidas, aplica acciones de encriptado en los ficheros subidos y controla
 el área de maniobra de los desarrolladores de cara a la seguridad del sistema.
\end_layout

\begin_layout Standard
Además web2py ofrece una capa de abstracción de base de datos (DAL por su
 acrónimo inglés), que genera código SQL de forma transparente al modelo
 de gestión de datos utilizado (SQLite, MySQL, PostgreSQL, Oracle ...).
\end_layout

\begin_layout Subsubsection*
Modelo Vista-Controlador
\end_layout

\begin_layout Standard
Web2py fuerza al desarrollador a utilizar unas buenas prácticas de ingeniería
 del software, evitando la repetición de código en la medida de lo posible
 y estandarizando la manera de hacer las cosas.
 
\end_layout

\begin_layout Standard
Por ello, este framework utiliza un modelo Vista-Controlador que incentiva
 al desarrollador a separar la forma de representar los datos (la vista)
 y el flujo de trabajo de la aplicación (el controlador).
 Este modelo ofrece una estructura modular que permite aislar los posibles
 errores en una sección de código concreta y trabajar en paralelo de forma
 independiente, reduciendo así los posibles tiempos de espera en el desarrollo
 de la web.
\end_layout

\begin_layout Standard
El flujo de trabajo típico de una petición web2py viene representado en
 el diagrama 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagram-web2py"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaSecuenciaWeb2py.png
	scale 50
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagram-web2py"

\end_inset

Diagrama de secuencia web2py
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
En el diagrama podemos destacar los siguientes elementos:
\end_layout

\begin_layout Itemize
El navegador, a partir del cual el usuario se conectará a la web.
\end_layout

\begin_layout Itemize
El servidor, puede ser el servidor incluido en web2py o un servidor de terceros,
 tal como Apache.
\end_layout

\begin_layout Itemize
La aplicación principal, encargada de realizar todas las tareas comunes
 tal y como la gestión de cookies, sesiones, transacciones y enrutamiento.
\end_layout

\begin_layout Itemize
Los modelos, vistas y controladores que componen la aplicación del desarrollador.
\end_layout

\begin_layout Itemize
La Base de datos que se encargará de almacenar la información utilizada
 por la web.
\end_layout

\begin_layout Standard
Todas las llamadas se encierran en una transacción.
 Cualquier excepción no contemplada hace que la transacción se cancele.
 
\end_layout

\begin_layout Standard
Con web2py es posible registrar tareas recurrentes para ejecutarse en horas
 específicas y/o después de determinadas acciones.
 También es posible alojar varias aplicaciones en una misma instancia.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Web2PyBook"

\end_inset


\end_layout

\begin_layout Subsubsection*
Ventajas
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Esto no se si irá aquí o se meterá en otro apartado
\end_layout

\begin_layout Plain Layout
INICIO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las principales razones por las cuales hemos decidido utilizar web2py frente
 a otros frameworks web basados en python tales como Django o Grok son:
\end_layout

\begin_layout Itemize
Ofrece una estructura sencilla que permite a los usuarios aprender sobre
 el desarrollo web sin comprometer la funcionalidad del sistema.
 Por esta razón, web2py no requiere instalación ni configuración, no tiene
 dependencias, y expone la mayor parte de su funcionalidad a través de una
 interfaz de navegador web.
\end_layout

\begin_layout Itemize
Se ha mantenido estable desde el primer día, ofreciendo un diseño de arriba
 a abajo que asegura una total compatibilidad con respecto a aplicaciones
 que fueron realizadas utilizando versiones anteriores.
\end_layout

\begin_layout Itemize
Ataca de manera pro activa las cuestiones de seguridad más relevantes en
 las aplicaciones web modernas.
\end_layout

\begin_layout Itemize
Ofrece interfaces administrativas para simplificar la creación y gestión
 de las bases de datos (appAdmin) y la interacción de las diferentes vistas
 y controladores.
\end_layout

\begin_layout Itemize
Es ligero.
 Todas las librerías y código necesario para desarrollar aplicaciones ocupa
 en torno a 2 MB.
\end_layout

\begin_layout Itemize
Es rápido, ofreciendo una velocidad un 30% superior que un servidor Apache
 medio.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
FIN
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Seguridad
\end_layout

\begin_layout Standard
Con respecto a la seguridad, web2py se centra en resolver los 10 principales
 problemas de seguridad definidos por OWASP (Proyecto de Seguridad de Aplicacion
es Web Abiertas), una comunidad mundial libre enfocada en la mejora de la
 seguridad de aplicaciones de software
\begin_inset CommandInset citation
LatexCommand cite
key "OWASP"

\end_inset

.
\end_layout

\begin_layout Standard
En términos generales, estos 10 problemas son:
\end_layout

\begin_layout Itemize
Cross Site Scripting (XSS)
\end_layout

\begin_layout Itemize
inyecciones SQL
\end_layout

\begin_layout Itemize
Ejecución de archivos maliciosos
\end_layout

\begin_layout Itemize
Referencia directa a objetos
\end_layout

\begin_layout Itemize
Cross Site Request Forgery (CSRF)
\end_layout

\begin_layout Itemize
Fugas de información y manejo de errores inapropiado
\end_layout

\begin_layout Itemize
Administración de sesiones y autentificación rota
\end_layout

\begin_layout Itemize
Almacenamiento criptográfico inseguro
\end_layout

\begin_layout Itemize
Comunicaciones inseguras
\end_layout

\begin_layout Itemize
Restricciones de acceso URL
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
database
\end_layout

\begin_layout Standard
Este paquete contiene los módulos y scripts sql necesarios para la gestión
 de toda la información que es necesario almacenar y utilizar en CygnusCloud.
 Cada uno de estos tipos de archivos tendrán una finalidad concreta en la
 administración de información del sistema.
\end_layout

\begin_layout Standard
Como ya se dijo en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Descomposición-del-sistema"

\end_inset

, CygnusCloud se encuentra dividido en tres grandes subsistema independientes,
 capaces de ejecutarse en diferentes máquinas conectadas por la red.
 Por ello, resulta necesario que la gestión de la información en cada uno
 de estos subsistemas se haga de forma particular.
 Así, será necesario una base de dato independiente para cada subsistema,
 así como clases independientes para gestionar cada una de estas bases de
 datos.
 
\end_layout

\begin_layout Standard
En este apartado profundizaremos sobre estos aspectos del paquetes database.
\end_layout

\begin_layout Subsubsection
Tipo de ficheros
\end_layout

\begin_layout Standard
Como ya hemos mencionado, el paquete database no solo se encuentra compuesto
 por un conjunto de módulos python, sino también por algunos scripts sql.
 El uso de un tipo u otro de fichero dependerá del tipo de acción que se
 quiera realizar.
 Así:
\end_layout

\begin_layout Itemize
Los fichero sql son los encargados de definir y crear la estructura completa
 de las bases de datos.
 Existe un fichero sql por cada una de las bases de datos que son necesarias.
 Dentro de estos ficheros se incluyen la definición de las tablas que componen
 la base de datos, así como la información por defecto introducidas en las
 mismas.
\end_layout

\begin_layout Itemize
Los módulos python son los encargados de introducir, borrar y actualizar
 la información de las tablas definidas.
 Así, estos módulos contienen funciones que permiten realizar acciones particula
res con respecto a la base de datos concreta que debe manejar.
 Además de los módulos encargados del tratamiento de la información, este
 paquete también incluye algún módulo que permiten configurar las característica
s básicas y establecer la conexión con el sistema de gestión de bases de
 datos.
\end_layout

\begin_layout Subsubsection
Uso de mySql
\end_layout

\begin_layout Standard
Para poder realizar las consultas y actualizaciones en la base de datos
 hemos optado por utilizar el sistema mySql, el cual nos ofrece una sintaxis
 simple y con todas las instrucciones que necesitamos.
 
\end_layout

\begin_layout Standard
Python no contempla este lenguaje por defecto, por lo que es necesario incorpora
r una librería externa que nos permita enlazar los módulos python con la
 sintaxis de mySql.
 Con este fin, CygnusCloud utiliza MySQLdb, una librería muy simple y ligera
 que nos proporciona funciones para conectarnos a mySql y enviar los comandos
 con nuestras consultas.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Buscar info MySQLdb
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
network
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: meter diagrama UML definitivo para las conexiones tras explicar los
 hilos de red
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los módulos de este paquete proporcionan una interfaz que permite utilizar
 la librería de red 
\family typewriter
twisted
\family default
 a un alto nivel de abstracción.
 Puesto que el diseño de esta parte del sistema está íntimamente relacionado
 con el funcionamiento de la librería de red 
\family typewriter
twisted
\family default
, es fundamental que el lector esté familiarizado con los conceptos básicos
 de esta librería.
\end_layout

\begin_layout Standard
Por ello, comenzaremos mostrando, en líneas generales, cómo funciona la
 librería de red 
\family typewriter
twisted
\family default
.
 Posteriormente, describiremos el contenido de este paquete en orden creciente
 del nivel de abstracción, profundizando más en el funcionamiento de 
\family typewriter
twisted
\family default
 cuando sea preciso.
\end_layout

\begin_layout Standard
En cualquier caso, dado que 
\family typewriter
twisted
\family default
 es una librería con muchas funciones, sólo mostraremos los aspectos de
 su funcionamiento más relacionados con el diseño del paquete 
\family typewriter
network
\family default
.
 Si el lector está interesado en ampliar la información que aquí le proporcionam
os, le remitimos a la documentación oficial (
\begin_inset CommandInset citation
LatexCommand cite
key "TwistedCoreDocs"

\end_inset

) y al libro 
\emph on
Twisted Network Programming Essentials
\emph default
 (
\begin_inset CommandInset citation
LatexCommand cite
key "TwistedBook"

\end_inset

).
\end_layout

\begin_layout Subsubsection
La librería de red 
\family typewriter
twisted
\family default
: visión general
\emph on
 
\begin_inset CommandInset label
LatexCommand label
name "sub:La-librería-de-red-twisted"

\end_inset


\end_layout

\begin_layout Standard
Tal y como adelantamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-de-twisted"

\end_inset

, 
\family typewriter
twisted
\family default
 es una librería de red totalmente basada en eventos.
 Así, todas las tareas que realiza (como la recepción de datos, el establecimien
to de conexiones, la detección de desconexiones, \SpecialChar \ldots{}
) son totalmente asíncronas.
\end_layout

\begin_layout Standard
Para generar los eventos, 
\family typewriter
twisted
\family default
 utiliza el patrón 
\emph on
reactor
\emph default
, es decir, muestrea periódicamente el estado de los 
\emph on
sockets
\emph default
 y actúa en consecuencia.
 De esta manera, todas las aplicaciones que utilicen 
\family typewriter
twisted
\family default
 seguirán el siguiente esquema de comportamiento:
\end_layout

\begin_layout Enumerate
el código de la librería muestrea los 
\emph on
sockets
\emph default
 abiertos por la aplicación para detectar cambios.
 
\end_layout

\begin_layout Enumerate
cuando se detecta un cambio, se genera un evento para informar del cambio
 al código del cliente.
\end_layout

\begin_layout Enumerate
el código del cliente utiliza la información asociada al evento y procesa
 el cambio.
\end_layout

\begin_layout Enumerate
cuando termina, el código del cliente devuelve el control al código de la
 librería.
\end_layout

\begin_layout Standard
El muestreo de los 
\emph on
sockets
\emph default
 y el tratamiento de los cambios tiene lugar en un bucle que se ejecuta
 permanentemente: el 
\emph on
bucle reactor
\emph default
.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-bucle-reactor"

\end_inset

 resume de forma gráfica las ideas que acabamos de exponer.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/gráfico_twisted.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-bucle-reactor"

\end_inset

Representación gráfica del funcionamiento de la librería 
\emph on
twisted
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Protocolos y factorías de protocolos
\end_layout

\begin_layout Standard
La forma en que se procesan los datos recibidos a través de la red varía
 de unas aplicaciones a otras, e incluso puede variar en una misma aplicación.
 Por ejemplo, en 
\emph on
CygnusCloud
\emph default
 algunos datos recibidos se escriben en una base de datos, otros se reenvían
 y otros se le muestran directamente al usuario.
 Por ello, es necesario que el proceso de generación y tratamiento del evento
 no dependa de los datos concretos que manipula cada aplicación.
 Para hacer esto posible, 
\emph on
twisted
\emph default
 define los 
\emph on
protocolos
\emph default
 y las 
\emph on
factorías de protocolos
\emph default
.
\end_layout

\begin_layout Standard
Un 
\emph on
protocolo
\emph default
 es una clase cuyos métodos tratan y generan eventos de red, tales como
 la recepción de un segmento TCP, el envío de un segmento TCP y la detección
 de desconexión.
 Por su parte, las 
\emph on
factorías de protocolos
\emph default
 son objetos capaces de instanciar y configurar protocolos.
 Los protocolos y las factorías de protocolos se manipulan siempre a través
 de dos interfaces, que se definen en las clases abstractas 
\family typewriter
Protocol
\family default
 y 
\family typewriter
Factory
\family default
 respectivamente.
 
\end_layout

\begin_layout Paragraph
El bucle reactor
\end_layout

\begin_layout Standard
Su misión principal es muestrear periódicamente todos los 
\emph on
sockets
\emph default
 abiertos e invocar a las rutinas de tratamiento adecuados cuando se produzca
 un evento.
 Como ya hemos dicho, las rutinas de tratamiento se definen en instancias
 de subclases concretas de 
\family typewriter
Protocol
\family default
.
\end_layout

\begin_layout Standard
En la librería 
\emph on
twisted
\emph default
 se definen varios bucles reactor, que se diferencian fundamentalmente por
 la forma de realizar el muestreo periódico.
 Nosotros utilizamos el que está definido en la clase 
\family typewriter
PollReactor
\family default
, que se limita a leer periódicamente todos los 
\emph on
sockets
\emph default
 para determinar si se han producido cambios.
 
\end_layout

\begin_layout Standard
Para que el funcionamiento de la librería sea el correcto, deben cumplirse
 dos restricciones:
\end_layout

\begin_layout Itemize
aunque en cada aplicación puede haber un número arbitrario de conexiones
 activas, sólo puede existir 
\emph on
un
\emph default
 único bucle reactor.
 
\end_layout

\begin_layout Itemize
una vez que se detiene el bucle reactor, este 
\emph on
no
\emph default
 puede reiniciarse mientras la aplicación se siga ejecutando.
 Por ello, sólo se puede salir de este bucle cuando la aplicación no va
 a utilizar más la red.
\end_layout

\begin_layout Standard
Por otra parte, los eventos de red se tratan en el propio bucle del reactor.
 Para garantizar un tiempo de respuesta adecuado, es imprescindible que
 los métodos de tratamiento sean tan rápidos como sea posible.
 
\end_layout

\begin_layout Paragraph
Procesamiento de datos entrantes
\end_layout

\begin_layout Standard
El diagrama de secuencia de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Procesamiento-de-datos-entrantes-twisted"

\end_inset

 muestra cómo se procesan los eventos asociados a dos conexiones, cuyos
 protocolos son instancias de las subclases de 
\family typewriter
Protocol Protocol1
\family default
 y 
\family typewriter
Protocol2
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Procesamiento de datos entrantes (DS).pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Procesamiento-de-datos-entrantes-twisted"

\end_inset

Procesamiento de datos entrantes en 
\emph on
twisted
\emph default
: diagrama de secuencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En ambos casos, se muestrea el 
\emph on
socket
\emph default
, para posteriormente invocar al método correspondiente del protocolo: el
 método de procesamiento de los datos entrantes en el primer caso, y el
 método de procesamiento de una desconexión en el segundo.
\end_layout

\begin_layout Paragraph
Establecimiento de conexiones
\end_layout

\begin_layout Standard
Para establecer una conexión, es necesario tener en cuenta
\end_layout

\begin_layout Itemize
el protocolo de transporte que hay que utilizar (TCP versión 4, SSL,\SpecialChar \ldots{}
), y
\end_layout

\begin_layout Itemize
el papel que desempeña la máquina en la conexión (cliente o servidor).
\end_layout

\begin_layout Standard
Para eliminar en la medida de lo posible los detalles de bajo nivel de nuestro
 código, hemos utilizado una función que se ha añadido recientemente a la
 librería 
\emph on
twisted
\emph default
: los 
\emph on
endpoints
\emph default
.
\end_layout

\begin_layout Standard
Un 
\emph on
endpoint
\emph default
 sirve para configurar uno de los extremos de la conexión.
 Todos los protocolos de transporte implementados en 
\emph on
twisted 
\emph default
definen dos: uno para la máquina servidor y otro para las máquinas cliente.
 En el proceso de conexión, el 
\emph on
endpoint
\emph default
, que es una instancia de una subclase concreta de 
\family typewriter
Endpoint
\family default
, 
\end_layout

\begin_layout Itemize
interactúa con el reactor para establecer la conexión.
\end_layout

\begin_layout Itemize
suministra al reactor la factoría de protocolos.
 Este la utilizará para instanciar protocolos cuando sea necesario.
\end_layout

\begin_layout Standard
Las relaciones existentes entre la clase 
\family typewriter
Endpoint
\family default
 y el resto de clases principales de la librería 
\emph on
twisted
\emph default
 aparecen en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-protocolos-endpoints-factorías"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Relaciones Endpoints.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-protocolos-endpoints-factorías"

\end_inset

Relaciones entre protocolos, factorías de protocolos y 
\emph on
endpoints
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Todos los 
\emph on
endpoints
\emph default
 son instancias de alguna subclase concreta la clase 
\family typewriter
Endpoint
\family default
.
 En el diagrama sólo aparecen las subclases de 
\emph on
endpoint
\emph default
 que utilizamos en el paquete 
\family typewriter
network
\family default
, correspondientes a los protocolos TCP versión 4 y SSL versión 4.
 Por otra parte, los 
\emph on
endpoints
\emph default
 no manipulan directamente un PollReactor: para ello, utilizan las interfaces
 que esta clase implementa.
 Nos hemos tomado esta licencia para simplificar la explicación.
\end_layout

\begin_layout Standard
Como ya hemos visto, los protocolos se crean al establecerse la conexión.
 Además, puesto que siempre están ligados a una conexión, estos objetos
 se destruyen cuando esta se cierra.
\end_layout

\begin_layout Standard
Por otra parte, el diagrama de secuencia de la figura muestra la interacción
 que tiene lugar al establecer dos conexiones TCP, una de tipo servidor
 y otra de tipo cliente.
 En ambos casos, los 
\emph on
endpoints
\emph default
 se limitan, en esencia, a solicitar al reactor al establecimiento de la
 conexión y a suministrarle la factoría de protocolos que debe utilizar.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Establecimiento conexión twisted (DS).pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Establecimiento-conexión-twisted"

\end_inset

Establecimiento de una conexión en 
\emph on
twisted
\emph default
: diagrama de secuencia
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finalmente, los protocolos se usan de forma distinta en función del tipo
 de conexión:
\end_layout

\begin_layout Itemize
en el caso de una conexión de tipo cliente, existirá un único protocolo,
 que permitirá la comunicación bidireccional con el servidor.
\end_layout

\begin_layout Itemize
en el caso de una conexión de tipo servidor, existirán tantos protocolos
 como clientes.
 Cada uno de ellos permitirá la comunicación bidireccional entre el servidor
 y un único cliente.
\end_layout

\begin_layout Paragraph
Envío de datos 
\end_layout

\begin_layout Standard
Tal y como hemos mencionado, para enviar datos a través de la red se utilizan
 instancias de subclases concretas de 
\family typewriter
Protocol
\family default
.
 El reactor nunca interviene a la hora de enviar datos: los 
\emph on
bytes
\emph default
 a enviar se escriben directamente en el 
\emph on
socket
\emph default
 correspondiente.
\end_layout

\begin_layout Standard
En principio, la única restricción que impone librería 
\emph on
twisted
\emph default
 es el tipo de los datos a enviar: sólo es posible enviar 
\emph on
strings
\emph default
 (es decir, secuencias de 
\emph on
bytes
\emph default
), lo que hace necesario serializar toda la información antes de enviarla
 y deserializarla al recibirla.
 
\end_layout

\begin_layout Standard
Es importante notar que el número de 
\emph on
bytes
\emph default
 a enviar no está limitado.
 Por tanto, los segmentos se fragmentarán cuando sea preciso.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
Packet
\end_layout

\begin_layout Standard
Como ya hemos mencionado, el principal objetivo de las clases del paquete
 
\family typewriter
network
\family default
 es proporcionar una forma de utilizar la librería de red twisted a un elevado
 nivel de abstracción.
 Para ello, es necesario, como mínimo,
\end_layout

\begin_layout Itemize
hacer totalmente transparentes al usuario los procesos de serialización
 y de deserialización de la información que se envía y recibe, y
\end_layout

\begin_layout Itemize
fijar la prioridad de los datos que circulan por la red.
 Esto es fundamental para que el sistema pueda responder rápidamente ante
 eventos de suma importancia como la caída de un servidor de máquinas virtuales.
\end_layout

\begin_layout Standard
La clase 
\family typewriter
Packet
\family default
 cubre estas dos necesidades.
 Sus instancias representan paquetes de red, y tienen asociada la siguiente
 información:
\end_layout

\begin_layout Itemize
un tipo.
 Existen dos: uno para transportar datos de gestión de la red y otro para
 transportar datos del cliente.
 Los paquetes de gestión de la red son siempre más prioritarios que los
 que transportan datos del cliente.
\end_layout

\begin_layout Itemize
una prioridad.
 Se trata de un valor entero, positivo en el caso de los paquetes que contienen
 datos de los usuarios y negativo en el caso de los paquetes de gestión
 de la red.
 Cuanto 
\emph on
menor
\emph default
 es la prioridad de un paquete, 
\emph on
más
\emph default
 prioritario será.
\end_layout

\begin_layout Itemize
una secuencia de 
\emph on
bytes
\emph default
 con los datos del paquete.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Rango de la prioridad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tamaño máximo (paquete completo)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Datos del cliente
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $[0,32767$
\end_inset

]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64 KB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gestión de la red
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $[-32768,-1]$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64 KB
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Tipos-prioridades-paquetes"

\end_inset

Características de los distintos tipos de paquete
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tipos-prioridades-paquetes"

\end_inset

 recoge las características de los dos tipos de paquete.
 En ambos casos, el tamaño máximo del paquete completo (es decir, incluyendo
 la cabecera con el tipo y la prioridad y los datos) no puede exceder los
 64 KB.
 Esto nos permite
\end_layout

\begin_layout Itemize
garantizar que no haya usuarios que acaparen el ancho de banda de la red
 mediante el envío de paquetes de gran tamaño.
\end_layout

\begin_layout Itemize
mantener el tiempo de respuesta de la red dentro de unos márgenes razonables.
 Puesto que los paquetes de pequeño tamaño tardan menos en enviarse y en
 ser recibidos, los paquetes más prioritarios podrán 
\begin_inset Quotes eld
\end_inset

adelantar
\begin_inset Quotes erd
\end_inset

 a los paquetes menos prioritarios que les preceden y llegar a su destino
 tan rápido como sea posible.
\end_layout

\begin_layout Itemize
reducir el tiempo de procesamiento de los paquetes que se van a redirigir.
\end_layout

\begin_layout Paragraph
Serialización y deserialización de los datos 
\end_layout

\begin_layout Standard
Para hacer la serialización y deserialización de los datos totalmente transparen
tes a los usuarios, la clase 
\family typewriter
Packet
\family default
 dispone de métodos de lectura y escritura de 
\emph on
strings
\emph default
, valores enteros, valores booleanos y números en punto flotante.
\end_layout

\begin_layout Standard
Tal y como mencionamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-librería-de-red-twisted"

\end_inset

, la librería 
\family typewriter
twisted
\family default
 sólo es capaz de enviar y recibir 
\emph on
strings
\emph default
, por lo que 
\end_layout

\begin_layout Itemize
los métodos de escritura convierten a 
\emph on
strings 
\emph default
los valores a escribir en el paquete y los añaden al final de una estructura
 de datos intermedia, y
\end_layout

\begin_layout Itemize
los métodos de lectura extraen 
\emph on
strings 
\emph default
de la estructura de datos intermedia y los convierten en valores del tipo
 que el usuario quiere leer.
 Todas las lecturas son destructivas, es decir, cada dato escrito en el
 paquete sólo puede leerse una vez.
\end_layout

\begin_layout Standard
La estructura de datos intermedia es un 
\emph on
string
\emph default
.
 Para leer y escribir en ella se usan los métodos de extracción de subcadenas
 y concatenación definidos en la librería estándar de Python.
 El formato de los datos serializados viene dado por la siguiente expresión
 regular:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
(etiqueta de tipo$valor$)*
\end_layout

\begin_layout Standard
Los valores se serializan y deserializan con los métodos definidos en la
 librería estándar de Python.
 El cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Etiquetas-de-tipo-paquete"

\end_inset

 contiene la codificación de las etiquetas de tipo de los paquetes.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Etiqueta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo de datos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entero
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entero largo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
número de punto flotante
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Etiquetas-de-tipo-paquete"

\end_inset

Etiquetas de tipo que pueden aparecer en un paquete
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
También es necesario serializar la cabecera del paquete.
 Su formato es el siguiente:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
tipo,prioridad
\end_layout

\begin_layout Standard
Nuevamente, tanto el tipo como la prioridad del paquete se serializan y
 deserializan utilizando métodos de la librería estándar de Python.
 El paquete serializado se obtiene concatenando la cabecera y los datos
 serializados, y su formato viene descrito por esta expresión regular:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
tipo,prioridad(etiqueta de tipo$valor$)*
\end_layout

\begin_layout Standard
Finalmente, los métodos de la clase Packet también garantizan que los paquetes
 siempre están bien formados, es decir, que
\end_layout

\begin_layout Itemize
la prioridad es la adecuada para el tipo de paquete
\end_layout

\begin_layout Itemize
no se excede el tamaño máximo del paquete al escribir datos en él
\end_layout

\begin_layout Itemize
los datos se leen del paquete en el mismo orden en que se escriben
\end_layout

\begin_layout Subsubsection
Envío y recepción de datos
\end_layout

\begin_layout Standard
Como ya mencionamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-librería-de-red-twisted"

\end_inset

, para poder enviar y recibir información utilizando la librería 
\family typewriter
twisted
\family default
 es necesario definir dos clases:
\end_layout

\begin_layout Itemize
una subclase de 
\family typewriter
Protocol
\family default
, 
\family typewriter
CygnusCloudProtocol
\family default
.
 Sus instancias procesarán los datos recibidos a través de cada conexión.
\end_layout

\begin_layout Itemize
una subclase de 
\family typewriter
Factory
\family default
, 
\family typewriter
CygnusCloudProtocolFactory
\family default
.
 Sus instancias crearán objetos CygnusCloudProtocol cuando se establezcan
 las conexiones.
\end_layout

\begin_layout Standard
Las relaciones entre estas clases, la clase 
\family typewriter
Packet
\family default
 y las clases de la librería 
\family typewriter
twisted
\family default
 aparecen en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacción-con-twisted-nivel-inferior"

\end_inset

.
 En dicho diagrama, hemos abreviado 
\family typewriter
CygnusCloud
\family default
 utilizando las siglas 
\family typewriter
CC
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagrama clases interacción twisted.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interacción-con-twisted-nivel-inferior"

\end_inset

Interacción con 
\emph on
twisted
\emph default
 a muy bajo nivel de abstracción: diagrama de clases
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lo primero que llama la atención en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacción-con-twisted-nivel-inferior"

\end_inset

 es la dependencia cíclica existente entre las clases 
\family typewriter
CygnusCloudProtocol
\family default
 y 
\family typewriter
CygnusCloudProtocolFactory
\family default
 .
 Dicha dependencia está provocada por el funcionamiento de la librería 
\family typewriter
twisted
\family default
: cada par de máquinas conectadas se comunica siempre a través de una conexión
 bidireccional.
 Por ello, si 
\begin_inset Formula $n$
\end_inset

 clientes se conectan a un mismo servidor,
\end_layout

\begin_layout Itemize
en los clientes habrá un único objeto 
\family typewriter
CygnusCloudProtocol
\family default
, y
\end_layout

\begin_layout Itemize
en el servidor habrá 
\begin_inset Formula $n$
\end_inset

 objetos 
\family typewriter
CygnusCloudProtocol
\family default
, cada uno de los cuales permite al servidor comunicarse con un cliente
 concreto.
\end_layout

\begin_layout Standard
Para simplificar la implementación de la red nos interesa que, en los niveles
 de mayor nivel de abstracción, sólo sea necesario realizar la distinción
 entre clientes y servidores a la hora de establecer las conexiones.
 Lo más conveniente es extender la funcionalidad de la clase 
\family typewriter
CygnusCloudProtocolFactory
\family default
 para que, además de instanciar objetos 
\family typewriter
CygnusCloudProtocol
\family default
, sea capaz de:
\end_layout

\begin_layout Itemize
mantener una lista de referencias a todos los objetos 
\family typewriter
CygnusCloudProtocol
\family default
 asociados a la conexión y actualizarla a medida que los clientes se conecten
 y desconecten.
\end_layout

\begin_layout Itemize
indicar si la conexión se puede utilizar, teniendo en cuenta que una conexión
 no está lista cuando no tiene asociado ningún objeto 
\family typewriter
CygnusCloudProtocol
\family default
.
\end_layout

\begin_layout Itemize
serializar y enviar todos los paquetes del servidor a todos los clientes
 conectados, utilizando para ello las referencias a los objetos 
\family typewriter
CygnusCloudProtocol
\family default
.
 En caso de que no haya ninguna, los datos a enviar se descartarán.
\end_layout

\begin_layout Itemize
procesar los datos recibidos a través de cualquier objeto 
\family typewriter
CygnusCloudProtocol
\family default
, deserializándolos para formar los paquetes y avisando a la capa superior.
\end_layout

\begin_layout Standard
La recepción de paquetes es totalmente asíncrona.
 Por motivos de eficiencia y para respetar el tipo y la prioridad de los
 paquetes, los objetos 
\family typewriter
CygnusCloudProtocolFactory
\family default
 insertan todos los paquetes que reciben en una cola de prioridad, que es
 una instancia de la clase 
\family typewriter
MultithreadingPriorityQueue
\family default
.
 La capa superior extraerá de ella los paquetes de acuerdo a su tipo y prioridad.
\end_layout

\begin_layout Subsubsection
Conexiones de red
\end_layout

\begin_layout Standard
Con lo que hemos mostrado hasta ahora, ya podemos interactuar con 
\family typewriter
twisted
\family default
 para enviar y recibir paquetes.
 Pero antes es necesario establecer la conexión de red y también gestionar
 los recursos que tiene asociados, entre los están, en principio,
\end_layout

\begin_layout Itemize
su estado, es decir, si la conexión se está estableciendo, si ya se puede
 utilizar, si se está intentando reestablecer, etcétera.
\end_layout

\begin_layout Itemize
la cola de paquetes recibidos, de la que hablamos en la última sección.
\end_layout

\begin_layout Itemize
la factoría de protocolos, que es, como vimos, una instancia de 
\family typewriter
CygnusCloudProtocolFactory
\family default
.
\end_layout

\begin_layout Itemize
una dirección IP, un puerto y el protocolo a utilizar (TCP versión 4 o SSL).
 Esta información sólo se utiliza para establecerla.
\end_layout

\begin_layout Standard
Puesto que todos estos recursos están muy relacionados, lo más conveniente
 es manipularlos de forma conjunta.
 Esta es la finalidad de la clase 
\family typewriter
NetworkConnection
\family default
 y de sus dos subclases concretas: 
\family typewriter
ClientConnection
\family default
 y 
\family typewriter
ServerConnection
\family default
.
\end_layout

\begin_layout Standard
La clase abstracta 
\family typewriter
NetworkConnection
\family default
 define la interfaz que utilizará la capa superior para interactuar con
 una conexión de red.
 Sus dos subclases concretas, 
\family typewriter
ClientConnection
\family default
 y 
\family typewriter
ServerConnection
\family default
, se corresponden con los dos tipos de conexiones que es posible establecer:
 las conexiones de tipo cliente y de tipo servidor respectivamente.
 Estas dos clases comparten la mayor parte del código, y sólo difieren a
 la hora de establecer la conexión y al actualizar su estado.
 
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-clases-conexiones"

\end_inset

 recoge las relaciones más relevantes en las que intervienen estas tres
 clases.
 A lo largo de esta sección, las explicaremos en detalle.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center

\family typewriter
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagrama Clases Conexiones.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-clases-conexiones"

\end_inset

Relaciones más relevantes en las que intervienen las clases 
\family typewriter
NetworkConnection
\family default
, 
\family typewriter
ClientConnection
\family default
 y 
\family typewriter
ServerConnection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Establecimiento de una conexión
\end_layout

\begin_layout Standard
Para establecer una conexión de tipo cliente, basta con escoger un protocolo
 y el 
\emph on
endpoint
\emph default
 de tipo cliente que tiene asociado.
 Como nosotros sólo utilizamos los protocolos TCP versión 4 y SSL versión
 4, estos 
\emph on
endpoints
\emph default
 serán 
\family typewriter
TCP4ClientEndpoint
\family default
 y 
\family typewriter
SSL4ClientEndpoint
\family default
.
 
\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-librería-de-red-twisted"

\end_inset

 mostramos el intercambio de mensajes que tiene lugar durante el proceso
 de conexión.
 Por ahora, lo único que nos interesa del mismo es que, cuando el método
 del 
\emph on
endpoint
\emph default
 correspondiente termina, la conexión ya está lista para ser utilizada.
\end_layout

\begin_layout Standard
Por otra parte, las conexiones de tipo servidor se establecen de forma similar,
 pero utilizando los 
\emph on
endpoints 
\family typewriter
\emph default
TCP4ServerEndpoint
\family default
 y 
\family typewriter
SSL4ServerEndpoint
\family default
.
 Pero a diferencia del caso anterior, cuando el método del 
\emph on
endpoint
\emph default
 termina la conexión aún no está lista para ser utilizada: sólo lo estará
 cuando se conecte el primer cliente.
 Esto justifica el hecho de que el estado evolucione de forma distinta en
 conexiones de tipo cliente y en conexiones de tipo servidor.
\end_layout

\begin_layout Standard
Finalmente, los métodos de establecimiento de una conexión siempre devuelven
 un objeto 
\family typewriter
Deferred
\family default
, que permite tratar los errores y, en el caso de conexiones de tipo servidor,
 obtener algunos de sus recursos asociados (un objeto 
\family typewriter
IListenningPort
\family default
) y cancelar el establecimiento de las mismas.
\end_layout

\begin_layout Paragraph
Envío y recepción de datos
\end_layout

\begin_layout Standard
La clase 
\family typewriter
NetworkConnection
\family default
 envía paquetes a través de su objeto 
\family typewriter
CygnusCloudProtocolFactory
\family default
, cuyos métodos permiten transmitir el paquete a enviar.
 No obstante, los paquetes no se envían de forma instantánea, y sólo se
 pueden enviar uno por uno.
 Para que la capa superior pueda ignorar esta restricción, cada conexión
 también tiene asociada una cola de prioridad que contiene los paquetes
 a enviar.
 
\end_layout

\begin_layout Standard
Esa cola será una instancia de la clase 
\family typewriter
MultithreadingPriorityQueue
\family default
.
 Los paquetes a enviar siempre se insertan en esta cola, y se transmitirán
 uno por uno y cuando llegue su turno.
\end_layout

\begin_layout Standard
Por otra parte, también es necesario procesar los paquetes que el objeto
 
\family typewriter
CygnusCloudProtocolFactory
\family default
 deposita en la cola de paquetes recibidos.
 Puesto que el contenido de los paquetes que contienen datos del cliente
 depende del dominio de la aplicación, estos deben procesarse en el código
 del cliente, al que se invocará utilizando la interfaz definida por la
 clase abstracta 
\family typewriter
NetworkCallback
\family default
.
 Naturalmente, estos paquetes se borran tras ser procesados.
\end_layout

\begin_layout Paragraph
Estado de las conexiones
\end_layout

\begin_layout Standard
Dependiendo del tipo de conexión, el estado evoluciona de forma distinta.
 Los diagramas de las figuras 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolución-del-estado-servidor"

\end_inset

 y 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolución-del-estado-cliente"

\end_inset

 muestran la evolución del estado de las conexiones de tipo servidor y de
 tipo cliente respectivamente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagrama estados conexión servidor.pdf
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolución-del-estado-servidor"

\end_inset

Evolución del estado de una conexión de tipo servidor
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagrama estados conexión cliente.pdf
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolución-del-estado-cliente"

\end_inset

Evolución del estado de una conexión de tipo cliente
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ambos diagramas comparten los estados 
\family sans
Opening
\family default
, 
\family sans
Ready
\family default
, 
\family sans
Closing
\family default
 y 
\family sans
Closed
\family default
.
 Su significado es el siguiente:
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Opening
\family default
, la conexión está siendo establecida.
 Aún no se dispone de todos sus recursos.
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Ready 
\family default
la conexión está lista para recibir y transmitir datos.
 Por lo general, las conexiones permanecen en este estado durante la mayor
 parte del tiempo.
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Closing
\family default
, el cliente ha solicitado el cierre de la conexión.
 Este estado es imprescindible para garantizar que se envían los datos pendiente
s.
 En cualquier caso, es importante notar que se descartarán todos los paquetes
 recibidos y todos los nuevos paquetes que se desee enviar.
\end_layout

\begin_layout Itemize
en el estado 
\family sans
Closed
\family default
, la conexión está cerrada, y se han liberado todos sus recursos.
\end_layout

\begin_layout Standard
Las diferencias están relacionadas con el establecimiento de la conexión
 y las reconexiones.
\end_layout

\begin_layout Standard
Como ya hemos mencionado, una conexión de tipo servidor sólo está lista
 cuando uno o más clientes se conectan.
 En el estado 
\family sans
Ready -- Wait to clients
\family default
, la conexión de tipo servidor está lista para aceptar conexiones entrantes,
 pero al no haber clientes conectados no será posible enviar ni recibir
 datos.
\end_layout

\begin_layout Standard
Por otra parte, las reconexiones sólo tienen sentido en conexiones de tipo
 cliente.
 Cuando la reconexión está habilitada, en el estado 
\family sans
Reconnect
\family default
 se intentará reestablecer la conexión con el servidor utilizando retroceso
 exponencial binario truncado.
 Si no se consigue tras quince intentos (suponen unos cinco minutos aproximadame
nte), se asumirá que la conexión está cerrada.
\end_layout

\begin_layout Subsubsection
Hilos de red 
\end_layout

\begin_layout Standard
Utilizando lo que acabamos de contar, podemos crear y manipular conexiones
 de red a un nivel de abstracción razonablemente elevado.
 No obstante, hasta ahora hemos omitido, para facilitar la comprensión del
 diseño, un aspecto fundamental: el rendimiento.
\end_layout

\begin_layout Standard
En la librería de red 
\family typewriter
twisted
\family default
, todos los paquetes entrantes se procesarán en el bucle reactor.
 Mientras tiene lugar el procesamiento del paquete, no se enviará ni se
 recibirá nada.
 Esto supone un problema, ya que en ocasiones los subsistemas de 
\emph on
CygnusCloud
\emph default
 tienen tiempos de respuesta muy elevados.
 Por ejemplo, una petición de arranque de una máquina virtual tardará mucho
 en procesarse por toda la entrada/salida que conlleva.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagrama clases Jerarquía hilos red.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Jerarquía-de-hilos-red"

\end_inset

Jerarquía de hilos de red y sus relaciones más importantes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Así pues, resulta inadmisible que las comunicaciones se bloqueen durante
 el tiempo que tardan las peticiones en procesarse.
 La única forma de evitar esta situación es repartir la ejecución de las
 funciones de red entre varios hilos.
 Hemos realizado la siguiente descomposición:
\end_layout

\begin_layout Itemize
el bucle reactor de 
\family typewriter
twisted
\family default
 se ejecutará en un hilo independiente.
 Esto permitirá a los usuarios utilizar el hilo principal de sus aplicaciones
 de la forma que estimen oportuna.
\end_layout

\begin_layout Itemize
cada conexión de red tendrá asociados un hilo de envío y un hilo de recepción
 de paquetes.
 El primero desencolará paquetes de la cola de envío y los transmitirá,
 y el segundo extraerá paquetes de la cola de recepción e invocará al código
 del cliente que los procesa.
\end_layout

\begin_layout Itemize
por motivos de eficiencia, el estado de 
\emph on
todas
\emph default
 las conexiones de red se actualizará en un hilo independiente.
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Jerarquía-de-hilos-red"

\end_inset

 recoge las clases de la jerarquía de hilos de red y sus relaciones más
 relevantes.
\end_layout

\begin_layout Standard
La clase 
\family typewriter
BasicThread
\family default
 añade a los hilos de Python la capacidad de detenerse cuando otros se lo
 solicitan, y la clase 
\family typewriter
QueueProcessingThread
\family default
 añade también la capacidad de procesar elementos de una cola mediante un
 patrón 
\emph on
strategy
\emph default
.
\end_layout

\begin_layout Standard
Por convenciencia, el hilo que ejecutará el bucle reactor, 
\family typewriter
TwistedReactorThread
\family default
, hereda directamente de 
\family typewriter
Thread
\family default
, la clase base de todos los hilos en Python.
 Por otra parte, la clase 
\family typewriter
ConnectionMonitoringThread
\family default
 se corresponde con el hilo que actualizará el estado de todas las conexiones,
 y las clases 
\family typewriter
IncomingDataThread
\family default
 y 
\family typewriter
OutgoingDataThread
\family default
 se corresponden con los hilos de recepción y envío de paquetes.
\end_layout

\begin_layout Standard
Es importante notar que:
\end_layout

\begin_layout Itemize
es el hilo de recepción y no la conexión de red el que indica al cliente
 la recepción de un nuevo paquete.
 Para ello, se sigue utilizando la interfaz que define la clase NetworkCallback.
\end_layout

\begin_layout Itemize
todo el procesamiento de los paquetes entrantes tendrá lugar en un hilo
 
\family typewriter
IncomingDataThread
\family default
 y no en el hilo del bucle reactor de 
\emph on
twisted
\emph default
, lo que nos permite garantizar que el tiempo de respuesta de la red será
 adecuado independientemente del tiempo que tarde en procesarse el paquete.
\end_layout

\begin_layout Paragraph
Control de la concurrencia
\end_layout

\begin_layout Standard
Si recapitulamos considerando todo lo que hemos visto, para poder comunicar
 varias máquinas entre sí es necesario disponer de los siguientes hilos:
\end_layout

\begin_layout Itemize
dos hilos, uno de envío y otro de recepción, para cada conexión.
\end_layout

\begin_layout Itemize
un hilo para actualizar el estado de las conexiones
\end_layout

\begin_layout Itemize
un hilo para ejecutar el bucle reactor
\end_layout

\begin_layout Standard
Además, para garantizar el correcto funcionamiento del sistema es necesario
 utilizar secciones críticas, para lo que necesitamos mecanismos de sincronizaci
ón y, por tanto, aún más recursos.
\end_layout

\begin_layout Standard
Si el número de conexiones de red de cada máquina es reducido, no habrá
 problemas.
 Pero existe un tipo de máquina en CygnusCloud que estará conectada a muchas
 otras: el servidor de 
\emph on
cluster
\emph default
.
 En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Subsistemas-de-CygnusCloud"

\end_inset

 dijimos que su principal función es realizar el balanceado de carga entre
 varios servidores de máquinas virtuales.
 
\end_layout

\begin_layout Standard
A medida que el número de servidores de máquinas virtuales crece, el peso
 de los recursos asociados a los hilos y a los mecanismos de sincronización
 también lo hará, reduciendo considerablemente la escalabilidad.
 Por ejemplo, si el servidor de 
\emph on
cluster
\emph default
 está conectado a 10 servidores de máquinas virtuales, serán necesarios
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
10\cdot2+1+1=22\textrm{ hilos de red}
\]

\end_inset

junto con los mecanismos de sincronización correspondientes.
 Aunque la CPU de la máquina pueda lidiar con este número de hilos, muchos
 estarán compitiendo por entrar en las secciones críticas, lo que reduce
 el rendimiento.
 Por tanto, debemos reducir el número de hilos de la red.
\end_layout

\begin_layout Standard
Lo primero que debemos observar es que, con independencia del número de
 conexiones de red que haya, todo el tráfico viajará por el mismo medio
 físico.
 Por ello, si hacemos que todas las conexiones compartan el mismo hilo de
 envío (y, por tanto, la misma cola de envío) el rendimiento de la red no
 se resentirá significativamente.
 
\end_layout

\begin_layout Standard
Además, esto tiene una ventaja adicional: el tráfico prioritario, sea de
 la conexión que sea, siempre se enviará antes que el tráfico no prioritario.
 Si se usan varios hilos de envío, el tráfico de las distintas conexiones
 se mezclará en el bucle reactor, y no será posible garantizar este comportamien
to.
\end_layout

\begin_layout Standard
Con este cambio, el número de hilos de la red se reduce en casi un 50%,
 pero aún tenemos margen de mejora.
 En ocasiones, el código del cliente procesa los paquetes recibidos a través
 de varias conexiones de red de forma idéntica.
 Esto ocurriría si, por ejemplo, el servidor de 
\emph on
cluster
\emph default
 escribiese periódicamente el estado de todos los servidores de máquinas
 virtuales en un 
\emph on
log
\emph default
.
 
\end_layout

\begin_layout Standard
En estos casos, podemos reducir el número de hilos y evitar muchos problemas
 de sincronización haciendo que las conexiones correspondientes compartan
 el hilo de recepción de paquetes (y, por tanto, también la cola de recepción
 de paquetes).
 Esta segunda mejora permite que, en el ejemplo anterior, sólo haya
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2+1+1=4\textrm{ hilos de red}
\]

\end_inset


\end_layout

\begin_layout Standard
en el servidor de 
\emph on
cluster
\emph default
, lo que incrementa la escalabilidad.
\end_layout

\begin_layout Standard
Para facilitar el uso de la red, lo más conveniente es detectar cuándo es
 posible realizar esta optimización y aplicarla de forma totalmente transparente
 para el usuario.
 Aunque detectar estos casos puede parecer complicado, en realidad no lo
 es: cuando el cliente utiliza el mismo objeto para procesar los paquetes
 recibidos a través de varias conexiones (es decir, el mismo 
\emph on
callback
\emph default
), es posible aplicar la optimización de forma segura.
 
\end_layout

\begin_layout Standard
En cambio, si el cliente utiliza objetos diferentes o varias instancias
 de una misma clase, no es posible asegurar que estamos ante uno de estos
 casos, por lo que la optimización no se aplica.
\end_layout

\begin_layout Standard
Finalmente, puesto que los hilos y colas de recepción de paquetes se comparten,
 no podemos limitarnos a destruirlos cuando se cierra la conexión.
 Por ello, existe un contador de referencias para estos dos objetos, que
 sólo cuando este llega a cero.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
NetworkManager
\end_layout

\begin_layout Standard
A causa de las optimizaciones que hemos aplicado para reducir el número
 de hilos de la red, crear conexiones de red no resulta sencillo.
 Asimismo, tampoco resulta interesante mostrar la implementación de la red
 a los clientes, ni tampoco permitir que estos puedan crear paquetes libremente.
\end_layout

\begin_layout Standard
Para resolver estos problemas, hemos creado la clase 
\family typewriter
NetworkManager
\family default
.
 Sus objetivos son los siguientes:
\end_layout

\begin_layout Itemize
ocultar las optimizaciones que hemos realizado 
\end_layout

\begin_layout Itemize
garantizar que todos los paquetes que envían los usuarios no comprometen
 el correcto funcionamiento de la red
\end_layout

\begin_layout Itemize
proporcionar una fachada que permite establecer, utilizar y cerrar conexiones
 nivel a un elevado nivel de abstracción.
\end_layout

\begin_layout Standard
Las relaciones más relevantes de la clase NetworkManager aparecen en el
 diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-más-importantes-networkmanager"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagrama clases NetworkManager.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-más-importantes-networkmanager"

\end_inset

Relaciones más importantes de la clase 
\family typewriter
NetworkManager
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En el diagrama anterior no aparecen los hilos de recepción ni las colas
 de paquetes recibidos porque no están asociados a ningún objeto 
\family typewriter
NetworkManager
\family default
: estos objetos están siempre asociados a una conexión de red, de la que
 se tomarán en caso de que deban compartirse.
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
virtualMachineServer
\end_layout

\begin_layout Standard
Este paquete proporciona toda la funcionalidad referente a la gestión de
 las máquinas virtuales.
 Esto es gestión de las máquinas virtuales y datos para conectarse a ellas
 a través de un cliente VNC
\end_layout

\begin_layout Subsubsection
La librería 
\family typewriter
libvirt
\end_layout

\begin_layout Standard
Como ya se ha comentado en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-de-libvirt"

\end_inset

, esta librería nos permite definir máquinas mediante un archivo XML, lo
 que nos facilita su modificación, para que con el mismo archivo podamos
 arrancar máquinas con distinta direccion MAC, distinto nombre y distinto
 UUID.
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
clusterServer
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
webServer
\end_layout

\begin_layout Standard
En este paquete se trata todo lo relacionado con la gestión de la web de
 CygnusCloud.
 Así en este paquete se incluyen todos los módulos encargados de gestionar
 las funcionalidades de interacción con los usuarios a través de la web
 y los ficheros html y css necesarios para la implementación de las páginas.
 
\end_layout

\begin_layout Subsubsection
Estructura general de la web
\end_layout

\begin_layout Standard
Para llevar a cabo el desarrollo de la web ha sido necesario la utilización
 de un framework web que nos facilitase algunos aspectos y estructurase
 el sistema de forma correcta.
 Para ello, hemos optado por la utilización de Web2Py cuyas principales
 características y funcionamiento explicamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-web2py"

\end_inset

.
\end_layout

\begin_layout Standard
Como ya mencionamos en esa sección, web2py estructura las aplicaciones siguiendo
 un modelo vista-controlador.
 Por ello en CygnusCloud ha sido necesario estructurar el código de la web
 en un grupo de control y un grupo de vista.
 A parte de ambos grupos también se han añadido más grupos con ficheros
 estáticos, css, módulos importados y en general todos los ficheros necesarios
 para dar la funcionalidad y el aspecto requeridos en la web.
\end_layout

\begin_layout Standard
Con todo esto, la web de CygnusCloud puede subdividirse en los siguientes
 grupos según su finalidad y tipo:
\end_layout

\begin_layout Itemize
Vistas: Este grupo incluye todos los ficheros de formato html encargados
 de establecer el aspecto de los componentes, su posicionamiento en las
 páginas y su comportamiento.
 Entendemos por comportamiento de un componente, su capacidad para realizar
 ciertas acciones que mejoren la interacción con los usuarios.
 Según las restricciones de web2py será necesario disponer de un fichero
 de vista por cada sección disponible en la web.
 Cada uno de estos ficheros de vista reciben los componentes creados en
 el controlador asociado, ajustan su aspecto al que se mostrará en la web,
 y los posicionan en el lugar deseado.
\end_layout

\begin_layout Itemize
Controladores: Este grupo incluye el conjunto de módulos python que aportan
 todas las funcionalidades que serán gestionadas por la web.
 CygnusCloud dispone de un módulo para cada uno de los tipos de usuarios
 que pueden acceder a la web (alumnos, administradores y estudiantes), un
 módulo para las páginas de acceso público, un módulo para la página que
 contiene el cliente VNC y un módulo appAdmin creado automáticamente por
 web2py para la gestión de las bases de datos.
 Dentro de cada módulo encontramos una función asociada a cada una de las
 secciones que forman la web.
 Hablaremos más en profundidad sobre este tema en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Secciones-y-subsecciones"

\end_inset

.
\end_layout

\begin_layout Itemize
Modelos: Este grupo incluye dos módulos python encargados de la creación
 de las bases de datos y las características generales de la aplicación.
 Así, el módulo 
\begin_inset Quotes eld
\end_inset

db.py
\begin_inset Quotes erd
\end_inset

 crea las tablas de la base de datos encargada de la gestión de la información
 en la web.
 El módulo 
\begin_inset Quotes eld
\end_inset

menu.py
\begin_inset Quotes erd
\end_inset

 define las características generales de la aplicación web, tales como su
 logo, su autor, sus tags de busqueda\SpecialChar \ldots{}
 Este par de módulos son creados y
 exigidos por web2py.
\end_layout

\begin_layout Itemize
Lenguajes: Este grupo incluye los diccionarios de traducción de las páginas
 de la web.
 Estos diccionarios deben ser rellenados por el desarrollador y son usados
 internamente por web2py para traducir todas las palabras de la web que
 aparezcan en los diccionarios.
\end_layout

\begin_layout Itemize
Archivos estáticos: Este grupo incluye los ficheros css y js encargados
 de definir la apariencia de la web, las imágenes y en general cualquier
 fichero que defina algún componente externo que forma parte de la web.
\end_layout

\begin_layout Itemize
Módulos: En este apartado se incluyen todos los módulos python secundarios
 utilizados por los controladores.
 Así, en este grupo se encuentra el conector que permite la interacción
 entre el servidor web y el servidor de cluster.
\end_layout

\begin_layout Subsubsection
Estructura de direcciones
\begin_inset CommandInset label
LatexCommand label
name "sub:Estructura-de-direcciones"

\end_inset


\end_layout

\begin_layout Standard
Con el fin de poder gestionar la web de la forma más modular posible y aprovecha
ndo el flujo de direcciones usadas por web2py vamos a estructurar los diferentes
 apartados de la web en forma de árbol de direcciones tal que cada uno de
 sus nodos podrá realizar saltos a cualquier otro nodo del árbol según las
 acciones realizadas por los usuarios.
 Así el elemento principal será la aplicación en sí (/CygnusCloud).
 A partir de esta dirección comenzarán a surgir las direcciones asociadas
 a las páginas manteniendo la estructura de secciones y subsecciones correspondi
entemente.
 De esta forma, las diferentes URLs sobre las que trabajará la web son:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/login
\begin_inset Quotes erd
\end_inset

 : Es la página de inicio de sesión donde el usuario introduce su nombre
 y contraseña para iniciar la sesión.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/about
\begin_inset Quotes erd
\end_inset

 : Es la página en la que se habla acerca de CygnusCloud y su finalidad.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/student/runVM
\begin_inset Quotes erd
\end_inset

 : Es la página de arranque de máquinas virtuales para los usuarios.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/runVM/run
\begin_inset Quotes erd
\end_inset

: Es la página de arranque de máquinas virtuales para los administradores.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/runVM/stop
\begin_inset Quotes erd
\end_inset

: Es la página de detención de máquinas virtuales en ejecución para los
 administradores.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/servers/add_servers
\begin_inset Quotes erd
\end_inset

 : Es la página encargada de añadir nuevos servidores y borrar algún servidor
 existente.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/servers/remove_servers
\begin_inset Quotes erd
\end_inset

 : Es la página encargada de eliminar servidores de máquinas virtuales existente
s.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/users/remove
\begin_inset Quotes erd
\end_inset

 : Esta es la página encargada de eliminar a usuarios previamente creados.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/users/add
\begin_inset Quotes erd
\end_inset

 : Es la página encargada de crear nuevos usuarios con las especificaciones
 determinadas por el administrador.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/users/associate_subjects
\begin_inset Quotes erd
\end_inset

 : Es la página encargada de establecer las relaciones entre un usuario
 previamente creado y un grupo de asignatura.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/subjects/add
\begin_inset Quotes erd
\end_inset

 : Esta es la página encargada de crear nuevos grupos de asignaturas con
 la información introducida por el administrador.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/administrator/subjects/remove
\begin_inset Quotes erd
\end_inset

 : Esta es la página encargada de eliminar algún grupo de asignatura existente.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/CygnusCloud/vncClient/VNCPage
\begin_inset Quotes erd
\end_inset

 : Página que contiene el escritorio de trabajo ejecutado por noVNC.
\end_layout

\begin_layout Standard
La distribución de estas páginas con respecto a su estructura en el flujo
 de direcciones viene representado en el diagrama de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-direcciones_Web"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DireccionesWeb.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de direcciones web2py.
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-direcciones_Web"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Secciones y subsecciones
\begin_inset CommandInset label
LatexCommand label
name "sub:Secciones-y-subsecciones"

\end_inset


\end_layout

\begin_layout Standard
Para poder hacer frente al elevado número de páginas que ofrece CygnusCloud,
 hemos optado por estructurar estas páginas en un sistema de 3 niveles,
 que permite filtrarlas teniendo en cuenta los privilegios de acceso y la
 finalidad de cada página.
 
\end_layout

\begin_layout Standard
El primer nivel se centra en los privilegios de acceso.
 CygnusCloud agrupa a los usuarios registrados en 3 tipos según los privilegios
 de los que dispongan.
 Estos privilegios dan acceso a unas u otras páginas.
 Podemos encontrar los siguientes tipos de usuarios:
\end_layout

\begin_layout Itemize
Alumnos : En este tipo se incluyen todos los alumnos que cursan alguna de
 las asignaturas registradas en la web.
 Este tipo de usuarios es el más restringido, dándole únicamente acceso
 a la página de arranque de máquinas virtuales , asociadas a las asignaturas
 matriculadas por el alumno, y a la página de visualización de máquinas
 arrancadas.
\end_layout

\begin_layout Itemize
Profesores : Este tipo incluye a todos los profesores que imparten alguna
 de las asignaturas registradas en la web.
 Dispone de unos privilegios de acceso mayores que el caso del alumno, pudiendo
 acceder, además de las páginas de arranque de máquinas virtuales y gestión
 de máquinas arrancadas, a páginas de creación, edición y borrado de máquinas
 virtuales.
\end_layout

\begin_layout Itemize
Administradores: Este tipo incluye a todos los técnicos y administradores
 encargados de la gestión total de la página.
 Es el tipo más privilegiado, teniendo acceso a las páginas de :
\end_layout

\begin_deeper
\begin_layout Itemize
Arranque de todas máquinas virtuales.
\end_layout

\begin_layout Itemize
Detención de máquinas virtuales arrancadas independientemente del usuarios
 que las arrancó.
\end_layout

\begin_layout Itemize
Gestión de usuarios.
\end_layout

\begin_layout Itemize
Gestión de servidores de máquinas virtuales.
\end_layout

\begin_layout Itemize
Gestión de grupos de asignaturas, así como de las máquinas virtuales asociadas
 a cada grupo.
\end_layout

\end_deeper
\begin_layout Standard
Además de estos tipos de usuarios, CygnusCloud también ofrece acceso a ciertas
 páginas públicas.
 Estas páginas podrán ser vistas por cualquier usuarios que se conecte a
 la web de CygnusCloud, aunque no se encuentre registrado.
 
\end_layout

\begin_layout Standard
Como ya hemos dicho, cada uno de estos tipos del primer nivel concretan
 el conjunto de páginas al cual se quiere acceder.
 
\end_layout

\begin_layout Standard
En el segundo nivel las páginas se encuentran agrupadas por secciones.
 Entendemos como una sección, el conjunto de páginas que abordan un aspecto
 común para un tipo de usuario concreto.
 Cada tipo de usuario tendrá acceso a unas secciones u otras.
 Algunos ejemplos de secciones son la gestión de usuarios, el arranque de
 máquinas virtuales o el inicio de sesión.
 En la tabla 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tabla-rtipos-secciones"

\end_inset

puede verse el conjunto de secciones asociadas a cada tipo de usuario.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tipo de usuario
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Secciones
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Main
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login,About
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Student
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RunVM
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teacher
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Administrator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RunVM, Servers, Users, Subjects
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla relación tipos de usuario y secciones.
\begin_inset CommandInset label
LatexCommand label
name "tab:Tabla-rtipos-secciones"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por último, en el tercer nivel, las páginas se encuentran definidas en subseccio
nes.
 Cada subsección es una página que contiene las funcionalidades relacionadas
 con un aspecto concreto y más limitado que el de la sección que la incluye.
 Existirán por tanto, tantas subsecciones como páginas creadas en la web.
 En la tabla 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tabla-seccion-subseccion"

\end_inset

 pueden verse las diferentes subsecciones asociadas a cada sección.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sección
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subsección
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
About
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RunVM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run, Stop
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Servers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add_servers,Remove_servers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Users
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add,Remove,Associate_subjects
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subjects
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add, Remove, AddVM
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tabla relación secciones y subsecciones
\begin_inset CommandInset label
LatexCommand label
name "tab:Tabla-seccion-subseccion"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La barra de secciones permanente en la web muestra la distribución de las
 páginas en secciones y subsecciones.
\end_layout

\begin_layout Standard
De cara a la implementación, es necesario ajustar esta estructura para que
 siga el modelo definido por web2py.
 Web2py gestiona sus direcciones con respecto a la estructura de los módulos
 python que actúan como controladores.
 El conjunto de controladores presentes en la web coincide con los tipos
 de usuarios definidos en el primer nivel.
 Así disponemos de 5 controladores:
\end_layout

\begin_layout Itemize
Uno para las páginas de acceso público.
\end_layout

\begin_layout Itemize
Uno para las páginas de los alumnos.
\end_layout

\begin_layout Itemize
Uno para las páginas de los profesores.
\end_layout

\begin_layout Itemize
Uno para las páginas de los administradores.
\end_layout

\begin_layout Itemize
Uno para la página que mantendrá el cliente VNC.
\end_layout

\begin_layout Standard
Este último controlador no corresponde a ningún tipo concreto de usuario
 pero se define a parte ya que su uso es común para todos.
 
\end_layout

\begin_layout Standard
Dentro de cada controlador es necesario definir una función python para
 cada una de las secciones del nivel 2 asociadas a este tipo de usuario.
 Así todo el código presente en los controladores debe pertenecer a una
 función, bien una función que defina una determinada sección o bien una
 función auxiliar utilizada por alguna de las funciones principales.
\end_layout

\begin_layout Standard
Por último cada una de las funciones python contendrán un variable que les
 indique cual de las subsecciones del tercer nivel deben controlar en cada
 momento.
\end_layout

\begin_layout Standard
Con respecto a las vistas, el diseño de los niveles se simplifica bastante,
 siendo necesario tener un fichero html para cada una de las secciones del
 segundo nivel.
 El nombre de estos ficheros html deben seguir la siguiente estructura:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Quotes eld
\end_inset

Nombre del controlador
\begin_inset Quotes erd
\end_inset

/
\begin_inset Quotes erd
\end_inset

nombre de la funcion
\begin_inset Quotes erd
\end_inset

.html
\end_layout

\begin_layout Standard
A modo de resumen, el esquema 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-niveles-web"

\end_inset

 muestra como CygnusCloud estructura sus páginas en estos 3 niveles.
 Como podemos observar, las rutas de direcciones de las que hablamos en
 la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Estructura-de-direcciones"

\end_inset

 coinciden con la estructura en los 3 niveles.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/NivelesWeb.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagrama de niveles de la web.
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-niveles-web"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
La barra de direcciones
\end_layout

\begin_layout Standard
Con el fin de permitir a los usuarios acceder a las diferentes páginas de
 forma directa sin necesidad de utilizar redirecciones a páginas intermedias,
 la web dispone de una barra de direcciones permanente que permite al usuario
 redirigirse a cualquier página dentro de su rango de acción.
 De esta forma dependiendo del tipo de usuarios dispondremos de las siguientes
 barras:
\end_layout

\begin_layout Itemize
barra de direcciones para páginas de acceso público.
 En esta barra aparecen las páginas de inicio de sesión y de 
\begin_inset Quotes eld
\end_inset

Acerca de
\begin_inset Quotes erd
\end_inset

, a las cuales pueden acceder libremente cualquier usuario que entre en
 la web.
\end_layout

\begin_layout Itemize
barra de direcciones para alumnos.
 Esta barra incluye la página de arranque de máquinas virtuales y está restringi
da a usuarios de tipo alumno registrados en la web.
\end_layout

\begin_layout Itemize
barra de direcciones para administradores.
 Esta barra contiene todas las páginas de gestión de servidores, asignaturas
 y usuarios.
 Además contiene la página de arranque de máquinas virtuales.
 Su acceso está restringido a usuarios de tipo administrador.
\end_layout

\begin_layout Subsubsection
Gestión de usuarios 
\end_layout

\begin_layout Standard
Para llevar a cabo la gestión de usuarios hemos optado por utilizar una
 de las librerías que Web2py nos ofrece.
 Esta librería, de nombre Auth, contiene todas las funcionalidades necesarias
 con respecto a la gestión de usuarios.
 Auth contiene funciones para gestionar la creación de usuarios, los inicios
 de sesión y las restricciones de acceso a diferentes páginas.
 Además esta librería ofrece también funciones que devuelven los formularios
 de inicio de sesión y cierre de la misma totalmente implementados para
 ser directamente incorporados en nuestras páginas.
\begin_inset CommandInset citation
LatexCommand cite
key "ACWeb2PyBook"

\end_inset


\end_layout

\begin_layout Subsubsection
Interacción entre páginas
\end_layout

\begin_layout Standard
Aunque bien es cierto que cada página debe ser controlada y representada
 por un controlador y una vista particulares, es posible que requiera de
 cierta información proveniente de la página a partir de la cual se accedió
 a ella.
 
\end_layout

\begin_layout Standard
Por esta razón, nuestra web debe ser capaz de trasmitir argumentos entre
 las diferentes páginas.
 Como ya mencionamos en el apartado 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Secciones-y-subsecciones"

\end_inset

, las diferentes secciones que componen la web son interpretadas por parte
 del controlador como simples funciones python sin argumentos.
 Aunque a simple vista lo más lógico pueda parecer que la forma correcta
 de trasmitir información entre páginas sea definiendo las funciones python
 con tantos argumentos como datos de entrada deba recibir esto no sucede
 así.
 Las razones por las cuales el envío y recepción de datos entre páginas
 no se dé de esta forma son básicamente dos:
\end_layout

\begin_layout Enumerate
La redirección de una página a otra no puede darse llamando a la función
 del controlador directamente.
 Cuando el desarrollador quiera realizar una redirección, deberá llamar
 a una función 
\family typewriter
redirect 
\family default
con el
\family typewriter
 
\family default
nombre del controlador que la contiene, el nombre de la función de la sección
 correspondiente, los argumentos necesarios y el conjunto de variables.
 Una vez llamada a la función, es Web2py el encargado de llamar a la función
 del controlador que corresponda y pasar los argumentos y variables.
\end_layout

\begin_layout Enumerate
El número de argumentos no siempre es el mismo.
 Dependiendo de la página a partir de la cual pueda realizarse la redirección,
 es posible que la función de la sección correspondiente reciba más o menos
 argumentos por lo que estos no pueden definirse como argumentos directos
 en la definición de la sección.
\end_layout

\begin_layout Standard
Por lo tanto la forma correcta de trasmitir información entre las diferentes
 páginas será utilizando la función 
\family typewriter
redirect
\family default
.
 Como podemos observar en la definición dada, esta función recibe además
 del nombre del controlador y la sección, un campo argumentos y un campo
 variables.
 Ambos campos permite trasmitir información entre dos páginas con unas caracterí
sticas particulares para cada uno de ellos.
 
\end_layout

\begin_layout Standard
En el caso de trasmitir información por el campo de argumentos, esta formará
 parte de la ruta de direcciones de la página destino.
 Así todos los argumentos que pasemos por este campo vendrán acoplados a
 la dirección de la página junto al nombre de la aplicación, el nombre del
 controlador y el nombre de la sección.
 Los valores en este campo son trasmitidos como una lista y son accedidos
 desde la página destino por medio de la llamada a 
\family typewriter
request.args(i)
\family default
 siendo 
\family typewriter
i
\family default
 la posición de la lista donde se encuentra el elemento deseado.
\end_layout

\begin_layout Standard
El segundo campo nos permite transferir la información como variables y
 no como argumentos.
 En esta caso el nombre de la variable no formará parte de la dirección
 destino.
 Este campo recibe un diccionario con el nombre que se quiere dar a cada
 una de estas variables y su contenido y será accedido desde la página destino
 por medio de la llamada a 
\family typewriter
request.vars.x
\family default
 donde 
\family typewriter
x
\family default
 es el nombre que se le dió a la variable concreta a la que se quiere acceder.
\end_layout

\begin_layout Standard
En el caso de CygnusCloud, el campo de argumentos se utiliza para retrasmitir
 el nombre de la subsección que debe ejecutarse dentro de la sección correspondi
ente.
 El campo de variables se utiliza para trasmitir el resto de información
 útil como por ejemplo los resultados de las búsquedas.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Revisar diferencias
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Flujo de ejecución de arranque de una máquina virtual
\end_layout

\begin_layout Standard
Con la finalidad de dar una última explicación sobre el funcionamiento interno
 de la web, vamos a ejemplificar de forma detallada cada una de las acciones
 que debe realizar el sistema para atender la petición de arranque de una
 máquina virtual por parte de un alumno que se conecte a nuestra web.
\end_layout

\begin_layout Standard
Una vez el alumno haya pulsado el vinculo que le da acceso a la página de
 CygnusCloud:
\end_layout

\begin_layout Itemize
Se ejecuta la función 
\family typewriter
login
\family default
 dentro del controlador 
\family typewriter
Main
\family default
.
 Esta función crea el formulario de inicio de sesión (utilizando la utilidad
 
\family typewriter
auth
\family default
 que se encarga de la gestión de usuarios) y lo devuelve.
\end_layout

\begin_layout Itemize
Justamente después se ejecuta la vista asociada a esta función (
\begin_inset Quotes eld
\end_inset


\family typewriter
main/login.html
\family default

\begin_inset Quotes erd
\end_inset

), la cual recibe el formulario creado por el controlador, le aplica el
 aspecto correspondiente y lo coloca en la página.
\end_layout

\begin_layout Itemize
Una vez el usuario ha introducido su nombre, contraseña y ha pulsado el
 botón arrancar, el controlador envía una consulta a la base de datos para
 comprobar que el usuario existe y que su contraseña es correcta.
 Tras esto se mira el tipo de usuario y redirecciona a la página que sea
 necesaria.
 En nuestro caso, al ser un alumno el que inicia la sesión, redirecciona
 a la sección 
\family typewriter
runVM
\family default
 del controlador 
\family typewriter
student
\family default
 con el argumento 
\family typewriter
run
\family default
.
\end_layout

\begin_layout Itemize
Una vez en la función 
\family typewriter
runVM
\family default
 del controlador 
\family typewriter
student
\family default
, la cual solo es accesible para alumnos registrados, se evalúa el argumento
 de entrada para comprobar que subsección debe ejecutarse.
 Tras esto, se extrae la lista de asignaturas asociadas a este alumno concreto.
 Para ello, se envía una petición a la base de datos preguntando por estos
 valores.
 Para cada una de las asignaturas encontradas se crea una tabla, cuyas filas
 corresponden a las máquinas virtuales que pueden arrancarse en esta asignatura.
 La información de las máquinas virtuales asociadas a cada asignaturas se
 extrae también a partir de consultas a la base de datos.
 Cada tabla creada se añade al formulario que es devuelto por la función.
\end_layout

\begin_layout Itemize
A continuación se ejecuta la vista 
\family typewriter

\begin_inset Quotes eld
\end_inset

student/runVM.html
\family default

\begin_inset Quotes erd
\end_inset

 la cual recibe el formulario, ajusta su aspecto y lo coloca en la página.
 Además, esta vista, define un script que permite mostrar y ocultar la descripci
ón de las diferentes máquinas virtuales según se encuentren seleccionadas
 o no.
\end_layout

\begin_layout Itemize
Una vez el usuario ha seleccionado alguna máquina virtual y ha pulsado el
 botón de arrancar, el controlador extrae el identificador de la máquina
 virtual y pide al conector que arranque dicha máquina.
 El conector devuelve los parámetros de conexión, los cuales son enviados
 como variable en la redirección a la página 
\family typewriter
vncPage
\family default
, la cual es creada en una nueva pestaña.
\end_layout

\begin_layout Itemize
Llegados al controlador 
\family typewriter
vncClient
\family default
 y a su sección única 
\family typewriter
vncPage
\family default
, se extrae la variable con la información de conexión y se devuelve como
 resultado de la función.
\end_layout

\begin_layout Itemize
La vista asociada a este controlador (
\begin_inset Quotes eld
\end_inset


\family typewriter
vncClient/vncPage.html
\family default

\begin_inset Quotes erd
\end_inset

) recibe los datos de conexión y ejecuta noVNC, el cual se encarga de mostrar
 el escritorio de trabajo por pantalla.
\end_layout

\begin_layout Standard
La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Secuencia-de-arranque"

\end_inset

 muestra un diagrama de secuencia con todo este proceso.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaSecuenciaArranqueMVWeb.pdf
	scale 70
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Secuencia de arranque de una máquina virtual.
\begin_inset CommandInset label
LatexCommand label
name "fig:Secuencia-de-arranque"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Sección sobre el conector
\end_layout

\end_inset


\end_layout

\begin_layout Section
Vista lógica
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetes.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

Diagrama de paquetes de 
\emph on
CygnusCloud
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La funcionalidad del sistema 
\emph on
CygnusCloud 
\emph default
está distribuida entre siete paquetes:
\end_layout

\begin_layout Itemize
en los módulos del paquete 
\family sans
utils
\family default
 se definen clases que se utilizan en varios módulos distintos, como estructuras
 de datos sin problemas de sincronización o clases que ejecutan comandos.
 
\end_layout

\begin_layout Itemize
el paquete 
\family sans
database
\family default
 contiene todas las clases que interactuarán con las bases de datos de los
 tres subsistemas básicos.
 
\end_layout

\begin_layout Itemize
el paquete 
\family sans
network
\family default
 contiene las clases que permiten comunicar un conjunto de máquinas distintas
 a través de una red de área local.
 Dichas comunicaciones se realizan utilizando el protocolo TCP a través
 de la librería de red 
\emph on
twisted
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
virtualMachineServer
\family default
 contiene las clases que, junto con algunas de los paquetes de los que este
 depende, implementan el subsistema servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
clusterServer
\family default
 contiene todas las clases que, junto con algunas de los paquetes de los
 que este depende, implementan el susbsistema servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
webServer
\family default
 contiene todas las clases que, junto con algunas de los paquetes de los
 que este depende, implementan el susbsistema servidor web.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
testing
\family default
 contiene clases utilizadas para depurar los sistemas servidor de máquinas
 virtuales y servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Standard
Las relaciones existentes entre estos paquetes aparecen en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

.
 Por claridad, las dependencias del paquete 
\family sans
virtualMachineServer
\family default
 aparecen en 
\color red
rojo
\color inherit
, las del paquete 
\family sans
clusterServer
\family default
 aparecen en 
\color blue
azul
\color inherit
 y las del resto de paquetes aparecen en negro.
\end_layout

\begin_layout Standard
Los paquetes que acabamos de presentar se descomponen en otros paquetes
 más pequeños.
 Para facilitar la visualización de las dependencias principales entre paquetes,
 hemos optado por no mostrar aquí dicha dicha descomposición.
 Mostraremos la descomposición de cada paquete y las relaciones entre clases
 que justifican la dependencia entre esos paquetes a medida que presentemos
 el diseño.
\end_layout

\begin_layout Subsection
Paquetes y clases significativos de la arquitectura
\end_layout

\begin_layout Standard
En este apartado mostraremos las clases más importantes de cada paquete
 junto con una breve descripción de sus responsabilidades.
\end_layout

\begin_layout Subsubsection

\family sans
utils
\end_layout

\begin_layout Standard
Como ya hemos mencionado, este paquete define un conjunto de clases que
 se utilizan en muchos otros y que, por conveniencia, es mejor tener agrupadas.
 Las clases más relevantes de este paquete son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
Commands
\family default
.
 Esta clase suministra métodos estáticos que permiten ejecutar comandos
 en 
\emph on
foreground
\emph default
 y 
\emph on
background
\emph default
, y también como 
\emph on
root
\emph default
 o como un usuario estándar.
\end_layout

\begin_layout Itemize

\family sans
MultithreadingCounter
\family default
.
 Esta clase almacena el valor de un contador, y dispone de métodos para
 incrementarlo, decrementarlo y leer su valor de forma segura cuando varios
 hilos lo utilizan.
\end_layout

\begin_layout Itemize
Las clases 
\family sans
MultithreadingDictionary
\family default
 y 
\family sans
MultithreadingList
\family default
 definen métodos para manipular de forma segura diccionarios y listas Python
 utilizados por varios hilos.
\end_layout

\begin_layout Itemize
La clase 
\family sans
MultithreadingPriorityQueue
\family default
 define métodos para manipular una cola de prioridad utilizada por varios
 hilos.
\end_layout

\begin_layout Itemize
Las clases 
\family sans
BasicThread
\family default
 y 
\family sans
QueueProcessingThread
\family default
 añaden funcionalidad adicional a los hilos estándar de Python para que
 estos se detengan ante las peticiones de otros y para que procesen una
 cola de elementos respectivamente.
\end_layout

\begin_layout Subsubsection

\family sans
database
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesDatabase.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-database"

\end_inset

El paquete 
\family sans
database
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este paquete contiene todas las clases que interactuarán con las bases de
 datos de los distintos susbsistemas de 
\emph on
CygnusCloud
\emph default
.
 Tal y como se muestra en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-database"

\end_inset

, estas clases se distribuyen en cinco subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
utils
\family default
 contiene todas las clases que permiten interactuar con una base de datos
 MySQL desde Python.
 De entre todas ellas, destacan
\family sans
 DBConfigurator
\family default
 y 
\family sans
BasicDatabaseConnector
\family default
, que permiten configurar el esquema de una base de datos y realizar consultas
 y actualizaciones sobre una base de datos respectivamente.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
clusterServer
\family default
 contiene la clase 
\family sans
ClusterServerDatabaseConnector
\family default
, que permite manipular la base de datos del servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
systemStatus
\family default
 contiene la clase 
\family sans
SystemStatusDBWriter
\family default
, que permite actualizar la base de datos que almacena el estado de todo
 el sistema.
\end_layout

\begin_layout Itemize
el paquete
\family sans
 vmServer
\family default
 contiene las clases 
\family sans
ImageManager
\family default
 y 
\family sans
RuntimeData
\family default
, que permiten manipular la base de datos del servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
tests
\family default
 contiene pruebas unitarias de todas las clases que manipulan una base de
 datos.
\end_layout

\begin_layout Subsubsection

\family sans
network
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesNetwork.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-network"

\end_inset

El paquete 
\family sans
network
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las clases del paquete 
\family sans
network
\family default
 interactúan con la librería de red 
\emph on
twisted
\emph default
 para comunicar una máquina con otra u otras conectadas a la misma red.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-network"

\end_inset

 muestra que este paquete se descompone en seis subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
exceptions
\family default
 contiene todas las clases de excepción que utilizan las clases del paquete
 
\family sans
network
\family default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
packets
\family default
 contiene la clase 
\family sans
Packet
\family default
, que ofrece una interfaz de alto nivel para enviar elementos de los tipos
 de datos básicos (como valores enteros y 
\emph on
strings
\emph default
) a través de la red.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
threads
\family default
 contiene las clases 
\family sans
ConnectionMonitoringThread
\family default
, 
\family sans
DataProcessingThread
\family default
, 
\family sans
TwistedReactorThread
\family default
 y 
\family sans
ServerWaitThread
\family default
, correspondientes a los distintos tipos de hilo que se utilizan en la implement
ación de la red.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
twistedInteraction
\family default
 contiene las clases 
\family sans
NetworkConnection
\family default
 y 
\family sans
CygnusCloudProtocol
\family default
, que se utilizan para establecer conexiones y para realizar el envío y
 la recepción de datos utilizando la librería de red 
\emph on
twisted
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
manager
\family default
 contiene las clases 
\family sans
NetworkManager
\family default
 y 
\family sans
NetworkCallback
\family default
.
 La primera ofrece una interfaz de alto nivel para establecer una conexión
 entre dos máquinas y enviar datos entre las mismas, y la segunda define
 la interfaz que se utiliza para procesar los datos recibidos a través de
 la red.
\end_layout

\begin_layout Itemize
finalmente, el paquete
\family sans
 tests
\family default
 contiene pruebas de los módulos de este paquete.
\end_layout

\begin_layout Subsubsection

\family sans
virtualMachineServer
\end_layout

\begin_layout Standard
Este paquete contiene las clases del subsistema servidor de máquinas virtuales
 que interactuan con el hipervisor y también las de mayor nivel de abstracción
 de dicho subsistema.
 Las más importante son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
LibvirtConnector
\family default
, que interactúa con el hipervisor KVM a través de la librería 
\emph on
libvir
\emph default
t para instanciar y destruir máquinas virtuales.
\end_layout

\begin_layout Itemize

\family sans
VMClient
\family default
, que atiende las peticiones recibidas por el servidor de máquinas virtuales.
 Entre otras cosas, se ocupa de asignar y liberar los recursos asociados
 a cada máquina virtual y de ordenar la instanciación y la destrucción de
 las mismas.
\end_layout

\begin_layout Itemize

\family sans
ConfigurationFileEditor
\family default
, que manipula los ficheros 
\family typewriter
.xml
\family default
 que definen la configuración de una máquina virtual para incluir los recursos
 asociados a dicha máquina.
\end_layout

\begin_layout Itemize

\family sans
VMServerPacketHandler
\family default
, que proporciona métodos para crear y leer los paquetes utilizados por
 el subsistema servidor de máquinas virtuales.
 
\end_layout

\begin_layout Itemize

\family sans
VirtualNetworkManager
\family default
, que configura la red virtual a la que se conectarán las máquinas virtuales.
\end_layout

\begin_layout Subsubsection

\family sans
clusterServer
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesClusterServer.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-clusterServer"

\end_inset

El paquete 
\family sans
clusterServer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tal y como se muestra en la figura , el paquete 
\family sans
clusterServer
\family default
, que contiene las clases del subsistema servidor del cluster de mayor nivel
 de abstracción, consta de tres subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
network
\family default
 contiene las clases 
\family sans
WebCallback
\family default
, 
\family sans
VMServerCallback
\family default
 y 
\family sans
MainServerPacketHandle
\family default
r.
 Las dos primeras definen los métodos a los que se llamará cuando se reciba
 un paquete procedente del servidor web y de un servidor de máquinas virtuales
 respectivamente, y la última se comporta igual que la clase 
\family sans
VMServerPacketHandler
\family default
, proporcionando métodos para leer y crear los paquetes que utiliza el servidor
 del 
\emph on
cluster
\emph default
 para comunicarse con el servidor web.
\end_layout

\begin_layout Itemize
el paquete l
\family sans
oadBalancing
\family default
 contiene la clase 
\family sans
LoadBalancer
\family default
, que define la interfaz que usarán todos los distintos algoritmos que realizan
 el balanceado de carga entre distintos servidores de máquinas virtuales.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
reactor
\family default
 contiene la clase 
\family sans
MainServerReactor
\family default
, que procesa adecuadamente los paquetes recibidos desde un servidor de
 máquinas virtuales o desde el servidor web.
\end_layout

\begin_layout Subsubsection

\family sans
webServer
\end_layout

\begin_layout Standard
El paquete webServer se encuentra distribuido en un conjunto de paquetes
 que hacen referencia a los diferentes tipos de elementos necesarios para
 implementar la funcionalidad de la web.
 Estos paquetes son:
\end_layout

\begin_layout Itemize
Vistas : Paquetes con el conjunto de vistas que definen la representación
 de las páginas
\end_layout

\begin_layout Itemize
Controladores : Paquete que contiene los módulos python encargados de manejar
 las diferentes funcionalidades de la web.
\end_layout

\begin_layout Itemize
Modelos : Incluye dos módulos python encargados de definir dos aspectos
 importantes de la web.
 El primer módulo, menu, introduce la información sobre la versión , las
 palabras clave y todos los aspectos generales de la web.
 El segundo, db, se encarga de crear las tablas necesarias que serán utilizadas
 para almacenar la información manejada por la web.
\end_layout

\begin_layout Itemize
Lenguajes : Incluye un conjunto de diccionarios que permiten traducir la
 web a diferentes idiomas.
\end_layout

\begin_layout Itemize
Archivos estáticos : Este paquete incluye las css , js e imagenes necesarias
 para definir el aspecto de la web.
 También incluye el controlador noVNC.
\end_layout

\begin_layout Itemize
Módulos : En este paquete se encuentran todos los módulos python secundarios
 que serán utilizados por los controladores.
\end_layout

\begin_layout Subsubsection

\family sans
testing
\end_layout

\begin_layout Standard
El paquete 
\family sans
testing
\family default
 contiene clases que permiten comprobar el correcto funcionamiento de los
 subsistemas servidor de máquinas virtuales y servidor del cluster.
 Sus clases son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
DummyVMServer
\family default
, que imita el comportamiento de un servidor de máquinas virtuales y no
 instancia máquinas.
 Esta clase se utiliza para comprobar el funcionamiento del subsistema servidor
 del cluster.
\end_layout

\begin_layout Itemize

\family sans
VirtualMachineServerTester
\family default
.
 Esta clase imita al servidor principal, haciendo posible el envío de cualquier
 secuencia de órdenes a un servidor de máquinas virtuales.
 Por ello, se utiliza para depurar dicho subsistema.
\end_layout

\begin_layout Itemize

\family sans
ClusterServerTester
\family default
.
 Esta clase imita al servidor web, lo que permite enviar cualquier secuencia
 de órdenes a un servidor de 
\emph on
cluster
\emph default
.
 Así, esta clase se utiliza para depurar este subsistema.
\end_layout

\begin_layout Section
Vista de procesos
\end_layout

\begin_layout Section
Vista de despliegue
\end_layout

\begin_layout Section
Vista de implementación
\end_layout

\end_body
\end_document
