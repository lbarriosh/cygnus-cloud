#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Arquitectura del sistema
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: meter referencias noVNC, KVM y Twisted
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
En este capítulo presentaremos una visión general de la arquitectura de
 
\emph on
CygnusCloud
\emph default
.
 Para facilitar su comprensión, hemos intentado que la claridad prevalezca
 a la hora de exponer los distintos conceptos y decisiones de diseño.
 Por ello, evitaremos a toda costa realizar descripciones exhaustivas de
 todas y cada una de las clases y de sus distintos atributos.
 Si el lector desea conocer con total precisión qué atributos y qué métodos
 tiene cada clase, cómo se comporta cierto método o cuál es la finalidad
 de un determinado atributo, le remitimos al código fuente, extensamente
 comentado.
\end_layout

\begin_layout Standard
Por otra parte, en este capítulo también prestaremos especial atención a
 las decisiones de diseño que hemos tomado ya que, a nuestro parecer, son
 fundamentales para comprender el funcionamiento del sistema, sus ventajas
 y sus limitaciones.
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
Los contenidos de este capítulo se agrupan en las siguientes secciones:
\end_layout

\begin_layout Enumerate
La presente 
\series bold
introducción
\series default
.
\end_layout

\begin_layout Enumerate

\series bold
Objetivos de la arquitectura y restricciones
\series default
.
 En esta sección expondremos todos los objetivos que se tuvieron al diseñar
 
\emph on
CygnusCloud
\emph default
, y también recopilaremos las restricciones con las que hemos tenido que
 tratar a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Enumerate

\series bold
Subsistemas de 
\emph on
CygnusCloud
\series default
\emph default
.
 En esta sección mostraremos, en términos generales, qué subsistemas componen
 
\emph on
CygnusCloud 
\emph default
y qué responsabilidades tienen asignadas.
 Esta información es fundamental para comprender la arquitectura, y por
 ello aparece antes de presentar todas las vistas de la misma.
\end_layout

\begin_layout Enumerate

\series bold
Vista lógica
\series default
.
 En esta sección, mostraremos cómo las funciones de cada subsistema se distribuy
en entre sus distintos módulos con la ayuda de un diagrama de paquetes.
 Además, utilizaremos diagramas de clase y diagramas de secuencia para exponer
 las responsabilidades de cada elemento significativo de la arquitectura
 y sus relaciones con el resto de componentes de la misma.
\end_layout

\begin_layout Enumerate

\series bold
Vista de procesos
\series default
.
 En ella mostraremos el funcionamiento de cada subsistema desde el punto
 de vista de los procesos ligeros o 
\emph on
threads
\emph default
, y también discutiremos el cometido de los mismos.
\end_layout

\begin_layout Enumerate

\series bold
Vista de despliegue
\series default
.
 En esta sección mostraremos cómo se distribuyen los distintos subsistemas
 que forman parte de 
\emph on
CygnusCloud
\emph default
 entre las distintas máquinas que forman parte de la infraestructura utilizada.
\end_layout

\begin_layout Enumerate

\series bold
Vista de implementación
\series default
.
 Concluiremos el presente capítulo con esta sección, en la que describiremos
 los componentes que se distribuyen con cada subsistema.
\end_layout

\begin_layout Subsection
Sobre los diagramas UML de este documento
\end_layout

\begin_layout Standard
Para que el aumento del tamaño de los diagramas UML en un lector de ficheros
 PDF no suponga una pérdida de calidad de los mismos, hemos procurado incrustarl
os en este documento como ficheros 
\family typewriter
.pdf
\family default
.
\end_layout

\begin_layout Standard
El comando de 
\emph on
IBM Rational Software Architect 7.5
\emph default
 que los genera usa degradados para mejorar la presentación de los diagramas
 de clase y de los diagramas de paquetes, haciendo que los elementos que
 aparecen en la parte superior del diagrama sean más oscuros que los que
 aparecen en la parte inferior del mismo.
\end_layout

\begin_layout Standard
En cualquier caso, este efecto 
\emph on
no
\emph default
 tiene asociado ningún tipo de significado en los diagramas.
\end_layout

\begin_layout Section
Objetivos de la arquitectura y restricciones
\end_layout

\begin_layout Standard
En esta sección describiremos todos los objetivos que consideramos a la
 hora de diseñar la arquitectura, así como las restricciones que hemos tenido
 en cuenta a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Subsection
Objetivos
\end_layout

\begin_layout Standard
Con 
\emph on
CygnusCloud
\emph default
 no sólo queremos proporcionar a los estudiantes de la Facultad de Informática
 más laboratorios en los que trabajar: también queremos ofrecer una alternativa
 viable para que cualquier alumno pueda sacar el máximo partido a cualquier
 aula de informática infrautilizada del campus.
 Por ello, la 
\emph on
escalabilidad 
\emph default
es una característica fundamental del diseño: utilizando más servidores
 y más ancho de banda, es posible que 
\emph on
CygnusCloud
\emph default
 atienda a un mayor número de usuarios.
 
\end_layout

\begin_layout Standard
Además, para que alumnos y profesores de cualquier titulación sean capaces
 de utilizar 
\emph on
CygnusCloud 
\emph default
en cualquier aula de informática, nuestro sistema debe ser 
\emph on
fácil de usar
\emph default
, y también debe poder utilizarse sin necesidad de instalar 
\emph on
software
\emph default
 en dichas aulas.
\end_layout

\begin_layout Standard
Por otra parte, considerando la actual situación de crisis económica, también
 deseamos que 
\emph on
CygnusCloud
\emph default
 sirva para mostrar cómo sacar el máximo partido a los recursos informáticos
 existentes en la Universidad.
 Así, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con 
\emph on
coste cero
\emph default
, lo que nos ha obligado a buscar la 
\emph on
eficiencia
\emph default
 a la hora de diseñarlo.
\end_layout

\begin_layout Standard
Finalmente, dado que el desarrollo de 
\emph on
CygnusCloud 
\emph default
sólo se extiende a lo largo de un curso académico, también queremos que
 cualquiera que lo desee pueda continuarlo.
 Por ello, hemos procurado que nuestro diseño también se caracterice por
 su 
\emph on
simplicidad
\emph default
: en todos los procesos se sigue siempre una secuencia de pasos muy marcados,
 que sólo varía en función de las características de las máquinas que intervenga
n.
\end_layout

\begin_layout Subsection
Restricciones
\begin_inset CommandInset label
LatexCommand label
name "sub:Restricciones-arquitectura"

\end_inset


\end_layout

\begin_layout Standard
Tal y como mencionamos en el apartado anterior, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con coste cero.
 Para ello, es imprescindible construir este sistema con 
\emph on
software
\emph default
 gratuito.
 Como los hipervisores deben instalarse en un sistema operativo en concreto,
 que tiene que ser gratuito, esto ha impuesto la primera restricción importante:
 la 
\emph on
dependencia de la plataforma GNU/Linux
\emph default
.
 
\end_layout

\begin_layout Standard
Y dado que existe una ingente cantidad de distribuciones 
\emph on
GNU/Linux
\emph default
 que pueden requerir procedimientos de configuración diferentes, es fundamental
 utilizar mecanismos estándar para interactuar con los hipervisores y, a
 ser posible, lenguajes interpretados, para garantizar que nuestro sistema
 funcione sin problemas en cualquier sistema 
\emph on
GNU/Linux
\emph default
.
 Esto ha impuesto una doble restricción: 
\end_layout

\begin_layout Itemize
el uso obligatorio de la librería 
\emph on
libvirt 
\emph default
para interactuar con los hipervisores y configurar las redes virtuales.
\end_layout

\begin_layout Itemize
el uso de un lenguaje de tipo interpretado, como Java o Python, como principal
 lenguaje de programación.
\end_layout

\begin_layout Standard
Por otra parte, la práctica totalidad de los 
\emph on
frameworks
\emph default
 que hemos considerado para implementar la web se basan en el modelo vista-contr
olador o en otros patrones de diseño derivados de él, lo que nos ha obligado
 a utilizar dicho patrón de en el servidor web.
\end_layout

\begin_layout Standard
Finalmente, para evitar la aparición de incompatibilidades entre formatos
 de paquete hemos tenido que utilizar la misma librería de red para comunicar
 todos los subsistemas que componen 
\emph on
CygnusCloud
\emph default
.
 Puesto que cada librería de red está implementada en cierto lenguaje, nos
 hemos visto obligados a emplear el mismo lenguaje de programación para
 implementar la mayoría de subsistemas, lo que también ha restringido significat
ivamente el número de 
\emph on
frameworks
\emph default
 que hemos podido considerar para implementar la web.
\end_layout

\begin_layout Section
Subsistemas de 
\emph on
CygnusCloud
\end_layout

\begin_layout Standard
El sistema 
\emph on
CygnusCloud
\emph default
 está formado por un conjunto de susbsistemas conectados a una misma red
 que cooperan entre sí para suministrar servicios a los usuarios.
 Cada uno de estos subsistemas tiene una funcionalidad claramente delimitada,
 y residirá en una máquina posiblemente distinta.
\end_layout

\begin_layout Standard
Los subsistemas básicos que componen 
\emph on
CygnusCloud
\emph default
 y sus principales responsabilidades son los siguientes:
\end_layout

\begin_layout Itemize
el 
\series bold
servidor de máquinas virtuales
\series default
 reside en todas las máquinas que alojarán las máquinas virtuales de los
 usuarios.
 Su misión es interactuar con el hipervisor en respuesta a las peticiones
 recibidas para instanciar y destruir máquinas virtuales, enviar los datos
 de conexión a cada máquina virtual, suministrar estadísticas que reflejen
 su estado actual,\SpecialChar \ldots{}

\end_layout

\begin_layout Itemize
el 
\series bold
servidor del 
\emph on
cluster
\series default
\emph default
 reside en una máquina asignada a cada 
\emph on
cluster
\emph default
 de servidores de máquinas virtuales.
 Además de realizar el balanceado de carga para distribuir las máquinas
 virtuales entre los distintos servidores de máquinas virtuales del 
\emph on
cluster
\emph default
, también recopila periódicamente el estado de todos sus servidores de máquinas
 virtuales.
\end_layout

\begin_layout Itemize
el 
\series bold
servidor web
\series default
 reside en una única máquina.
 Su misión es alojar la web, que permite a los usuarios utilizar el sistema
 
\emph on
CygnusCloud
\emph default
.
 Este sistema realiza el control de acceso, recopila periódicamente información
 de estado desde todos los servidores de 
\emph on
cluster
\emph default
 y envía a los mismos todas las peticiones de los usuarios.
\end_layout

\begin_layout Standard

\emph on
CygnusCloud
\emph default
 también está compuesto por dos subsistemas adicionales: el 
\series bold
cliente de escritorio remoto noVNC
\series default
 y el 
\series bold
hipervisor
\series default
 
\series bold
KVM
\series default
.
 Puesto que ambos han sido desarrollados por terceros, en este capítulo
 sólo hablaremos de ellos en líneas generales y sólo cuando sea imprescindible
 para comprender el funcionamiento del sistema.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Vista lógica
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetes.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

Diagrama de paquetes de 
\emph on
CygnusCloud
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La funcionalidad del sistema 
\emph on
CygnusCloud 
\emph default
está distribuida entre siete paquetes:
\end_layout

\begin_layout Itemize
en los módulos del paquete 
\family sans
utils
\family default
 se definen clases que se utilizan en varios módulos distintos, como estructuras
 de datos sin problemas de sincronización o clases que ejecutan comandos.
 
\end_layout

\begin_layout Itemize
el paquete 
\family sans
database
\family default
 contiene todas las clases que interactuarán con las bases de datos de los
 tres subsistemas básicos.
 
\end_layout

\begin_layout Itemize
el paquete 
\family sans
network
\family default
 contiene las clases que permiten comunicar un conjunto de máquinas distintas
 a través de una red de área local.
 Dichas comunicaciones se realizan utilizando el protocolo TCP a través
 de la librería de red 
\emph on
twisted
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
virtualMachineServer
\family default
 contiene las clases que, junto con algunas de los paquetes de los que este
 depende, implementan el subsistema servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
clusterServer
\family default
 contiene todas las clases que, junto con algunas de los paquetes de los
 que este depende, implementan el susbsistema servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
webServer
\family default
 contiene todas las clases que, junto con algunas de los paquetes de los
 que este depende, implementan el susbsistema servidor web.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
testing
\family default
 contiene clases utilizadas para depurar los sistemas servidor de máquinas
 virtuales y servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Standard
Las relaciones existentes entre estos paquetes aparecen en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

.
 Por claridad, las dependencias del paquete 
\family sans
virtualMachineServer
\family default
 aparecen en 
\color red
rojo
\color inherit
, las del paquete 
\family sans
clusterServer
\family default
 aparecen en 
\color blue
azul
\color inherit
 y las del resto de paquetes aparecen en negro.
\end_layout

\begin_layout Standard
Los paquetes que acabamos de presentar se descomponen en otros paquetes
 más pequeños.
 Para facilitar la visualización de las dependencias principales entre paquetes,
 hemos optado por no mostrar aquí dicha dicha descomposición.
 Mostraremos la descomposición de cada paquete y las relaciones entre clases
 que justifican la dependencia entre esos paquetes a medida que presentemos
 el diseño.
\end_layout

\begin_layout Subsection
Paquetes y clases significativos de la arquitectura
\end_layout

\begin_layout Standard
En este apartado mostraremos las clases más importantes de cada paquete
 junto con una breve descripción de sus responsabilidades.
\end_layout

\begin_layout Subsubsection

\family sans
utils
\end_layout

\begin_layout Standard
Como ya hemos mencionado, este paquete define un conjunto de clases que
 se utilizan en muchos otros y que, por conveniencia, es mejor tener agrupadas.
 Las clases más relevantes de este paquete son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
Commands
\family default
.
 Esta clase suministra métodos estáticos que permiten ejecutar comandos
 en 
\emph on
foreground
\emph default
 y 
\emph on
background
\emph default
, y también como 
\emph on
root
\emph default
 o como un usuario estándar.
\end_layout

\begin_layout Itemize

\family sans
MultithreadingCounter
\family default
.
 Esta clase almacena el valor de un contador, y dispone de métodos para
 incrementarlo, decrementarlo y leer su valor de forma segura cuando varios
 hilos lo utilizan.
\end_layout

\begin_layout Itemize
Las clases 
\family sans
MultithreadingDictionary
\family default
 y 
\family sans
MultithreadingList
\family default
 definen métodos para manipular de forma segura diccionarios y listas Python
 utilizados por varios hilos.
\end_layout

\begin_layout Itemize
La clase 
\family sans
MultithreadingPriorityQueue
\family default
 define métodos para manipular una cola de prioridad utilizada por varios
 hilos.
\end_layout

\begin_layout Itemize
Las clases 
\family sans
BasicThread
\family default
 y 
\family sans
QueueProcessingThread
\family default
 añaden funcionalidad adicional a los hilos estándar de Python para que
 estos se detengan ante las peticiones de otros y para que procesen una
 cola de elementos respectivamente.
\end_layout

\begin_layout Subsubsection

\family sans
database
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesDatabase.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-database"

\end_inset

El paquete 
\family sans
database
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este paquete contiene todas las clases que interactuarán con las bases de
 datos de los distintos susbsistemas de 
\emph on
CygnusCloud
\emph default
.
 Tal y como se muestra en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-database"

\end_inset

, estas clases se distribuyen en cinco subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
utils
\family default
 contiene todas las clases que permiten interactuar con una base de datos
 MySQL desde Python.
 De entre todas ellas, destacan
\family sans
 DBConfigurator
\family default
 y 
\family sans
BasicDatabaseConnector
\family default
, que permiten configurar el esquema de una base de datos y realizar consultas
 y actualizaciones sobre una base de datos respectivamente.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
clusterServer
\family default
 contiene la clase 
\family sans
ClusterServerDatabaseConnector
\family default
, que permite manipular la base de datos del servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
systemStatus
\family default
 contiene la clase 
\family sans
SystemStatusDBWriter
\family default
, que permite actualizar la base de datos que almacena el estado de todo
 el sistema.
\end_layout

\begin_layout Itemize
el paquete
\family sans
 vmServer
\family default
 contiene las clases 
\family sans
ImageManager
\family default
 y 
\family sans
RuntimeData
\family default
, que permiten manipular la base de datos del servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
tests
\family default
 contiene pruebas unitarias de todas las clases que manipulan una base de
 datos.
\end_layout

\begin_layout Subsubsection

\family sans
network
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesNetwork.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-network"

\end_inset

El paquete 
\family sans
network
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las clases del paquete 
\family sans
network
\family default
 interactúan con la librería de red 
\emph on
twisted
\emph default
 para comunicar una máquina con otra u otras conectadas a la misma red.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-network"

\end_inset

 muestra que este paquete se descompone en seis subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
exceptions
\family default
 contiene todas las clases de excepción que utilizan las clases del paquete
 
\family sans
network
\family default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
packets
\family default
 contiene la clase 
\family sans
Packet
\family default
, que ofrece una interfaz de alto nivel para enviar elementos de los tipos
 de datos básicos (como valores enteros y 
\emph on
strings
\emph default
) a través de la red.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
threads
\family default
 contiene las clases 
\family sans
ConnectionMonitoringThread
\family default
, 
\family sans
DataProcessingThread
\family default
, 
\family sans
TwistedReactorThread
\family default
 y 
\family sans
ServerWaitThread
\family default
, correspondientes a los distintos tipos de hilo que se utilizan en la implement
ación de la red.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
twistedInteraction
\family default
 contiene las clases 
\family sans
NetworkConnection
\family default
 y 
\family sans
CygnusCloudProtocol
\family default
, que se utilizan para establecer conexiones y para realizar el envío y
 la recepción de datos utilizando la librería de red 
\emph on
twisted
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
manager
\family default
 contiene las clases 
\family sans
NetworkManager
\family default
 y 
\family sans
NetworkCallback
\family default
.
 La primera ofrece una interfaz de alto nivel para establecer una conexión
 entre dos máquinas y enviar datos entre las mismas, y la segunda define
 la interfaz que se utiliza para procesar los datos recibidos a través de
 la red.
\end_layout

\begin_layout Itemize
finalmente, el paquete
\family sans
 tests
\family default
 contiene pruebas de los módulos de este paquete.
\end_layout

\begin_layout Subsubsection

\family sans
virtualMachineServer
\end_layout

\begin_layout Standard
Este paquete contiene las clases del subsistema servidor de máquinas virtuales
 que interactuan con el hipervisor y también las de mayor nivel de abstracción
 de dicho subsistema.
 Las más importante son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
LibvirtConnector
\family default
, que interactúa con el hipervisor KVM a través de la librería 
\emph on
libvir
\emph default
t para instanciar y destruir máquinas virtuales.
\end_layout

\begin_layout Itemize

\family sans
VMClient
\family default
, que atiende las peticiones recibidas por el servidor de máquinas virtuales.
 Entre otras cosas, se ocupa de asignar y liberar los recursos asociados
 a cada máquina virtual y de ordenar la instanciación y la destrucción de
 las mismas.
\end_layout

\begin_layout Itemize

\family sans
ConfigurationFileEditor
\family default
, que manipula los ficheros 
\family typewriter
.xml
\family default
 que definen la configuración de una máquina virtual para incluir los recursos
 asociados a dicha máquina.
\end_layout

\begin_layout Itemize

\family sans
VMServerPacketHandler
\family default
, que proporciona métodos para crear y leer los paquetes utilizados por
 el subsistema servidor de máquinas virtuales.
 
\end_layout

\begin_layout Itemize

\family sans
VirtualNetworkManager
\family default
, que configura la red virtual a la que se conectarán las máquinas virtuales.
\end_layout

\begin_layout Subsubsection

\family sans
clusterServer
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesClusterServer.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-clusterServer"

\end_inset

El paquete 
\family sans
clusterServer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tal y como se muestra en la figura , el paquete 
\family sans
clusterServer
\family default
, que contiene las clases del subsistema servidor del cluster de mayor nivel
 de abstracción, consta de tres subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
network
\family default
 contiene las clases 
\family sans
WebCallback
\family default
, 
\family sans
VMServerCallback
\family default
 y 
\family sans
MainServerPacketHandle
\family default
r.
 Las dos primeras definen los métodos a los que se llamará cuando se reciba
 un paquete procedente del servidor web y de un servidor de máquinas virtuales
 respectivamente, y la última se comporta igual que la clase 
\family sans
VMServerPacketHandler
\family default
, proporcionando métodos para leer y crear los paquetes que utiliza el servidor
 del 
\emph on
cluster
\emph default
 para comunicarse con el servidor web.
\end_layout

\begin_layout Itemize
el paquete l
\family sans
oadBalancing
\family default
 contiene la clase 
\family sans
LoadBalancer
\family default
, que define la interfaz que usarán todos los distintos algoritmos que realizan
 el balanceado de carga entre distintos servidores de máquinas virtuales.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
reactor
\family default
 contiene la clase 
\family sans
MainServerReactor
\family default
, que procesa adecuadamente los paquetes recibidos desde un servidor de
 máquinas virtuales o desde el servidor web.
\end_layout

\begin_layout Subsubsection

\family sans
webServer
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: rellenar esto
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\family sans
testing
\end_layout

\begin_layout Standard
El paquete 
\family sans
testing
\family default
 contiene clases que permiten comprobar el correcto funcionamiento de los
 subsistemas servidor de máquinas virtuales y servidor del cluster.
 Sus clases son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
DummyVMServer
\family default
, que imita el comportamiento de un servidor de máquinas virtuales y no
 instancia máquinas.
 Esta clase se utiliza para comprobar el funcionamiento del subsistema servidor
 del cluster.
\end_layout

\begin_layout Itemize

\family sans
VirtualMachineServerTester
\family default
.
 Esta clase imita al servidor principal, haciendo posible el envío de cualquier
 secuencia de órdenes a un servidor de máquinas virtuales.
 Por ello, se utiliza para depurar dicho subsistema.
\end_layout

\begin_layout Itemize

\family sans
ClusterServerTester
\family default
.
 Esta clase imita al servidor web, lo que permite enviar cualquier secuencia
 de órdenes a un servidor de 
\emph on
cluster
\emph default
.
 Así, esta clase se utiliza para depurar este subsistema.
\end_layout

\begin_layout Subsection
Decisiones de diseño
\end_layout

\begin_layout Standard
En esta sección discutiremos brevemente las decisiones de diseño más importantes
 que hemos tomado a lo largo del desarrollo del proyecto.
\end_layout

\begin_layout Subsubsection
Uso de 
\emph on
Python
\emph default
 como principal lenguaje de programación
\end_layout

\begin_layout Standard
Tal y como mencionamos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, debido a las distintas características y procedimientos de configuración
 de las distribuciones 
\emph on
GNU/Linux
\emph default
, es altamente recomendable utilizar lenguajes interpretados para facilitar
 la portabilidad del sistema.
 Los lenguajes de este tipo que consideramos al inicio del proyecto fueron
 esencialmente dos: 
\emph on
Java
\emph default
 y 
\emph on
Python
\emph default
.
 
\end_layout

\begin_layout Standard
El uso de 
\emph on
Python 
\emph default
tenía las siguientes ventajas:
\end_layout

\begin_layout Itemize
el grado de adopción de 
\emph on
Python
\emph default
 no ha hecho más que crecer a lo largo de los últimos años, por lo que aprender
 a utilizarlo era muy importante para mejorar nuestras perspectivas laborales.
\end_layout

\begin_layout Itemize
a diferencia de 
\emph on
Java
\emph default
, 
\emph on
Python
\emph default
 es 
\emph on
software
\emph default
 libre, por lo que sus restricciones de uso son considerablemente menores
 que las de 
\emph on
Java
\emph default
.
\end_layout

\begin_layout Itemize
la interacción entre 
\emph on
scripts
\emph default
 y programas escritos en 
\emph on
Python
\emph default
 es claramente mejor en 
\emph on
Python
\emph default
 que en Java.
\end_layout

\begin_layout Itemize
los programas escritos en 
\emph on
Python
\emph default
 son mucho más breves y más fáciles de leer que los programas escritos en
 
\emph on
Java
\emph default
, lo que facilita la comprensión del código y su depuración.
 
\end_layout

\begin_layout Itemize
para ejecutar un programa 
\emph on
Python
\emph default
 se utiliza su propio código fuente, lo que facilita enormemente la resolución
 de los problemas que aparecen al utilizar componentes de terceros.
\end_layout

\begin_layout Itemize

\emph on
Python
\emph default
 forma parte de la instalación estándar de la inmensa mayoría de distribuciones
 
\emph on
GNU/Linux
\emph default
, lo que simplifica el proceso de instalación de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Standard
Los grandes inconvenientes del uso de 
\emph on
Python
\emph default
 eran principalmente dos:
\end_layout

\begin_layout Itemize
era necesario aprender a utilizar una tecnología nueva, cosa que no ocurría
 en el caso de 
\emph on
Java
\emph default
.
\end_layout

\begin_layout Itemize
en general, hay muchas más bibliotecas y 
\emph on
frameworks
\emph default
 escritos en 
\emph on
Java
\emph default
 que escritos en 
\emph on
Python
\emph default
, lo que limitaba las alternativas que podíamos considerar a lo largo del
 desarrollo del proyecto.
\end_layout

\begin_layout Standard
Ante el gran número de ventajas que tenía el uso de 
\emph on
Python
\emph default
, estos dos inconvenientes nos parecieron aceptables, por lo que decidimos
 utilizar 
\emph on
Python
\emph default
 como principal lenguaje de programación.
\end_layout

\begin_layout Subsubsection
Descomposición del sistema 
\emph on
CygnusCloud
\emph default
 en tres subsistemas
\end_layout

\begin_layout Standard
Instanciar una máquina virtual requiere muchos recursos.
 No basta con asignarle memoria RAM y tiempo de CPU: también es necesario
 reservar espacio en disco en el que almacenar los datos de los usuarios
 y los archivos de paginación, conectar la máquina a una red, configurar
 un servidor de escritorio remoto o un servidor SSH para poder acceder a
 ella,\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Así pues, para que nuestro sistema sea escalable, es imprescindible la existenci
a de nodos que alberguen exclusivamente máquinas virtuales y que se ocupen
 de su instanciación y descomposición: los 
\series bold
servidores de máquinas virtuales
\series default
.
 
\end_layout

\begin_layout Standard
Por otra parte, es necesario distribuir las máquinas virtuales activas entre
 todos estos nodos y recopilar información de estado, por lo que es necesario
 utilizar al menos una máquina adicional, a la que llamaremos por ahora
 
\begin_inset Quotes eld
\end_inset

servidor principal
\begin_inset Quotes erd
\end_inset

.
 Esta hipotética máquina también debería albergar la web, a través de la
 cual los usuarios utilizan el sistema.
 
\end_layout

\begin_layout Standard
Es importante notar que, una vez instanciadas las máquinas virtuales, los
 usuarios se comunican directamente con un servidor de máquinas virtuales,
 es decir, el tráfico generado por el protocolo VNC y el tráfico generado
 para conectarse a internet no atraviesa el servidor de máquinas virtuales.
\end_layout

\begin_layout Standard
Esta arquitectura, a pesar de ser sencilla, tiene un serio inconveniente:
 al aumentar el número de usuarios (y, por tanto, el número de servidores
 de máquinas virtuales) el 
\begin_inset Quotes eld
\end_inset

servidor principal
\begin_inset Quotes erd
\end_inset

 se convierte en un cuello de botella: no sólo debe atender un número de
 peticiones procedentes de la web cada vez mayor, sino que también debe
 procesar cada vez más tráfico procedente de los servidores de máquinas
 virtuales.
\end_layout

\begin_layout Standard
Este problema puede resolverse distribuyendo la funcionalidad de nuestro
 
\begin_inset Quotes eld
\end_inset

servidor principal
\begin_inset Quotes erd
\end_inset

 en dos máquinas: el 
\series bold
servidor de 
\emph on
cluster
\emph default
 
\series default
y el 
\series bold
servidor web
\series default
.
 Así, 
\end_layout

\begin_layout Itemize
cada usuario tendrá asignado un servidor de 
\emph on
cluster
\emph default
, al que se dirigirán todas sus peticiones.
\end_layout

\begin_layout Itemize
los servidores de 
\emph on
cluster
\emph default
 se encargarán exclusivamente de coordinar el funcionamiento de todos los
 servidores de máquinas virtuales que tienen asignados.
\end_layout

\begin_layout Itemize
el servidor web atenderá exclusivamente todas las peticiones que se reciban
 desde la web.
 Para ello, intercambiará datos con los servidores de 
\emph on
cluster
\emph default
 correspondientes.
\end_layout

\begin_layout Standard
La nueva alternativa tiene un serio inconveniente: el tráfico total que
 se genera es mayor, ya que hay que comunicar el servidor web con los distintos
 servidores de cluster.
 Pero su gran ventaja es la escalabilidad: añadiendo más servidores de máquinas
 virtuales y más servidores de 
\emph on
cluster 
\emph default
es posible atender a un número mucho mayor de alumnos.
\end_layout

\begin_layout Standard
Considerando el elevado número de estudiantes de la Universidad Complutense,
 nos pareció fundamental hacer 
\emph on
CygnusCloud
\emph default
 tan escalable como fuese posible, por lo que nos decantamos por el segundo
 modelo de arquitectura.
\end_layout

\begin_layout Subsubsection
Uso de la librería de red 
\emph on
twisted 
\begin_inset CommandInset label
LatexCommand label
name "sub:Uso-de-twisted"

\end_inset


\end_layout

\begin_layout Standard
Puesto que 
\emph on
CygnusCloud
\emph default
 se compone de sistemas diferentes que residen en máquinas distintas, es
 imprescindible comunicarlos.
 Puesto que las máquinas intercambian entre sí un gran volumen de datos,
 es muy conveniente utilizar un servicio orientado a conexión y fiable:
 TCP.
\end_layout

\begin_layout Standard
Para realizar las comunicaciones 
\emph on
socket 
\emph default
a 
\emph on
socket
\emph default
, optamos por utilizar la librería de red 
\emph on
twisted
\emph default
, que se basa en eventos y está íntegramente escrita en Python.
 Las razones que nos llevaron a elegirla fueron las siguientes:
\end_layout

\begin_layout Itemize

\emph on
twisted 
\emph default
es el estándar 
\emph on
de facto
\emph default
 para comunicar programas escritos en 
\emph on
Python
\emph default
 sin necesidad de manipular 
\emph on
sockets
\emph default
 directamente, y forma parte de la instalación predeterminada de la mayoría
 de distribuciones 
\emph on
GNU/Linux
\emph default
 (e incluso de 
\emph on
Mac OS X
\emph default
).
\end_layout

\begin_layout Itemize
existen libros, una ingente cantidad de documentación, foros y tutoriales
 con abundantes explicaciones de uso.
\end_layout

\begin_layout Itemize
se trata de una librería de código abierto, distribuida bajo licencia MIT
 y actualizada periódicamente.
\end_layout

\begin_layout Itemize
proporciona toda la funcionalidad que hemos utilizado a lo largo del desarrollo
 del proyecto.
\end_layout

\begin_layout Standard
El gran inconveniente de esta librería es su propia documentación.
 Debido a su enorme extensión, hay partes desactualizadas, partes que contradice
n a otras, partes sin apenas documentar\SpecialChar \ldots{}
 por lo que en la práctica su uso
 requiere seguir el método de prueba y error.
\end_layout

\begin_layout Standard
No obstante, tal y como expusimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Restricciones-arquitectura"

\end_inset

, para facilitar la portabilidad entre distribuciones 
\emph on
GNU/Linux 
\emph default
es imprescindible utilizar mecanismos estandarizados, por lo que nos acabamos
 decantando por utilizar esta librería.
\end_layout

\begin_layout Subsubsection
Cifrado selectivo del tráfico
\end_layout

\begin_layout Standard
El tráfico que genera el sistema 
\emph on
CygnusCloud
\emph default
 puede clasificarse en dos grupos:
\end_layout

\begin_layout Itemize
tráfico generado por el protocolo de escritorio remoto VNC.
 Se trata del tráfico mayoritario, y permite a los usuarios manipular sus
 máquinas virtuales utilizando las interfaces gráficas a las que están acostumbr
ados.
\end_layout

\begin_layout Itemize
tráfico generado por los protocolos de 
\emph on
CygnusCloud
\emph default
.
 Este tráfico es minoritario, y se genera al procesar peticiones como la
 instanciación y destrucción de máquinas virtuales, la recopilación de estadísti
cas dentro de los distintos 
\emph on
clusters
\emph default
, \SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Considerando que la red de la UCM es ya de por sí segura, no sería necesario
 cifrar el tráfico.
 No obstante, para garantizar el correcto funcionamiento del sistema 
\emph on
CygnusCloud
\emph default
, todas las comunicaciones salvo las conexiones a escritorio remoto están
 protegidas mediante cifrado SSL.
 Esto nos permite:
\end_layout

\begin_layout Itemize
ahorrar ancho de banda.
 Como el tráfico mayoritario está sin cifrar, es posible utilizar el ancho
 de banda para soportar más conexiones a escritorio remoto (y, por tanto,
 dar servicio a un mayor número de usuarios).
\end_layout

\begin_layout Itemize
monitorizar fácilmente las actividades que realizan los usuarios en sus
 máquinas virtuales.
\end_layout

\begin_layout Itemize
aumentar la robustez del sistema frente a ataques desde la propia red de
 la UCM.
 Gracias al cifrado de los datos generados por los protocolos, lo único
 que un atacante puede controlar con facilidad es una única máquina virtual,
 pero no la infraestructura de 
\emph on
CygnusCloud
\emph default
.
\end_layout

\begin_layout Subsubsection
Uso del 
\emph on
framework
\emph default
 
\emph on
web2py
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
database
\end_layout

\begin_layout Subsection
El paquete 
\family typewriter
network
\end_layout

\begin_layout Standard
Los módulos de este paquete proporcionan una interfaz que permite utilizar
 la librería de red 
\emph on
twisted
\emph default
 a un alto nivel de abstracción.
 En esta sección expondremos detalladamente su diseño.
 
\end_layout

\begin_layout Standard
Para ello, comenzaremos mostrando, en líneas generales, el funcionamiento
 de la librería de red 
\emph on
twisted
\emph default
.
 Posteriormente, presentaremos todas las clases de este paquete de menor
 a mayor nivel de abstracción.
\end_layout

\begin_layout Subsubsection
La librería de red 
\emph on
twisted 
\begin_inset CommandInset label
LatexCommand label
name "sub:La-librería-de-red-twisted"

\end_inset


\end_layout

\begin_layout Standard
En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uso-de-twisted"

\end_inset

 mostramos que 
\emph on
twisted 
\emph default
es una librería de red basada en eventos.
 Por ello, la recepción de datos, el establecimiento de conexiones, la detección
 de desconexiones,\SpecialChar \ldots{}
 son totalmente asíncronas.
\end_layout

\begin_layout Standard
Para generar todos los eventos, esta librería hace uso del patrón 
\emph on
reactor
\emph default
.
 En líneas muy generales, el comportamiento de cualquier aplicación que
 utilice la librería de red 
\emph on
twisted
\emph default
 es el siguiente:
\end_layout

\begin_layout Enumerate
el código de la librería muestrea los 
\emph on
sockets
\emph default
 para detectar cambios.
 
\end_layout

\begin_layout Enumerate
cuando este código detecta un cambio, se genera un evento para informar
 del cambio al código del cliente.
\end_layout

\begin_layout Enumerate
el código del cliente trata el evento.
\end_layout

\begin_layout Enumerate
cuando termina de tratar dicho evento, el código del cliente devuelve el
 control al código de la librería.
\end_layout

\begin_layout Standard
Estas acciones tienen lugar en el 
\series bold
bucle del reactor
\series default
.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-bucle-reactor"

\end_inset

 muestra este procedimiento de forma gráfica.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/gráfico_twisted.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-bucle-reactor"

\end_inset

El bucle del reactor de 
\emph on
twisted
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La librería 
\emph on
twisted
\emph default
 también impone tres restricciones:
\end_layout

\begin_layout Itemize
cada aplicación puede tener un número arbitrario de conexiones activas,
 pero sólo 
\emph on
un 
\emph default
bucle reactor.
\end_layout

\begin_layout Itemize
una vez que se detiene el bucle reactor, este 
\emph on
no
\emph default
 puede reiniciarse.
 Por ello, este bucle sólo puede finalizar cuando la aplicación no va a
 utilizar más la red.
\end_layout

\begin_layout Itemize
puesto que los eventos se tratan en el propio bucle del reactor, es imprescindib
le que estos se atiendan tan rápido como sea posible para garantizar la
 correcta respuesta del sistema.
\end_layout

\begin_layout Paragraph
Procesamiento de los datos entrantes
\end_layout

\begin_layout Standard
Los datos recibidos se procesan siempre siguiendo un determinado criterio,
 que varía según la aplicación.
 Por ejemplo, algunos de los datos recibidos pueden almacenarse en un 
\emph on
log
\emph default
, y otros pueden requerir cierto procesamiento.
 Para definir qué hace cada aplicación con la información que recibe, la
 librería 
\emph on
twisted
\emph default
 define una interfaz, que deberán implementar todos los objetos que procesan
 datos entrantes.
 Esta interfaz se define en la clase abstracta 
\family typewriter
Protocol
\family default
, e incluye métodos para procesar datos entrantes, conexiones, desconexiones,\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Por otra parte, en el párrafo anterior ya hemos mostrado que, para procesar
 datos entrantes, se utiliza una instancia de 
\family typewriter
Protocol
\family default
 en cada extremo de la comunicación.
 Por ello, siempre que se establece una conexión deben crearse dichos objetos,
 y cuando esta se cierra deben destruirse.
 Para realizar estas operaciones, se utiliza una factoría.
\end_layout

\begin_layout Standard
Las factorías son instancias de la clase 
\family typewriter
Factory
\family default
, y disponen de métodos para instanciar y destruir objetos 
\family typewriter
Protocol
\family default
.
 Además, en 
\emph on
twisted
\emph default
 tienen una finalidad adicional: almacenar información de estado compartida
 por todos los objetos 
\family typewriter
Protocol
\family default
 que han instanciado.
\end_layout

\begin_layout Standard
Para establecer las conexiones se utilizan instancias de la clase 
\family typewriter
Endpoint
\family default
.
 Estos objetos utilizan, entre otras cosas, una factoría de protocolos para
 crear las conexiones.
 Las relaciones entre todas estas clases aparecen en el diagrama de clases
 de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-protocolos-endpoints-factorías"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Twisted_recepción.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-protocolos-endpoints-factorías"

\end_inset

Relaciones entre protocolos, factorías de protocolos y 
\emph on
endpoints
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
El diagrama de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-protocolos-endpoints-factorías"

\end_inset

 muestra también que, en todas las conexiones, se sigue el modelo 
\emph on
cliente-servidor
\emph default
, y que en cada extremo de la comunicación se utiliza una subclase de 
\family typewriter
Endpoint
\family default
 distinta en función del protocolo utilizado y del papel que desempeña la
 máquina en dicha comunicación.
\end_layout

\begin_layout Paragraph
Envío de datos
\end_layout

\begin_layout Standard
Para enviar datos se utilizan los objetos asignados a los extremos de la
 comunicación, es decir, instancias de la clase 
\family typewriter
Protocol
\family default
.
 
\end_layout

\begin_layout Standard
La clase 
\family typewriter
Protocol
\family default
 no define métodos para enviar datos, pero su atributo 
\family typewriter
transport
\family default
 sí lo hace: llamando al método 
\family typewriter
transport.write()
\family default
 es posible enviar datos a través de la conexión.
\end_layout

\begin_layout Standard
La única restricción que impone la librería 
\emph on
twisted
\emph default
 es el tipo de los datos a enviar: sólo es posible enviar 
\emph on
strings
\emph default
 (es decir, secuencias de 
\emph on
bytes
\emph default
), lo que hace necesario serializar toda la información antes de enviarla
 y deserializarla al recibirla.
 
\end_layout

\begin_layout Standard
Por otra parte, el número de 
\emph on
bytes
\emph default
 a enviar no está limitado.
 No obstante, para evitar los retardos derivados de la fragmentación, es
 altamente recomendable que la longitud total de los datos a enviar en 
\emph on
bytes
\emph default
 no supere el MTU (
\emph on
Maximum Transfer Unit
\emph default
) de la red.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
Packet
\end_layout

\begin_layout Standard
Para utilizar la librería de red 
\emph on
twisted
\emph default
 a un mayor nivel de abstracción, es imprescindible hacer transparente al
 usuario la serialización y la deserialización de la información que circula
 a través de la red.
 Esta es la principal finalidad de la clase 
\family typewriter
Packet
\family default
.
\end_layout

\begin_layout Standard
Por otra parte, no toda la información que circula por la red tiene la misma
 naturaleza o la misma importancia.
 Por ello, los paquetes también tienen asociado un tipo y una prioridad.
 Los valores que pueden tomar estos dos campos aparecen en el cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Tipos-prioridades-paquetes"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo de paquete
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Rango de la prioridad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
¿Se usa en el código del cliente?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Datos del cliente
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $[0,\infty]$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sí
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gestión de la red
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $[-\infty,-1]$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Tipos-prioridades-paquetes"

\end_inset

Tipos de paquetes y sus prioridades
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La prioridad de los paquetes es un valor entero, que toma valores positivos
 en el caso de los paquetes que utilizan los usuarios y valores negativos
 en el caso de los paquetes de gestión de la red.
 Cuanto menor sea el valor numérico que toma la prioridad de un paquete,
 más prioritario será.
 Nótese que los rangos de prioridad están escogidos de modo que los paquetes
 de gestión de la red siempre son más prioritarios que los paquetes que
 transportan los datos del cliente.
\end_layout

\begin_layout Standard
El tipo de paquete y su prioridad se almacenan en el encabezado del paquete.
 Para garantizar que siempre está bien construido (lo que es crítico para
 garantizar el correcto funcionamiento de la red), no se permite a los clientes
 instanciar objetos 
\family typewriter
Packet
\family default
 directamente.
\end_layout

\begin_layout Standard
Para serializar los datos, la clase 
\family typewriter
Packet
\family default
 dispone de métodos de escritura que serializan 
\emph on
strings
\emph default
, valores enteros, valores booleanos y números en punto flotante.
 Los datos serializados se almacenaran en una estructura de datos intermedia,
 que se leerá a la hora de enviar el paquete para obtener la información
 serializada que hay que enviar.
\end_layout

\begin_layout Standard
El formato de un paquete serializado es el siguiente:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
_Packet(tipo, prioridad)<datos>
\end_layout

\begin_layout Standard
La cadena 
\family typewriter
datos
\family default
 se construye de acuerdo a la siguiente expresión regular:
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
(etiqueta de tipo$valor$)*
\end_layout

\begin_layout Standard
Los códigos asignados a los tipos de paquete aparecen en el cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Códigos-asignados-tipos-paquete"

\end_inset

, y las etiquetas de tipo que pueden utilizarse aparecen en el cuadro 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Etiquetas-de-tipo-paquete"

\end_inset

.
 Para serializar los valores y la prioridad, se hace uso de los métodos
 de conversión a 
\emph on
string
\emph default
 del lenguaje Python.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Código
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo de paquete
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Datos del cliente
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gestión de la red
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Códigos-asignados-tipos-paquete"

\end_inset

Códigos asignados a los tipos de paquete
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Etiqueta
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo de datos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entero
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entero largo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
número de punto flotante
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Etiquetas-de-tipo-paquete"

\end_inset

Etiquetas de tipo que pueden aparecer en un paquete
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por otro lado, la deserialización de los datos se realiza siempre bajo demanda
 del cliente y en forma de lectura destructiva: cuando el cliente lee un
 valor, se eliminan sus bytes de la estructura de datos intermedia y se
 devuelve el valor leído.
\end_layout

\begin_layout Standard
Finalmente, en caso de que una operación de la clase 
\family typewriter
Packet
\family default
 falle, se lanzará una excepción de la clase 
\family typewriter
PacketException
\family default
 conteniendo el correspondiente mensaje de error.
\end_layout

\begin_layout Subsubsection
Envío y recepción de datos
\end_layout

\begin_layout Standard
Para enviar y recibir datos mediante la librería 
\emph on
twisted
\emph default
 utilizamos dos clases: una subclase de 
\family typewriter
Protocol
\family default
 (
\family typewriter
CygnusCloudProtocol
\family default
) y una subclase de
\family typewriter
 Factory
\family default
 (
\family typewriter
CygnusCloudProtocolFactory
\family default
).
 Las relaciones de estas clases con las demás aparecen en el diagrama de
 clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacción-twisted-diagrama-clases"

\end_inset

.
 En dicho diagrama, hemos abreviado 
\family typewriter
CygnusCloud
\family default
 como 
\family typewriter
CC
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaClasesInteracciónTwisted.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interacción-twisted-diagrama-clases"

\end_inset

Interacción con la librería
\emph on
 twisted
\emph default
: diagrama de clases
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La relación entre las clases 
\family typewriter
CygnusCloudProtocol
\family default
 y 
\family typewriter
CygnusCloudProtocolFactory
\family default
 es más compleja de lo que en principio cabría esperar.
 Tal y como dijimos en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacción-twisted-diagrama-clases"

\end_inset

, hay 
\emph on
una
\emph default
 instancia de 
\family typewriter
Protocol
\family default
 en cada extremo de la comunicación.
 Esto genera un problema: como las conexiones no tienen por qué ser bidirecciona
les, en un extremo de la conexión puede haber 
\emph on
varios
\emph default
 objetos 
\family typewriter
Protocol
\family default
.
 Por ejemplo, si siete clientes se conectan a un servidor, en dicho servidor
 habrá siete objetos 
\family typewriter
Protocol
\family default
 asociados a esa conexión: uno para cada cliente.
\end_layout

\begin_layout Standard
Para resolver este problema, la clase 
\family typewriter
CygnusCloudProtocolFactory
\family default
 define los métodos de envío de paquetes, de modo que estos se enviarán
 a través de todos los objetos 
\family typewriter
Protocol
\family default
 asociados a la conexión.
 Asimismo, la clase CygnusCloud tratará las notificaciones de conexión y
 desconexión que la librería 
\emph on
twisted
\emph default
 envía a través de los objetos 
\family typewriter
Protocol
\family default
.
\end_layout

\begin_layout Standard
La recepción de paquetes es mucho más sencilla: cuando se reciben datos
 a través de cualquier objeto Protocol, se añaden a una cola de paquetes
 recibidos (que es una instancia de 
\family typewriter
MultithreadingPriorityQueue
\family default
).
 Como veremos más adelante, en principio cada conexión dispone de su propia
 cola de recepción de paquetes.
\end_layout

\begin_layout Standard
Finalmente, en el diagrama de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interacción-twisted-diagrama-clases"

\end_inset

 también aparecen las subclases de 
\family typewriter
Endpoint
\family default
 que se utilizan en el paquete 
\family typewriter
network
\family default
.
 Siempre que se crea una conexión de red, se instancia una subclase de 
\family typewriter
Endpoint
\family default
 distinta en función del protocolo escogido (TCP versión 4 o SSL versión
 4) y del papel que desempeñará la máquina en la conexión (servidor o cliente).
\end_layout

\begin_layout Subsubsection
Hilos de red 
\begin_inset CommandInset label
LatexCommand label
name "sub:Hilos-de-red"

\end_inset


\end_layout

\begin_layout Standard
Cuando en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:La-librería-de-red-twisted"

\end_inset

 presentamos el funcionamiento de la librería de red 
\emph on
twisted
\emph default
 mencionamos que, por tratarse de una librería de red basada en eventos,
 el procesamiento de los datos recibidos en el bucle del reactor debe ser
 tan rápido como sea posible.
\end_layout

\begin_layout Standard

\emph on
CygnusCloud
\emph default
 está formado por subsistemas con características y tiempos de respuesta
 muy diferentes, por lo que es imprescindible garantizar que la red funcionará
 lo suficientemente rápido en todos ellos.
 Para ello, la mejor alternativa es utilizar varios hilos.
\end_layout

\begin_layout Standard
El diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Jerarquía-de-hilos-red"

\end_inset

 muestra las clases de hilos que se utilizan en el paquete
\emph on
 
\family typewriter
\emph default
network
\family default
\emph on
 
\emph default
y sus relaciones.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaClasesJerarquíaHilosRed.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Jerarquía-de-hilos-red"

\end_inset

Jerarquía de hilos de red
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Esencialmente, los hilos de la clase 
\family typewriter
BasicThread
\family default
 se detienen cuando otros se lo solicitan, y los hilos de la clase 
\family typewriter
QueueProcessingThread
\family default
 procesan los elementos de una cola.
 Dependiendo de su naturaleza, los hilos del paquete 
\family typewriter
network.threads
\family default
 heredan de una clase o de otra.
 
\end_layout

\begin_layout Standard
Las instancias de 
\family typewriter
TwistedReactorThread
\family default
 ejecutan, como su nombre indica, el bucle del reactor de la libreria 
\emph on
twisted
\emph default
.
 
\end_layout

\begin_layout Standard
Por otra parte, los hilos 
\family typewriter
ConnectionMonitoringThread
\family default
 actualizan periódicamente el estado de las conexiones.
 Esto es fundamental para determinar, entre otras cosas, cuándo una conexión
 puede empezar a utilizarse, cuándo se producen desconexiones,\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Finalmente, para manipular los paquetes entrantes y los paquetes salientes
 se utilizan los hilos 
\family typewriter
IncomingDataThread
\family default
 y 
\family typewriter
OutgoingDataThread
\family default
.
 Para indicar al código del cliente que se ha recibido un nuevo paquete,
 se hace uso de la interfaz que define la clase 
\family typewriter
NetworkCallback
\family default
.
 
\end_layout

\begin_layout Standard
Es importante notar que todo el procesamiento de los paquetes entrantes
 tendrá lugar en un hilo 
\family typewriter
IncomingDataThread
\family default
 y no en el hilo del bucle reactor de 
\emph on
twisted
\emph default
, lo que nos permite garantizar que el tiempo de respuesta de la red será
 adecuado independientemente del tiempo que tarde en procesarse el paquete.
\end_layout

\begin_layout Subsubsection
La clase 
\family typewriter
NetworkConnection
\end_layout

\begin_layout Standard
Como el lector habrá notado ya, una conexión de red tiene muchos recursos
 asociados:
\end_layout

\begin_layout Itemize
su estado
\end_layout

\begin_layout Itemize
una cola para almacenar los paquetes recibidos y otra cola para almacenar
 los paquetes a enviar
\end_layout

\begin_layout Itemize
una factoría, es decir, una instancia de 
\family typewriter
CygnusCloudProtocolFactory
\family default
, que se utiliza para enviar y recibir paquetes.
\end_layout

\begin_layout Itemize
un hilo que procesa los paquetes recibidos y otro que envía los paquetes
\end_layout

\begin_layout Itemize
una dirección IP y un puerto, junto con el protocolo a utilizar (TCP versión
 4 o SSL versión 4).
\end_layout

\begin_layout Standard
Puesto que todos ellos están fuertemente relacionados, lo más conveniente
 es manipularlos de forma conjunta.
 Esta es la finalidad de la clase 
\family typewriter
NetworkConnection
\family default
.
 
\end_layout

\begin_layout Paragraph
Estado de la conexión
\end_layout

\begin_layout Standard
El estado de una conexión evoluciona de acuerdo al diagrama de la figura
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-estados-conexión"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/Diagrama estados conexión.pdf
	scale 85

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-estados-conexión"

\end_inset

Diagrama de estados de una conexión
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Puesto que no tiene sentido enviar datos desde un servidor cuando todavía
 no hay clientes conectados, cuando una conexión de servidor se encuentra
 en el estado 
\family sans
Conexión lista, no hay clientes conectados 
\family default
no se puede utilizar.
 Por ello, si el código del cliente la cierra, esta pasará directamente
 al estado 
\family sans
Conexión cerrada
\family default
, ya que no hay paquetes recibidos por procesar ni paquetes pendientes de
 enviar.
\end_layout

\begin_layout Standard
Las conexiones sólo puede utilizarse para enviar y recibir datos en el estado
 
\family sans
Conexión lista
\family default
.
 Lo habitual es que la conexión permanezca en este estado mientras se está
 utilizando.
\end_layout

\begin_layout Standard
Cuando una conexión se cierra normalmente, se envían los paquetes pendientes
 a su través y, posteriormente, se cierra.
 Esta es la finalidad del estado 
\family sans
Conexión cerrandose
\family default
.
 Por otra parte, si una conexión se cierra de forma inesperada no se podrá
 volver a utilizar.
 Por ello, en estos casos se pasa directamente al estado 
\family sans
Conexión cerrada
\family default
: no es posible enviar ni recibir ningún tipo de paquete.
\end_layout

\begin_layout Paragraph
Control de la concurrencia
\end_layout

\begin_layout Standard
En principio, cada conexión de red tiene asociados un hilo de envío de paquetes
 y un hilo de recepción de paquetes.
 Así,
\end_layout

\begin_layout Itemize
el tiempo que tardan los paquetes en procesarse no afecta al tiempo de respuesta
 de la red, y
\end_layout

\begin_layout Itemize
el código del cliente no debe bloquearse hasta que se envían sus paquetes.
\end_layout

\begin_layout Standard
No obstante, el número de CPUs de los computadores es siempre limitado.
 Y teniendo en cuenta que una misma máquina puede tener más de una conexión
 con otras, es fundamental proporcionar mecanismos que permitan acotar el
 número de hilos que utiliza la red.
\end_layout

\begin_layout Standard
En primer lugar, centrémonos en el hilo de envío de paquetes.
 Por muchas conexiones que haya, todos sus paquetes deberán enviarse a través
 de la misma interfaz de red.
 Por ello, estos datos se transferirán de forma multiplexada, con independencia
 del número de hilos que haya.
\end_layout

\begin_layout Standard
Si bien esto es totalmente transparente al usuario gracias al uso de la
 librería de red 
\emph on
twisted
\emph default
, también es cierto que este comportamiento no es óptimo en todas las situacione
s.
 Por ejemplo, si a través de tres conexiones deben enviarse los siguientes
 paquetes:
\end_layout

\begin_layout Itemize

\series bold
conexión 1
\series default
: un paquete de gestión de la red, tres paquetes con datos del cliente
\end_layout

\begin_layout Itemize

\series bold
conexión 2
\series default
: tres paquetes de gestión de la red
\end_layout

\begin_layout Itemize

\series bold
conexión 3
\series default
: tres paquetes con datos del cliente
\end_layout

\begin_layout Standard
es posible que los paquetes de datos de la conexión 3 se envíen antes que
 los paquetes de gestión de la red de la conexión 2, lo cual no es nada
 deseable: los paquetes de gestión de la red son más prioritarios.
 
\end_layout

\begin_layout Standard
Este problema se resuelve de forma muy simple: si sólo hay una cola de paquetes
 salientes (y, por tanto, un único hilo de envío de paquetes), los paquetes
 más prioritarios se enviarán antes que los menos prioritarios.
 Además, esta solución también nos permite reducir el número de hilos activos:
 en cada máquina, sólo habrá un único hilo de envío de paquetes.
 
\end_layout

\begin_layout Standard
Por otra parte, los hilos de recepción de paquetes no pueden fusionarse
 de forma tan sencilla, ya que los módulos que procesan los paquetes recibidos
 desde cada conexión pueden ser totalmente diferentes.
\end_layout

\begin_layout Standard
La solución en este caso pasa por el propio objeto que procesa los paquetes
 recibidos: una instancia de 
\family sans
NetworkCallback
\family default
.
 En caso de que un mismo objeto 
\family sans
NetworkCallback
\family default
 esté procesando los paquetes recibidos a través de varias conexiones, podemos
 utilizar de forma segura un único hilo de recepción de paquetes (y, por
 tanto, una única cola de paquetes recibidos), compartido por todas esas
 conexiones.
\end_layout

\begin_layout Standard
De esta manera, el número de hilos de recepción de paquetes que existen
 en un momento dado será el más reducido posible de acuerdo a las necesidades
 específicas de la aplicación.
\end_layout

\begin_layout Paragraph
Relaciones de la clase 
\family typewriter
NetworkConnection
\end_layout

\begin_layout Standard
Las relaciones existentes entre la clase
\family typewriter
 NetworkConnection
\family default
 y el resto de clases del paquete 
\family typewriter
network
\family default
 aparecen en el diagrama de clases de la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Relaciones-networkConnection"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaClasesNetworkConnection.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Relaciones-networkConnection"

\end_inset

Relaciones de la clase 
\family typewriter
NetworkConnection
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
