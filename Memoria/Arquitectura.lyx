#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Arquitectura del sistema
\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
En este capítulo presentaremos una visión general de la arquitectura de
 
\emph on
CygnusCloud
\emph default
.
 Para facilitar su comprensión, hemos intentado que la claridad prevalezca
 a la hora de exponer los distintos conceptos y decisiones de diseño.
 Por ello, evitaremos a toda costa realizar descripciones exhaustivas de
 todas y cada una de las clases y de sus distintos atributos.
 Si el lector desea conocer con total precisión qué atributos y qué métodos
 tiene cada clase, cómo se comporta cierto método o cuál es la finalidad
 de un determinado atributo, le remitimos al código fuente, extensamente
 comentado.
\end_layout

\begin_layout Standard
Por otra parte, en este capítulo también prestaremos especial atención a
 las decisiones de diseño que hemos tomado ya que, a nuestro parecer, son
 fundamentales para comprender el funcionamiento del sistema, sus ventajas
 y sus limitaciones.
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
Los contenidos de este capítulo se agrupan en las siguientes secciones:
\end_layout

\begin_layout Enumerate
La presente 
\series bold
introducción
\series default
.
\end_layout

\begin_layout Enumerate

\series bold
Objetivos de la arquitectura y restricciones
\series default
.
 En esta sección expondremos todos los objetivos que se tuvieron al diseñar
 
\emph on
CygnusCloud
\emph default
, y también recopilaremos las restricciones con las que hemos tenido que
 tratar a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Enumerate

\series bold
Subsistemas de 
\emph on
CygnusCloud
\series default
\emph default
.
 En esta sección mostraremos, en términos generales, qué subsistemas componen
 
\emph on
CygnusCloud 
\emph default
y qué responsabilidades tienen asignadas.
 Esta información es fundamental para comprender la arquitectura, y por
 ello aparece antes de presentar todas las vistas de la misma.
\end_layout

\begin_layout Enumerate

\series bold
Vista lógica
\series default
.
 En esta sección, mostraremos cómo las funciones de cada subsistema se distribuy
en entre sus distintos módulos con la ayuda de un diagrama de paquetes.
 Además, utilizaremos diagramas de clase y diagramas de secuencia para exponer
 las responsabilidades de cada elemento significativo de la arquitectura
 y sus relaciones con el resto de componentes de la misma.
\end_layout

\begin_layout Enumerate

\series bold
Vista de procesos
\series default
.
 En ella mostraremos el funcionamiento de cada subsistema desde el punto
 de vista de los procesos ligeros o 
\emph on
threads
\emph default
, y también discutiremos el cometido de los mismos.
\end_layout

\begin_layout Enumerate

\series bold
Vista de despliegue
\series default
.
 En esta sección mostraremos cómo se distribuyen los distintos subsistemas
 que forman parte de 
\emph on
CygnusCloud
\emph default
 entre las distintas máquinas que forman parte de la infraestructura utilizada.
\end_layout

\begin_layout Enumerate

\series bold
Vista de implementación
\series default
.
 Concluiremos el presente capítulo con esta sección, en la que describiremos
 los componentes que se distribuyen con cada subsistema.
\end_layout

\begin_layout Subsection
Sobre los diagramas UML de este documento
\end_layout

\begin_layout Standard
Para que el aumento del tamaño de los diagramas UML en un lector de ficheros
 PDF no suponga una pérdida de calidad de los mismos, hemos procurado incrustarl
os en este documento como ficheros 
\family typewriter
.pdf
\family default
.
\end_layout

\begin_layout Standard
El comando de 
\emph on
IBM Rational Software Architect 7.5
\emph default
 que los genera usa degradados para mejorar la presentación de los diagramas
 de clase y de los diagramas de paquetes, haciendo que los elementos que
 aparecen en la parte superior del diagrama sean más oscuros que los que
 aparecen en la parte inferior del mismo.
\end_layout

\begin_layout Standard
En cualquier caso, este efecto 
\emph on
no
\emph default
 tiene asociado ningún tipo de significado en los diagramas.
\end_layout

\begin_layout Section
Objetivos de la arquitectura y restricciones
\end_layout

\begin_layout Standard
En esta sección describiremos todos los objetivos que consideramos a la
 hora de diseñar la arquitectura, así como las restricciones que hemos tenido
 en cuenta a lo largo de todo el proceso de diseño.
\end_layout

\begin_layout Subsection
Objetivos
\end_layout

\begin_layout Standard
Con 
\emph on
CygnusCloud
\emph default
 no sólo queremos proporcionar a los estudiantes de la Facultad de Informática
 más laboratorios en los que trabajar: también queremos ofrecer una alternativa
 viable para que cualquier alumno pueda sacar el máximo partido a cualquier
 aula de informática infrautilizada del campus.
 Por ello, la 
\emph on
escalabilidad 
\emph default
es una característica fundamental del diseño: utilizando más servidores
 y más ancho de banda, es posible que 
\emph on
CygnusCloud
\emph default
 atienda a un mayor número de usuarios.
 
\end_layout

\begin_layout Standard
Además, para que alumnos y profesores de cualquier titulación sean capaces
 de utilizar 
\emph on
CygnusCloud 
\emph default
en cualquier aula de informática, nuestro sistema debe ser 
\emph on
fácil de usar
\emph default
, y también debe poder utilizarse sin necesidad de instalar 
\emph on
software
\emph default
 en dichas aulas.
\end_layout

\begin_layout Standard
Por otra parte, considerando la actual situación de crisis económica, también
 deseamos que 
\emph on
CygnusCloud
\emph default
 sirva para mostrar cómo sacar el máximo partido a los recursos informáticos
 existentes en la Universidad.
 Así, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con 
\emph on
coste cero
\emph default
, lo que nos ha obligado a buscar la 
\emph on
eficiencia
\emph default
 a la hora de diseñarlo.
\end_layout

\begin_layout Standard
Finalmente, dado que el desarrollo de 
\emph on
CygnusCloud 
\emph default
sólo se extiende a lo largo de un curso académico, también queremos que
 cualquiera que lo desee pueda continuarlo.
 Por ello, hemos procurado que nuestro diseño también se caracterice por
 su 
\emph on
simplicidad
\emph default
: en todos los procesos se sigue siempre una secuencia de pasos muy marcados,
 que sólo varía en función de las características de las máquinas que intervenga
n.
\end_layout

\begin_layout Subsection
Restricciones
\end_layout

\begin_layout Standard
Tal y como mencionamos en el apartado anterior, 
\emph on
CygnusCloud
\emph default
 debe poder implantarse con coste cero.
 Para ello, es imprescindible construir este sistema con 
\emph on
software
\emph default
 gratuito.
 Como los hipervisores deben instalarse en un sistema operativo en concreto,
 que tiene que ser gratuito, esto ha impuesto la primera restricción importante:
 la 
\emph on
dependencia de la plataforma GNU/Linux
\emph default
.
 
\end_layout

\begin_layout Standard
Y dado que existe una ingente cantidad de distribuciones 
\emph on
GNU/Linux
\emph default
 que pueden requerir procedimientos de configuración diferentes, es fundamental
 utilizar mecanismos estándar para interactuar con los hipervisores y, a
 ser posible, lenguajes interpretados, para garantizar que nuestro sistema
 funcione sin problemas en cualquier sistema 
\emph on
GNU/Linux
\emph default
.
 Esto ha impuesto una doble restricción: 
\end_layout

\begin_layout Itemize
el uso obligatorio de la librería 
\emph on
libvirt 
\emph default
para interactuar con los hipervisores y configurar las redes virtuales.
\end_layout

\begin_layout Itemize
el uso de un lenguaje de tipo interpretado, como Java o Python, como principal
 lenguaje de programación.
\end_layout

\begin_layout Standard
Por otra parte, la práctica totalidad de los 
\emph on
frameworks
\emph default
 que hemos considerado para implementar la web se basan en el modelo vista-contr
olador o en otros patrones de diseño derivados de él, lo que nos ha obligado
 a utilizar dicho patrón de en el servidor web.
\end_layout

\begin_layout Standard
Finalmente, para evitar la aparición de incompatibilidades entre formatos
 de paquete hemos tenido que utilizar la misma librería de red para comunicar
 todos los subsistemas que componen 
\emph on
CygnusCloud
\emph default
.
 Puesto que cada librería de red está implementada en cierto lenguaje, nos
 hemos visto obligados a emplear el mismo lenguaje de programación para
 implementar la mayoría de subsistemas, lo que también ha restringido significat
ivamente el número de 
\emph on
frameworks
\emph default
 que hemos podido considerar para implementar la web.
\end_layout

\begin_layout Section
Subsistemas de 
\emph on
CygnusCloud
\end_layout

\begin_layout Standard
El sistema 
\emph on
CygnusCloud
\emph default
 está formado por un conjunto de susbsistemas conectados a una misma red
 que cooperan entre sí para suministrar servicios a los usuarios.
 Cada uno de estos subsistemas tiene una funcionalidad claramente delimitada,
 y residirá en una máquina posiblemente distinta.
\end_layout

\begin_layout Standard
Los subsistemas básicos que componen 
\emph on
CygnusCloud
\emph default
 y sus principales responsabilidades son los siguientes:
\end_layout

\begin_layout Itemize
el 
\series bold
servidor de máquinas virtuales
\series default
 reside en todas las máquinas que alojarán las máquinas virtuales de los
 usuarios.
 Su misión es interactuar con el hipervisor en respuesta a las peticiones
 recibidas para instanciar y destruir máquinas virtuales, enviar los datos
 de conexión a cada máquina virtual, suministrar estadísticas que reflejen
 su estado actual,\SpecialChar \ldots{}

\end_layout

\begin_layout Itemize
el 
\series bold
servidor del 
\emph on
cluster
\series default
\emph default
 reside en una máquina asignada a cada 
\emph on
cluster
\emph default
 de servidores de máquinas virtuales.
 Además de realizar el balanceado de carga para distribuir las máquinas
 virtuales entre los distintos servidores de máquinas virtuales del 
\emph on
cluster
\emph default
, también recopila periódicamente el estado de todos sus servidores de máquinas
 virtuales.
\end_layout

\begin_layout Itemize
el 
\series bold
servidor web
\series default
 reside en una única máquina.
 Su misión es alojar la web, que permite a los usuarios utilizar el sistema
 
\emph on
CygnusCloud
\emph default
.
 Este sistema realiza el control de acceso, recopila periódicamente información
 de estado desde todos los servidores de 
\emph on
cluster
\emph default
 y envía a los mismos todas las peticiones de los usuarios.
\end_layout

\begin_layout Standard

\emph on
CygnusCloud
\emph default
 también está compuesto por dos subsistemas adicionales: el 
\series bold
cliente de escritorio remoto noVNC
\series default
 y el 
\series bold
hipervisor
\series default
 
\series bold
KVM
\series default
.
 Puesto que ambos han sido desarrollados por terceros, en este capítulo
 sólo hablaremos de ellos en líneas generales y sólo cuando sea imprescindible
 para comprender el funcionamiento del sistema.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Vista lógica
\end_layout

\begin_layout Subsection
Visión general
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetes.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

Diagrama de paquetes de 
\emph on
CygnusCloud
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La funcionalidad del sistema 
\emph on
CygnusCloud 
\emph default
está distribuida entre siete paquetes:
\end_layout

\begin_layout Itemize
en los módulos del paquete 
\family sans
utils
\family default
 se definen clases que se utilizan en varios módulos distintos, como estructuras
 de datos sin problemas de sincronización o clases que ejecutan comandos.
 
\end_layout

\begin_layout Itemize
el paquete 
\family sans
database
\family default
 contiene todas las clases que interactuarán con las bases de datos de los
 tres subsistemas básicos.
 
\end_layout

\begin_layout Itemize
el paquete 
\family sans
network
\family default
 contiene las clases que permiten comunicar un conjunto de máquinas distintas
 a través de una red de área local.
 Dichas comunicaciones se realizan utilizando el protocolo TCP a través
 de la librería de red 
\emph on
twisted
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
virtualMachineServer
\family default
 contiene las clases que, junto con algunas de los paquetes de los que este
 depende, implementan el subsistema servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
clusterServer
\family default
 contiene todas las clases que, junto con algunas de los paquetes de los
 que este depende, implementan el susbsistema servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
webServer
\family default
 contiene todas las clases que, junto con algunas de los paquetes de los
 que este depende, implementan el susbsistema servidor web.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
testing
\family default
 contiene clases utilizadas para depurar los sistemas servidor de máquinas
 virtuales y servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Standard
Las relaciones existentes entre estos paquetes aparecen en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagrama-de-paquetes-CygnusCloud"

\end_inset

.
 Por claridad, las dependencias del paquete 
\family sans
virtualMachineServer
\family default
 aparecen en 
\color red
rojo
\color inherit
, las del paquete 
\family sans
clusterServer
\family default
 aparecen en 
\color blue
azul
\color inherit
 y las del resto de paquetes aparecen en negro.
\end_layout

\begin_layout Standard
Los paquetes que acabamos de presentar se descomponen en otros paquetes
 más pequeños.
 Para facilitar la visualización de las dependencias principales entre paquetes,
 hemos optado por no mostrar aquí dicha dicha descomposición.
 Mostraremos la descomposición de cada paquete y las relaciones entre clases
 que justifican la dependencia entre esos paquetes a medida que presentemos
 el diseño.
\end_layout

\begin_layout Subsection
Paquetes y clases significativos de la arquitectura
\end_layout

\begin_layout Standard
En este apartado mostraremos las clases más importantes de cada paquete
 junto con una breve descripción de sus responsabilidades.
\end_layout

\begin_layout Subsubsection

\family sans
utils
\end_layout

\begin_layout Standard
Como ya hemos mencionado, este paquete define un conjunto de clases que
 se utilizan en muchos otros y que, por conveniencia, es mejor tener agrupadas.
 Las clases más relevantes de este paquete son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
Commands
\family default
.
 Esta clase suministra métodos estáticos que permiten ejecutar comandos
 en 
\emph on
foreground
\emph default
 y 
\emph on
background
\emph default
, y también como 
\emph on
root
\emph default
 o como un usuario estándar.
\end_layout

\begin_layout Itemize

\family sans
MultithreadingCounter
\family default
.
 Esta clase almacena el valor de un contador, y dispone de métodos para
 incrementarlo, decrementarlo y leer su valor de forma segura cuando varios
 hilos lo utilizan.
\end_layout

\begin_layout Itemize
Las clases 
\family sans
MultithreadingDictionary
\family default
 y 
\family sans
MultithreadingList
\family default
 definen métodos para manipular de forma segura diccionarios y listas Python
 utilizados por varios hilos.
\end_layout

\begin_layout Itemize
La clase 
\family sans
MultithreadingPriorityQueue
\family default
 define métodos para manipular una cola de prioridad utilizada por varios
 hilos.
\end_layout

\begin_layout Itemize
Las clases 
\family sans
BasicThread
\family default
 y 
\family sans
QueueProcessingThread
\family default
 añaden funcionalidad adicional a los hilos estándar de Python para que
 estos se detengan ante las peticiones de otros y para que procesen una
 cola de elementos respectivamente.
\end_layout

\begin_layout Subsubsection

\family sans
database
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesDatabase.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-database"

\end_inset

El paquete 
\family sans
database
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este paquete contiene todas las clases que interactuarán con las bases de
 datos de los distintos susbsistemas de 
\emph on
CygnusCloud
\emph default
.
 Tal y como se muestra en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-database"

\end_inset

, estas clases se distribuyen en cinco subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
utils
\family default
 contiene todas las clases que permiten interactuar con una base de datos
 MySQL desde Python.
 De entre todas ellas, destacan
\family sans
 DBConfigurator
\family default
 y 
\family sans
BasicDatabaseConnector
\family default
, que permiten configurar el esquema de una base de datos y realizar consultas
 y actualizaciones sobre una base de datos respectivamente.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
clusterServer
\family default
 contiene la clase 
\family sans
ClusterServerDatabaseConnector
\family default
, que permite manipular la base de datos del servidor del 
\emph on
cluster
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
systemStatus
\family default
 contiene la clase 
\family sans
SystemStatusDBWriter
\family default
, que permite actualizar la base de datos que almacena el estado de todo
 el sistema.
\end_layout

\begin_layout Itemize
el paquete
\family sans
 vmServer
\family default
 contiene las clases 
\family sans
ImageManager
\family default
 y 
\family sans
RuntimeData
\family default
, que permiten manipular la base de datos del servidor de máquinas virtuales.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
tests
\family default
 contiene pruebas unitarias de todas las clases que manipulan una base de
 datos.
\end_layout

\begin_layout Subsubsection

\family sans
network
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesNetwork.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-network"

\end_inset

El paquete 
\family sans
network
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las clases del paquete 
\family sans
network
\family default
 interactúan con la librería de red 
\emph on
twisted
\emph default
 para comunicar una máquina con otra u otras conectadas a la misma red.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:El-paquete-network"

\end_inset

 muestra que este paquete se descompone en seis subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
exceptions
\family default
 contiene todas las clases de excepción que utilizan las clases del paquete
 
\family sans
network
\family default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
packets
\family default
 contiene la clase 
\family sans
Packet
\family default
, que ofrece una interfaz de alto nivel para enviar elementos de los tipos
 de datos básicos (como valores enteros y 
\emph on
strings
\emph default
) a través de la red.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
threads
\family default
 contiene las clases 
\family sans
ConnectionMonitoringThread
\family default
, 
\family sans
DataProcessingThread
\family default
, 
\family sans
TwistedReactorThread
\family default
 y 
\family sans
ServerWaitThread
\family default
, correspondientes a los distintos tipos de hilo que se utilizan en la implement
ación de la red.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
twistedInteraction
\family default
 contiene las clases 
\family sans
NetworkConnection
\family default
 y 
\family sans
CygnusCloudProtocol
\family default
, que se utilizan para establecer conexiones y para realizar el envío y
 la recepción de datos utilizando la librería de red 
\emph on
twisted
\emph default
.
\end_layout

\begin_layout Itemize
el paquete 
\family sans
manager
\family default
 contiene las clases 
\family sans
NetworkManager
\family default
 y 
\family sans
NetworkCallback
\family default
.
 La primera ofrece una interfaz de alto nivel para establecer una conexión
 entre dos máquinas y enviar datos entre las mismas, y la segunda define
 la interfaz que se utiliza para procesar los datos recibidos a través de
 la red.
\end_layout

\begin_layout Itemize
finalmente, el paquete
\family sans
 tests
\family default
 contiene pruebas de los módulos de este paquete.
\end_layout

\begin_layout Subsubsection

\family sans
virtualMachineServer
\end_layout

\begin_layout Standard
Este paquete contiene las clases del subsistema servidor de máquinas virtuales
 que interactuan con el hipervisor y también las de mayor nivel de abstracción
 de dicho subsistema.
 Las más importante son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
LibvirtConnector
\family default
, que interactúa con el hipervisor KVM a través de la librería 
\emph on
libvir
\emph default
t para instanciar y destruir máquinas virtuales.
\end_layout

\begin_layout Itemize

\family sans
VMClient
\family default
, que atiende las peticiones recibidas por el servidor de máquinas virtuales.
 Entre otras cosas, se ocupa de asignar y liberar los recursos asociados
 a cada máquina virtual y de ordenar la instanciación y la destrucción de
 las mismas.
\end_layout

\begin_layout Itemize

\family sans
ConfigurationFileEditor
\family default
, que manipula los ficheros 
\family typewriter
.xml
\family default
 que definen la configuración de una máquina virtual para incluir los recursos
 asociados a dicha máquina.
\end_layout

\begin_layout Itemize

\family sans
VMServerPacketHandler
\family default
, que proporciona métodos para crear y leer los paquetes utilizados por
 el subsistema servidor de máquinas virtuales.
 
\end_layout

\begin_layout Itemize

\family sans
VirtualNetworkManager
\family default
, que configura la red virtual a la que se conectarán las máquinas virtuales.
\end_layout

\begin_layout Subsubsection

\family sans
clusterServer
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Arquitectura/Vista lógica/DiagramaPaquetesClusterServer.pdf
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:El-paquete-clusterServer"

\end_inset

El paquete 
\family sans
clusterServer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tal y como se muestra en la figura , el paquete 
\family sans
clusterServer
\family default
, que contiene las clases del subsistema servidor del cluster de mayor nivel
 de abstracción, consta de tres subpaquetes:
\end_layout

\begin_layout Itemize
el paquete 
\family sans
network
\family default
 contiene las clases 
\family sans
WebCallback
\family default
, 
\family sans
VMServerCallback
\family default
 y 
\family sans
MainServerPacketHandle
\family default
r.
 Las dos primeras definen los métodos a los que se llamará cuando se reciba
 un paquete procedente del servidor web y de un servidor de máquinas virtuales
 respectivamente, y la última se comporta igual que la clase 
\family sans
VMServerPacketHandler
\family default
, proporcionando métodos para leer y crear los paquetes que utiliza el servidor
 del 
\emph on
cluster
\emph default
 para comunicarse con el servidor web.
\end_layout

\begin_layout Itemize
el paquete l
\family sans
oadBalancing
\family default
 contiene la clase 
\family sans
LoadBalancer
\family default
, que define la interfaz que usarán todos los distintos algoritmos que realizan
 el balanceado de carga entre distintos servidores de máquinas virtuales.
\end_layout

\begin_layout Itemize
finalmente, el paquete 
\family sans
reactor
\family default
 contiene la clase 
\family sans
MainServerReactor
\family default
, que procesa adecuadamente los paquetes recibidos desde un servidor de
 máquinas virtuales o desde el servidor web.
\end_layout

\begin_layout Subsubsection

\family sans
webServer
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: rellenar esto
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\family sans
testing
\end_layout

\begin_layout Standard
El paquete 
\family sans
testing
\family default
 contiene clases que permiten comprobar el correcto funcionamiento de los
 subsistemas servidor de máquinas virtuales y servidor del cluster.
 Sus clases son las siguientes:
\end_layout

\begin_layout Itemize

\family sans
DummyVMServer
\family default
, que imita el comportamiento de un servidor de máquinas virtuales y no
 instancia máquinas.
 Esta clase se utiliza para comprobar el funcionamiento del subsistema servidor
 del cluster.
\end_layout

\begin_layout Itemize

\family sans
VirtualMachineServerTester
\family default
.
 Esta clase imita al servidor principal, haciendo posible el envío de cualquier
 secuencia de órdenes a un servidor de máquinas virtuales.
 Por ello, se utiliza para depurar dicho subsistema.
\end_layout

\begin_layout Itemize

\family sans
ClusterServerTester
\family default
.
 Esta clase imita al servidor web, lo que permite enviar cualquier secuencia
 de órdenes a un servidor de 
\emph on
cluster
\emph default
.
 Así, esta clase se utiliza para depurar este subsistema.
\end_layout

\begin_layout Subsection
Decisiones de diseño
\end_layout

\begin_layout Standard
En esta sección discutiremos brevemente las decisiones de diseño más importantes
 que hemos tomado a lo largo del desarrollo del proyecto.
\end_layout

\end_body
\end_document
