#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Virtualización 
\emph on
hardware
\end_layout

\begin_layout Section
Conceptos básicos
\end_layout

\begin_layout Standard
La virtualización de 
\emph on
hardware
\emph default
 permite ejecutar múltiples sistemas operativos en una misma máquina.
 Todos ellos estarán aislados unos de otros, y se ejecutarán sobre una máquina
 virtual.
\end_layout

\begin_layout Standard
Una máquina virtual es la implementación 
\emph on
software
\emph default
 de un computador, y es capaz de ejecutar programas programas como una máquina
 física.
 Las máquinas virtuales no accederán directamente al 
\emph on
hardware
\emph default
 de la máquina física en la que residen: para ello, se comunican con el
 
\emph on
hipervisor
\emph default
.
\end_layout

\begin_layout Standard
Un 
\emph on
hipervisor 
\emph default
es un programa que crea máquinas virtuales, controla la forma en que estas
 acceden al 
\emph on
hardware
\emph default
 de la máquina física y gestiona la ejecución de los sistemas operativos
 de las máquinas virtuales.
\end_layout

\begin_layout Section
Esquemas de virtualización 
\emph on
hardware
\end_layout

\begin_layout Standard
Existen tres tipos de virtualización 
\emph on
hardware
\emph default
: virtualización completa, paravirtualización y virtualización asistida
 por 
\emph on
hardware
\emph default
.
\end_layout

\begin_layout Subsection
Virtualización completa
\end_layout

\begin_layout Standard
En este caso, la máquina virtual simula todo el repertorio de instrucciones
 de la CPU, las operaciones de entrada/salida, las interrupciones, los acceso
 a memoria y, en general, todo el 
\emph on
hardware 
\emph default
que utilice el sistema operativo que se ejecuta sobre ella.
 Esto evita la necesidad de modificar el sistema operativo de la máquina
 virtual.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Virtualizacion/hardware.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Virtualización completa
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El gran inconveniente de esta alternativa es la necesidad de traducir las
 instrucciones de la máquina virtual a instrucciones de la máquina física
 que la alberga (
\series bold
anfitrión 
\series default
o 
\series bold
\emph on
host
\series default
\emph default
), lo cual requiere mucho tiempo.
\end_layout

\begin_layout Subsection
Paravirtualización
\end_layout

\begin_layout Standard
Si ciertas operaciones se ejecutan directamente sobre la máquina física
 y no sobre la máquina virtual, su rendimiento puede mejorar de forma considerab
le.
 Asimismo, la implementación del sistema de virtualización pasa a ser mucho
 más sencilla y eficiente.
 Para hacer esto posible, es necesario
\end_layout

\begin_layout Itemize
utilizar una capa adicional, a la que llamaremos hipervisor, para gestionar
 el acceso a los recursos de la máquina anfitrión, y
\end_layout

\begin_layout Itemize
utilizar un sistema operativo modificado en la máquina virtual, que interactuará
 con el hipervisor para acceder al 
\emph on
hardware
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Virtualizacion/paravirtualizacion.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Paravirtualización"

\end_inset

Paravirtualización
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como podemos observar en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Paravirtualización"

\end_inset

, el sistema operativo de la máquina anfitrión también se ejecutará sobre
 el hipervisor, y se utilizará para realizar tareas de administración (como,
 por ejemplo, la creación y destrucción de máquinas virtuales).
\end_layout

\begin_layout Standard
Finalmente, si el sistema operativo de la máquina virtual no ha sido modificado,
 se procederá como en el caso de la virtualización
\emph on
 
\emph default
completa y se simulará todo el 
\emph on
hardware
\emph default
 de la misma, con la degradación de rendimiento que esto supone.
\end_layout

\begin_layout Subsection
Virtualización
\emph on
 
\emph default
asistida por 
\emph on
hardware
\end_layout

\begin_layout Standard
Este esquema explota las características de las CPUs actuales para mejorar
 resolver los problemas de rendimiento de la virtualización completa.
 Así, permite que un sistema operativo sin modificar pueda ejecutarse sobre
 la máquina virtual con un rendimiento muy similar al de la paravirtualización.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename graficos/Virtualizacion/completa.png
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Virtualización asistida por 
\emph on
hardware
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Software de virtualización
\end_layout

\begin_layout Standard
En la actualidad, existen muchas soluciones de virtualización en el mercado:
 
\emph on
VMWare
\emph default
, 
\emph on
VirtualBox
\emph default
, Xen, KVM,\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
Considerando la actual coyuntura económica, decidimos utilizar una solución
 de virtualización lo más eficiente posible y gratuita.
 Estas soluciones permiten implantar 
\emph on
CygnusCloud 
\emph default
con coste cero, ya que no es necesario afrontar el coste de ninguna licencia
 de 
\emph on
software
\emph default
 y, por el uso que hacen de los recursos, permiten utilizar servidores de
 hasta seis años de antigüedad para albergar las máquinas virtuales.
 
\end_layout

\begin_layout Standard
Así pues, descartamos dos soluciones de virtualización muy utilizadas (
\emph on
VMWare
\emph default
 y 
\emph on
VirtualBox
\emph default
) y nos centramos en la evaluación de las dos soluciones de virtualización
 gratuitas que ofrecen el mayor rendimiento: Xen y KVM.
 
\end_layout

\begin_layout Section
Xen
\end_layout

\begin_layout Standard
El hipervisor Xen soporta paravirtualización y virtualización asistida por
 
\emph on
hardware
\emph default
 si la CPU de la máquina anfitrión dispone de las instrucciones correspondientes.
\end_layout

\begin_layout Standard
Para comprender el funcionamiento de Xen, es fundamental saber cómo gestiona
 los recursos de las máquinas virtuales.
 Esto es lo que estudiaremos en la presente sección
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Pero no todo en Xen son ventajas, ya que en el caso de que solo se pueda
 usar paravirtualización en una máquina solo podrán virtualizar los sistemas
 operativos que soporten el hipervisor de Xen.
 Además para que el usuario pueda interactuar con Xen debe ejecutar, sobre
 el hipervisor, un sistema operativo 
\emph on
guest
\emph default
 que tiene más privilegios que los demás sistemas que puedan ejecutarse
 sobre Xen.
\end_layout

\begin_layout Plain Layout
Para saber como funciona Xen hay que como gestiona cada uno de los recursos.
 Eso es lo que vamos a ver a continuación:
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Dominios
\end_layout

\begin_layout Standard
En Xen, las máquinas virtuales se llaman 
\series bold
dominios
\series default
 (en inglés, 
\emph on
domain
\emph default
).
 Podemos distinguir dos tipos de dominios:
\end_layout

\begin_layout Itemize
el 
\series bold
dominio cero
\series default
.
 Se trata de una máquina virtual privilegiada que dispone de acceso completo
 al 
\emph on
hardware
\emph default
 y cuyo sistema operativo suministra los 
\emph on
drivers
\emph default
 que se utilizarán para interactuar con este.
 
\end_layout

\begin_deeper
\begin_layout Standard
El dominio cero se creará durante el arranque del equipo, y se utilizará
 para realizar las tareas de administración del servidor.
 
\end_layout

\end_deeper
\begin_layout Itemize
el resto de dominios.
 Estos son las máquinas virtuales que se crean y destruyen durante el funcionami
ento del servidor.
\end_layout

\begin_layout Standard
Es importante notar que, aunque puede existir un número arbitrario de dominios
 en la misma máquina, sólo puede haber un único dominio cero.
\end_layout

\begin_layout Subsection
Tratamiento de interrupciones
\end_layout

\begin_layout Standard
Cuando el 
\emph on
hardware
\emph default
 de la máquina anfitrión genera una interrupción, el hipervisor Xen la intercept
a y la planifica.
 Cuando la máquina virtual que la debe atender vuelva a tener acceso a la
 CPU, realizará el tratamiento correspondiente.
\end_layout

\begin_layout Standard
Esto permite que, siempre que se genere una interrupción, no sea necesario
 esperar a que las máquinas virtuales la procesen, lo cual es muy costoso.
\end_layout

\begin_layout Subsection
Tiempo de CPU
\end_layout

\begin_layout Standard
El tiempo de CPU es el recurso más utilizado.
 Para repartirlo, Xen trata a los distintos dominios como un sistema operativo
 trataría a los programas, es decir, utiliza un planificador que garantiza
 que todos los dominios pueden acceder a la CPU.
\end_layout

\begin_layout Subsection
Memoria
\end_layout

\begin_layout Standard
El hipervisor, como gestor de los recursos de la máquina, tiene acceso a
 toda la memoria de la máquina anfitrión.
 En ella, se aloja el contenido de la memoria física de cada máquina virtual
 y la tabla de páginas de Xen.
 Es importante notar que cada máquina virtual gestiona su propia memoria
 virtual.
\end_layout

\begin_layout Standard
Como dispone de su propia tabla de páginas, Xen puede controlar las direcciones
 de memoria físicas a las que acceden las distintas máquinas virtuales.
 De esta manera, una máquina virtual sólo podrá acceder a la memoria que
 Xen le ha asignado.
\end_layout

\begin_layout Subsection
Dispositivos de entrada/salida
\end_layout

\begin_layout Standard
Para manipular los dipositivos de entrada/salida, Xen delega en los drivers
 que forman parte del sistema operativo del dominio cero.
 
\end_layout

\begin_layout Standard
Por otra parte, las máquinas virtuales accederán a los distintos dispositivos
 de entrada/salida de la máquina anfitrión a través de los dispositivos
 virtuales, que son enlaces entre las interfaces de las máquinas virtuales
 y los dipositivos de la máquina física.
\end_layout

\begin_layout Standard
Finalmente, para aumentar el rendimiento, el acceso a los dispositivos se
 hace mediante un 
\emph on
buffer 
\emph default
en anillo, por lo que los dominios pueden utilizarlos directamente sin que
 sea necesaria la intervención del hipervisor.
\end_layout

\begin_layout Subsection
Red
\end_layout

\begin_layout Standard
Como sucede con el resto de dispositivos, Xen proporciona una interfaz de
 red virtual a los dominios.
 Asimismo, Xen implementa las funciones que permiten el flujo de tramas
 MAC entre las interfaces de red virtuales y las interfaces de red de la
 máquina anfitrión.
\end_layout

\begin_layout Standard
Es importante notar que Xen no valida las tramas MAC que se transfieren
 entre estas interfaces.
 Para ello, delega en el sistema operativo del dominio cero.
\end_layout

\begin_layout Subsection
Dispositivos de bloques
\end_layout

\begin_layout Standard
La gestión de los dispositivos de bloques que hace Xen es bastante similar
 a la gestión de los dispositivos de red.
 
\end_layout

\begin_layout Standard
En este caso, el hipervisor proporciona un dispositivo de bloques virtual
 a las distintas máquinas virtuales, y delega en el sistema operativo del
 dominio cero para mapear los comandos del dispositivo de bloques virtual
 sobre el dispositivo de bloques físico.
\end_layout

\begin_layout Section
KVM
\begin_inset CommandInset label
LatexCommand label
name "sec:KVM"

\end_inset


\end_layout

\begin_layout Standard
Como sabemos, el 
\emph on
kernel
\emph default
 
\emph on
Linux
\emph default
 es capaz de repartir los recursos de una máquina entre los distintos procesos
 que se ejecutan sobre la misma.
 Por ello, incluyendo un reducido conjunto de modificaciones y haciendo
 que las máquinas virtuales se ejecuten como procesos, es posible lograr
 que el propio 
\emph on
kernel Linux
\emph default
 se comporte como un hipervisor.
 Esta es la idea fundamental del hipervisor KVM (
\emph on
Kernel-based Virtual Machine
\emph default
), que se distribuye como un módulo del 
\emph on
kernel
\emph default
.
 
\end_layout

\begin_layout Standard
A diferencia de lo que ocurre en el caso de Xen, la CPU de la máquina anfitrión
 debe incluir soporte para la virtualización asistida por 
\emph on
hardware
\emph default
.
 Por ello, en la actualidad, KVM sólo puede utilizarse con CPUs x86 que
 cuenten con las extensiones de virtualización Intel VT o AMD-V.
\end_layout

\begin_layout Subsection
Funciones soportadas por KVM
\end_layout

\begin_layout Subsubsection
Seguridad
\end_layout

\begin_layout Standard
KVM puede utilizar los mecanismos de seguridad estándar integrados con el
 kernel 
\emph on
Linux
\emph default
: SELinux y AppArmor.
 
\end_layout

\begin_layout Standard
Por ejemplo, el proyecto SVirt, construido sobre SELinux, refleja el esfuerzo
 de la comunidad para integrar el control de acceso obligatorio (en inglés,
 
\emph on
Mandatory Access Control
\emph default
) con KVM.
 
\end_layout

\begin_layout Subsubsection
Gestión de memoria
\end_layout

\begin_layout Standard
La memoria utilizada por una máquina virtual se gestionará de la misma forma
 que la memoria utilizada por el resto de procesos.
 Así, podrá ser guardada en disco (
\emph on
swapped
\emph default
) y utilizada a través de páginas grandes (
\emph on
large pages
\emph default
).
 
\end_layout

\begin_layout Standard
Además, KVM soporta las últimas características de virtualización en memoria
 proporcionadas por fabricantes, como EPT (
\emph on
Extended Page Table
\emph default
) de Intel o RVI (
\emph on
Rapid Virtualization Indexing
\emph default
) de AMD.
 
\end_layout

\begin_layout Subsubsection
Migraciones en caliente
\end_layout

\begin_layout Standard
KVM soporta migraciones en caliente (en inglés, 
\emph on
live migrations
\emph default
).
 Las migraciones en caliente consisten en mover una máquina virtual en ejecución
 a otro servidor, desde el que seguirá ejecutándose.
 
\end_layout

\begin_layout Standard
Estas migraciones son totalmente trasparentes para el usuario: mientras
 la máquina se realoja en otro servidor físico permanece encendida, con
 sus conexiones de red activas y sus aplicaciones en ejecución.
\end_layout

\begin_layout Subsubsection
Gestión del almacenamiento
\end_layout

\begin_layout Standard
Para almacenar las imágenes de disco de las máquinas virtuales, es posible
 utilizar cualquier dispositivo de almacenamiento soportado por el kernel
 
\emph on
Linux
\emph default
.
 Esto incluye discos duros locales (IDE/SCSI/SATA), servidores NAS (
\emph on
Network Attached Storage
\emph default
) o redes SAN (
\emph on
Storage Area Network
\emph default
).
 Asimismo, también es posible utilizar sistemas de ficheros distribuidos
 como GFS2, OCFS o ClusterFS.
\end_layout

\begin_layout Standard
De forma nativa, KVM soporta los formatos de imagen RAW, 
\family typewriter
qcow
\family default
, 
\family typewriter
qcow2
\family default
 y 
\family typewriter
vmdk
\family default
 (el formato nativo de 
\emph on
VMWare
\emph default
).
 Los tres últimos soportan compresión, por lo que el espacio libre en las
 imágenes de disco que los utilizan no ocupará espacio en disco en la máquina
 anfitrión.
\end_layout

\begin_layout Standard
Finalmente, existen dos alternativas para ubicar las imágenes de disco:
\end_layout

\begin_layout Itemize

\series bold
almacenamiento local
\series default
.
 En este caso, las imágenes de disco se encuentran en la propia máquina
 anfitrión.
 Esto resulta muy útil para entornos de desarrollo, pruebas y pequeños despliegu
es, aunque no se recomienda en entornos con muchas máquinas virtuales o
 en los que se realicen migraciones en caliente.
\end_layout

\begin_layout Itemize

\series bold
almacenamiento en red
\series default
.
 En este caso, las imágenes de disco no se encuentran en la máquina anfitrión,
 y se accede a ellas a través de una red.
\end_layout

\begin_layout Subsubsection
Red en KVM
\end_layout

\begin_layout Standard
En KVM, las interfaces de red de las máquinas virtuales pueden operar en
 tres modos principales:
\end_layout

\begin_layout Itemize
modo 
\series bold
\emph on
bridge
\series default
\emph default
.
 En este caso, la máquina virtual se conecta directamente a la red que la
 que forma parte la máquina anfitrión.
 Desde el exterior, parecerá que la máquina virtual es un equipo físico
 conectado a esa red.
\end_layout

\begin_layout Itemize
modo 
\series bold
NAT
\series default
 (
\emph on
Network Address Translation
\emph default
, traducción de direcciones de red).
 En este caso, se crea una red virtual dentro de la máquina anfitrión, a
 la que se conectarán todas las máquinas virtuales.
 Desde el exterior, esta red no será accesible, y parecerá que la máquina
 anfitrión es la que genera el tráfico de las máquinas virtuales.
\end_layout

\begin_layout Itemize
modo 
\series bold
\emph on
route
\series default
\emph default
.
 En este caso, las máquinas virtuales se encuentran en una subred virtual,
 a la que es posible acceder desde el exterior (a través de su encaminador
 predeterminado).
\end_layout

\begin_layout Subsection

\emph on
Drivers
\end_layout

\begin_layout Standard
El hipervisor KVM utiliza virtualización híbrida, combinando la paravirtualizaci
ón y la virtualización asistida por 
\emph on
hardware
\emph default
.
 
\end_layout

\begin_layout Standard
Por ello, en los sistemas operativos de las máquinas virtuales hay que instalar
 drivers de paravirtualización.
 Estos permiten a dicho sistema operativo utilizar la interfaz de entrada/salida
 para dispositivos de bloques y dispositivos de red.
 
\end_layout

\begin_layout Standard
En la actualidad, los drivers de paravirtualización más utilizados son los
 del proyecto VirtIO, desarrollado por IBM y 
\emph on
RedHat
\emph default
.
 El objetivo principal de este proyecto es mejorar el rendimiento de las
 máquinas virtuales a través una mejor interacción entre KVM y los sistemas
 operativos de las mismas.
\end_layout

\begin_layout Subsection
Ventajas e inconvenientes de KVM
\end_layout

\begin_layout Standard
El uso de KVM tiene las siguientes ventajas:
\end_layout

\begin_layout Itemize
su instalación es muy sencilla: basta con incorporar un nuevo módulo al
 kernel 
\emph on
Linux
\emph default
.
\end_layout

\begin_layout Itemize
permite la migración en caliente de las máquinas virtuales.
\end_layout

\begin_layout Itemize
los servidores que albergan las máquinas virtuales se administran como máquinas
 Linux convencionales.
\end_layout

\begin_layout Itemize
las máquinas virtuales se tratan como procesos, por lo que resulta muy sencillo
 manipularlas.
\end_layout

\begin_layout Standard
Por otra parte, en la actualidad el uso de KVM también tiene asociados varios
 inconvenientes:
\end_layout

\begin_layout Itemize
se trata de un proyecto con poco recorrido comercial.
 Su reciente aparición en el mercado hace que no disponga el mismo soporte
 que otras soluciones, como Xen y 
\emph on
VMWare
\emph default
.
\end_layout

\begin_layout Itemize
no existen herramientas sofisticadas para gestionar servidores y máquinas
 virtuales.
\end_layout

\begin_layout Itemize
deben introducirse mejoras en áreas como el soporte del almacenamiento virtual,
 la seguridad, la alta disponibilidad, la tolerancia a fallos y la gestión
 del consumo energético.
\end_layout

\begin_layout Subsection
Limitaciones de KVM
\end_layout

\begin_layout Standard
El uso del hipervisor KVM tiene varias limitaciones, que afectan tanto al
 sistema operativo de la máquina virtual como al servidor que aloja las
 máquinas virtuales.
 
\end_layout

\begin_layout Standard
Estas limitaciones están asociadas a
\end_layout

\begin_layout Itemize
los 
\emph on
overcommits
\emph default
.
 KVM permite que las máquinas virtuales utilicen más memoria, más CPUs o
 más espacio en disco del disponible en el servidor.
 Si bien esto permite atender a más usuarios, también puede dar lugar a
 un empeoramiento del rendimiento y a fallos en las máquinas virtuales.
\end_layout

\begin_layout Itemize
la generación de las direcciones MAC.
 Si una interfaz de red virtual no tiene asignada una dirección MAC, KVM
 generará dicha dirección MAC.
 Esto puede dar lugar a problemas en la red cuando más de una interfaz de
 red virtual recibe la misma dirección MAC.
 
\end_layout

\begin_layout Itemize
la suspensión y la hibernación del servidor de maquinas virtuales.
 Mientras existan máquinas virtuales activas, no es posible suspender o
 hibernar un servidor de máquinas virtuales.
\end_layout

\begin_layout Section
Xen frente a KVM
\begin_inset CommandInset label
LatexCommand label
name "sec:Xen-vs-KVM"

\end_inset


\end_layout

\begin_layout Standard
En este apartado, justificaremos por qué decidimos utilizar el hipervisor
 KVM en lugar del hipervisor Xen.
\end_layout

\begin_layout Subsection
Integración en el 
\emph on
kernel
\end_layout

\begin_layout Standard
KVM es el único hipervisor que, a día de hoy, se encuentra completamente
 integrado en el 
\emph on
kernel
\emph default
 
\emph on
Linux
\emph default
.
 KVM utiliza el 
\emph on
kernel Linux 
\emph default
para todo, desde la gestión de dispositivos de entrada/salida hasta el reparto
 del tiempo de CPU y la gestión de la memoria.
 
\end_layout

\begin_layout Standard
Sin embargo, Xen todavía no ha sido aceptado como parte del núcleo 
\emph on
Linux
\emph default
, y por ello no puede aprovechar algunas funciones muy útiles que este ofrece,
 tales como los algoritmos de planificación CFS (
\emph on
Completely Fair Scheduler
\emph default
), la gestión de la tabla de páginas o la sobreexplotación de la memoria
 con KSM (
\emph on
Kernel Samepage Merging
\emph default
).
 
\end_layout

\begin_layout Standard
Además, a diferencia de lo que ocurre en el caso de KVM, Xen requiere modificar
 sustancialmente el proceso de arranque de las máquinas en las que está
 instalado: en él, es necesario cargar el hipervisor y crear el dominio
 cero.
\end_layout

\begin_layout Standard
En definitiva, KVM resulta mucho más fácil de instalar y configurar que
 Xen: basta con instalar un módulo del 
\emph on
kernel
\emph default
 más durante el proceso de arranque.
\end_layout

\begin_layout Subsection
Rendimiento
\end_layout

\begin_layout Standard
El rendimiento de Xen y KVM es, en términos generales, bastante similar.
 No obstante,
\end_layout

\begin_layout Itemize
cuando en las máquinas virtuales utilizan la CPU de forma intensiva, el
 rendimiento de Xen es superior al de KVM, y
\end_layout

\begin_layout Itemize
cuando las máquinas virtuales realizan muchas operaciones de entrada/salida
 a disco, el rendimiento de KVM es superior al de Xen.
\end_layout

\begin_layout Standard
Para llegar a esta conclusión, en el estudio 
\begin_inset CommandInset citation
LatexCommand cite
key "XenComparison"

\end_inset

 se compiló el 
\emph on
kernel Linux
\emph default
 y se ejecutó el 
\emph on
benchmark
\emph default
 
\emph on
IOZone 
\emph default
directamente sobre distintas máquinas físicas y sobre máquinas virtuales
 con diversas características.
 La primera prueba se caracteriza por el uso intensivo de CPU, y la segunda
 se caracteriza por realizar un gran número de operaciones de entrada/salida
 a disco.
\end_layout

\begin_layout Standard
Los resultados obtenidos fueron los siguientes:
\end_layout

\begin_layout Itemize
en la primera prueba, la pérdida de rendimiento con respecto a la máquina
 original fue, en promedio, de un 1% en las máquinas virtuales Xen, y de
 un 36% en las máquinas virtuales KVM.
 
\end_layout

\begin_layout Itemize
en la segunda prueba, la pérdida de rendimiento con respecto a la máquina
 original fue, en promedio, de un 42,9% en las máquinas virtuales Xen, y
 de un 3,6% en las máquinas virtuales KVM.
\end_layout

\begin_layout Subsection
Soporte técnico
\end_layout

\begin_layout Standard
Gracias a su integración en el 
\emph on
kernel
\emph default
, las versiones de KVM se publican con mucha frecuencia, lo que garantiza
 la rápida corrección de los 
\emph on
bugs
\emph default
 que se detecten.
\end_layout

\begin_layout Standard
Asimismo, 
\emph on
RedHat
\emph default
 e IBM están realizando una importante apuesta por KVM, publicando y actualizand
o numerosas páginas de documentación y guías de migración a KVM desde otras
 soluciones de virtualización como VMWare y Xen.
\end_layout

\begin_layout Standard
Por otra parte, la actualización del código de la versión 
\emph on
open-source
\emph default
 de Xen sólo tiene lugar una vez cada año, por lo que el soporte de Xen
 es bastante peor que el de KVM.
 
\end_layout

\begin_layout Standard
Además, la documentación de la versión 
\emph on
open-source
\emph default
 de Xen es muy escasa y frecuentemente no está actualizada a la última versión.
\end_layout

\begin_layout Standard
En definitiva, puesto que
\end_layout

\begin_layout Itemize
la instalación y uso de KVM son mucho más sencillos que los de Xen,
\end_layout

\begin_layout Itemize
el rendimiento de ambas soluciones es prácticamente idéntico, y
\end_layout

\begin_layout Itemize
KVM cuenta con mucho mejor soporte que Xen
\end_layout

\begin_layout Standard
decidimos utilizar el hipervisor KVM en lugar del hipervisor Xen.
\end_layout

\end_body
\end_document
