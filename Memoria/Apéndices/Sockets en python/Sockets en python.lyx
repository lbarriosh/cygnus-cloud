#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter

\emph on
Sockets
\emph default
 en 
\emph on
Python
\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
Los 
\emph on
sockets
\emph default
 son un concepto abstracto con el que se designa al punto final de una conexión.
 Los programas utilizan 
\emph on
sockets
\emph default
 para comunicarse con otros programas, que pueden estar situados en computadoras
 distintas.
\end_layout

\begin_layout Standard
Un 
\emph on
socket
\emph default
 queda definido por la dirección IP de la máquina, el puerto en el que escucha,
 y el protocolo que utiliza.
 Los tipos y funciones necesarios para trabajar con 
\emph on
sockets
\emph default
 se encuentran en Python en el módulo 
\family typewriter
socket
\family default
.
\end_layout

\begin_layout Section
Clasificación
\end_layout

\begin_layout Standard
Los 
\emph on
sockets
\emph default
 se clasifican en 
\emph on
sockets
\emph default
 de flujo (
\family typewriter
socket.SOCK_STREAM
\family default
) o 
\emph on
sockets
\emph default
 de datagramas (
\family typewriter
socket.SOCK_DGRAM
\family default
) dependiendo de si el servicio utiliza TCP, que es orientado a conexión
 y fiable, o UDP, respectivamente.
 
\end_layout

\begin_layout Standard
Los 
\emph on
sockets
\emph default
 también se pueden clasificar según la familia.
 Tenemos 
\emph on
sockets 
\emph default
UNIX (
\family typewriter
socket.AF_UNIX
\family default
) que se crearon antes de la concepción de las redes y se basan en ficheros,
 
\emph on
sockets
\emph default
 
\family typewriter
socket.AF_INET
\family default
 que son los que nos interesan, 
\emph on
sockets 
\family typewriter
\emph default
socket.AF_INET6
\family default
 para IPv6, etc.
\end_layout

\begin_layout Section
Familias de Sockets
\end_layout

\begin_layout Standard
Dependiendo del sistema y las opciones de construcción, existen varias familias
 de 
\emph on
sockets
\emph default
.
\end_layout

\begin_layout Standard
Las direcciones de 
\emph on
sockets
\emph default
 pueden representarse como siguen:
\end_layout

\begin_layout Itemize
Las cadenas de caracteres son utilizadas para familias del tipo 
\family typewriter
AF_UNIX
\family default
.
\end_layout

\begin_layout Itemize
Un par de la forma 
\family typewriter
(host, port)
\family default
.
 Se utilizan para las familias de tipo 
\family typewriter
AF_INET
\family default
 donde 
\family typewriter
host
\family default
 es una cadena que representa un nombre de 
\emph on
host
\emph default
 en la notación de dominio de internet (como 
\family typewriter
daring.cwi.nl
\family default
) o una dirección IPv4 como (50.200.5.100), y 
\family typewriter
port
\family default
 es un entero.
\end_layout

\begin_layout Itemize
En el caso de la familia de tipo 
\family typewriter
AF_INET6
\family default
, se utiliza una tupla de cuatro elementos 
\family typewriter
(host, port, flowinfo, scopeid)
\family default
, donde 
\family typewriter
flowInfo
\family default
 y 
\family typewriter
scopeid
\family default
 representan los miembros 
\family typewriter
sin6_flowinfo
\family default
 y 
\family typewriter
sin6_scope_id
\family default
 del registro 
\family typewriter
sockaddr_in6
\family default
.
 Estos parámetros pueden omitirse para compatibilidad con versiones anteriores.
 Sin embargo, la omisión de 
\family typewriter
ScopeId
\family default
 puede causar problemas en la manipulación de ámbito de las direcciones
 IPv6.
\end_layout

\begin_layout Itemize
Los 
\emph on
sockets
\emph default
 de la familia 
\family typewriter
AF_NETLINK
\family default
 se representan como pares 
\family typewriter
(pid, grupos)
\family default
.
\end_layout

\begin_layout Itemize
El soporte de TIPC en 
\emph on
Linux
\emph default
 solo está disponible bajo la familia 
\family typewriter
AF_TIPC
\family default
.
 TIPC es un protocolo abierto, sin IP y basado en red, diseñado para ser
 usado en ambientes con computación en 
\emph on
cluster
\emph default
.
 Las direcciones son representadas por una tupla, y sus campos dependen
 del tipo de dirección.
 Generalmente suele tener el siguiente aspecto: 
\family typewriter
(addr_type, v1, v2, v3 ,[ scope])
\family default
 donde
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
addr_type
\family default
 es 
\family typewriter
TIPC_ADDR_NAMESEQ
\family default
, 
\family typewriter
TIPC_ADDR_NAME
\family default
, o 
\family typewriter
TIPC_ADDR_ID
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize
Si 
\family typewriter
addr_type
\family default
 es 
\family typewriter
TIPC_ADDR_NAME
\family default
, entonces 
\family typewriter
v1
\family default
 es el tipo de servidor, 
\family typewriter
v2
\family default
 es el identificador de puerto, y 
\family typewriter
v3
\family default
 suele ser 
\family typewriter
0
\family default
.
\end_layout

\begin_layout Itemize
Si 
\family typewriter
addr_type
\family default
 es 
\family typewriter
TIPC_ADDR_NAMESEQ
\family default
, entonces 
\family typewriter
v1
\family default
 es el tipo de servidor, 
\family typewriter
v2
\family default
 es el número menor del puerto, y 
\family typewriter
v3
\family default
 es el mayor número de puerto.
\end_layout

\begin_layout Itemize
Si
\family typewriter
 addr_type
\family default
 es 
\family typewriter
TIPC_ADDR_ID
\family default
, entonces 
\family typewriter
v1
\family default
 es el nodo, 
\family typewriter
v2
\family default
 es la referencia, y 
\family typewriter
v3
\family default
 suele ser 
\family typewriter
0
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
scope
\family default
 es 
\family typewriter
TIPC_ZONE_SCOPE
\family default
, 
\family typewriter
TIPC_CLUSTER_SCOPE
\family default
, o 
\family typewriter
TIPC_NODE_SCOPE
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Algunas otras familias como 
\family typewriter
AF_BLUETOOTH
\family default
 y 
\family typewriter
AF_PACKET
\family default
 utilizan representaciones específicas.
\end_layout

\begin_layout Section
Creación de un 
\emph on
socket
\end_layout

\begin_layout Standard
Para crear un 
\emph on
socket
\emph default
 se utiliza el constructor 
\family typewriter
socket.socket()
\family default
 que puede tomar como parámetros opcionales la familia, el tipo y el protocolo.
 Por defecto se utiliza la familia 
\family typewriter
AF_INET
\family default
 y el tipo 
\family typewriter
SOCK_STREAM
\family default
.
\end_layout

\begin_layout Subsection

\emph on
Socket
\emph default
 en el servidor
\end_layout

\begin_layout Standard
Lo primero que tenemos que hacer es crear un objeto 
\emph on
socket
\emph default
 para el servidor
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

socket_s = socket.socket() 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora tenemos que indicar en qué puerto se va a mantener a la escucha nuestro
 servidor utilizando el método 
\family typewriter
bind
\family default
.
 Para sockets IP, como es nuestro caso, el argumento de 
\family typewriter
bind
\family default
 es una tupla que contiene el 
\emph on
host
\emph default
 y el puerto.
 El 
\emph on
host 
\emph default
se puede dejar vacío, indicando al método que puede utilizar cualquier nombre
 que esté disponible.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

socket_s.bind(("localhost", 9999))
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por último, utilizamos 
\family typewriter
listen
\family default
 para hacer que el 
\emph on
socket
\emph default
 acepte conexiones y 
\emph on
accept
\emph default
 para comenzar a escuchar.
 
\family typewriter
listen
\family default
 requiere un parámetro que indique el número de conexiones máximas que queremos
 aceptar.
 Evidentemente, este valor debe ser al menos 
\family typewriter
1
\family default
.
 
\family typewriter
accept
\family default
 se mantiene a la espera de conexiones entrantes, bloqueando la ejecución
 hasta que llegue un mensaje.
\end_layout

\begin_layout Standard
Cuando llega un mensaje, 
\family typewriter
accept
\family default
 desbloquea la ejecución, devolviendo un objeto 
\family typewriter
socket
\family default
 que representa la conexión del cliente y una tupla que contiene el 
\emph on
host
\emph default
 y el puerto de dicha conexión.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

socket_s.listen(10) 
\end_layout

\begin_layout Plain Layout

socket_c, (host_c, puerto_c) = socket_s.accept()
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez que tenemos este objeto 
\emph on
socket
\emph default
 podemos comunicarnos con el cliente a su través, mediante los métodos 
\family typewriter
recv
\family default
 y 
\family typewriter
send
\family default
 (o 
\family typewriter
recvfrom
\family default
 y 
\family typewriter
sendfrom
\family default
 en UDP) que permiten recibir o enviar mensajes respectivamente.
 El método 
\family typewriter
send
\family default
 toma como parámetros los datos a enviar, mientras que el método 
\family typewriter
recv
\family default
 toma como parámetro el número máximo de bytes a aceptar.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

recibido = socket_c.recv(1024) 
\end_layout

\begin_layout Plain Layout

print "Recibido: ", recibido 
\end_layout

\begin_layout Plain Layout

socket_c.send(recibido) 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez que hemos terminado de trabajar con el 
\emph on
socket
\emph default
, lo cerramos con el método 
\family typewriter
close
\family default
.
\end_layout

\begin_layout Subsection

\emph on
Socket
\emph default
 en el cliente
\end_layout

\begin_layout Standard
Crear un cliente es aún más sencillo.
 Solo tenemos que crear el objeto 
\family typewriter
socket
\family default
, utilizar el método 
\family typewriter
connect
\family default
 para conectarnos al servidor y los métodos 
\family typewriter
send
\family default
 y 
\family typewriter
recv
\family default
 que vimos anteriormente para enviar y recibir mensajes.
 El argumento de 
\family typewriter
connect
\family default
 es una tupla con el 
\emph on
host
\emph default
 y el puerto, exactamente igual que 
\family typewriter
bind
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

socket_c = socket.socket() 
\end_layout

\begin_layout Plain Layout

socket_c.connect(("localhost", 9999)) 
\end_layout

\begin_layout Plain Layout

socket_c.send("hola") 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Ejemplos
\end_layout

\begin_layout Subsection
Ejemplo 1
\end_layout

\begin_layout Standard
En este ejemplo el cliente manda al servidor cualquier mensaje que escriba
 el usuario y el servidor no hace más que repetir el mensaje recibido.
 La ejecución termina cuando el usuario escribe 
\family typewriter
quit
\family default
.
\end_layout

\begin_layout Standard
Este sería el código del 
\emph on
script 
\emph default
servidor:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

import socket 
\end_layout

\begin_layout Plain Layout

s = socket.socket() 
\end_layout

\begin_layout Plain Layout

s.bind(("localhost", 9999)) 
\end_layout

\begin_layout Plain Layout

s.listen(1) 
\end_layout

\begin_layout Plain Layout

sc, addr = s.accept() 
\end_layout

\begin_layout Plain Layout

while True:
\end_layout

\begin_layout Plain Layout

    recibido = sc.recv(1024) 
\end_layout

\begin_layout Plain Layout

    if recibido == "quit": 
\end_layout

\begin_layout Plain Layout

        break 
\end_layout

\begin_layout Plain Layout

    print "Recibido:", recibido 
\end_layout

\begin_layout Plain Layout

    sc.send(recibido) 
\end_layout

\begin_layout Plain Layout

print "adios" 
\end_layout

\begin_layout Plain Layout

sc.close() 
\end_layout

\begin_layout Plain Layout

s.close() 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Y este el del 
\emph on
script 
\emph default
cliente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

import socket
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

s = socket.socket()  
\end_layout

\begin_layout Plain Layout

s.connect(("localhost", 9999))
\end_layout

\begin_layout Plain Layout

while True:
\end_layout

\begin_layout Plain Layout

       mensaje = raw_input("> ")
\end_layout

\begin_layout Plain Layout

       s.send(mensaje)
\end_layout

\begin_layout Plain Layout

       if mensaje == "quit":
\end_layout

\begin_layout Plain Layout

           break
\end_layout

\begin_layout Plain Layout

print "adios"
\end_layout

\begin_layout Plain Layout

s.close() 
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ejemplo 2
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

## python socket chat example
\end_layout

\begin_layout Plain Layout

## licence: GPL v3 
\end_layout

\begin_layout Plain Layout

#server import socket import threading import time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

SIZE = 4
\end_layout

\begin_layout Plain Layout

soc = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 
\end_layout

\begin_layout Plain Layout

soc.bind(('127.0.0.1',5432)) 
\end_layout

\begin_layout Plain Layout

soc.listen(5)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class CThread(threading.Thread):
\end_layout

\begin_layout Plain Layout

    def __init__(self,c):
\end_layout

\begin_layout Plain Layout

        threading.Thread.__init__(self)
\end_layout

\begin_layout Plain Layout

        self.conn = c
\end_layout

\begin_layout Plain Layout

        self.stopIt=False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   def mrecv(self):
\end_layout

\begin_layout Plain Layout

        data = self.conn.recv(SIZE)
\end_layout

\begin_layout Plain Layout

        self.conn.send('OK')
\end_layout

\begin_layout Plain Layout

        msg = self.conn.recv(int(data))
\end_layout

\begin_layout Plain Layout

        return msg
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   def run(self):
\end_layout

\begin_layout Plain Layout

        while not self.stopIt:
\end_layout

\begin_layout Plain Layout

            msg = self.mrecv()
\end_layout

\begin_layout Plain Layout

            print 'recieved->  ',msg
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def setConn(con1,con2):
\end_layout

\begin_layout Plain Layout

    dict={}
\end_layout

\begin_layout Plain Layout

    state = con1.recv(9)
\end_layout

\begin_layout Plain Layout

    con2.recv(9)
\end_layout

\begin_layout Plain Layout

   if state =='WILL RECV':
\end_layout

\begin_layout Plain Layout

       dict['send'] = con1 # server will send data to reciever
\end_layout

\begin_layout Plain Layout

       dict['recv'] = con2     
\end_layout

\begin_layout Plain Layout

   else:
\end_layout

\begin_layout Plain Layout

       dict['recv'] = con1 # server will recieve data from sender
\end_layout

\begin_layout Plain Layout

       dict['send'] = con2
\end_layout

\begin_layout Plain Layout

   return dict
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def msend(conn,msg):
\end_layout

\begin_layout Plain Layout

    if len(msg)<=999 and len(msg)>0:
\end_layout

\begin_layout Plain Layout

        conn.send(str(len(msg)))
\end_layout

\begin_layout Plain Layout

        if conn.recv(2) == 'OK':
\end_layout

\begin_layout Plain Layout

            conn.send(msg)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

	    conn.send(str(999))
\end_layout

\begin_layout Plain Layout

       if conn.recv(2) == 'OK':
\end_layout

\begin_layout Plain Layout

            conn.send(msg[:999])
\end_layout

\begin_layout Plain Layout

            msend(conn,msg[1000:]) # calling recursive
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

(c1,a1) = soc.accept()
\end_layout

\begin_layout Plain Layout

(c2,a2) = soc.accept()
\end_layout

\begin_layout Plain Layout

dict = setConn(c1,c2)
\end_layout

\begin_layout Plain Layout

thr = CThread(dict['recv'])
\end_layout

\begin_layout Plain Layout

thr.start()
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

    while 1:
\end_layout

\begin_layout Plain Layout

   	msend(dict['send'],raw_input())
\end_layout

\begin_layout Plain Layout

except:
\end_layout

\begin_layout Plain Layout

  print 'closing'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thr.stopIt=True
\end_layout

\begin_layout Plain Layout

msend(dict['send'],'bye!!!')# for stoping the thread
\end_layout

\begin_layout Plain Layout

thr.conn.close()
\end_layout

\begin_layout Plain Layout

soc.close()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#client 
\end_layout

\begin_layout Plain Layout

import socket
\end_layout

\begin_layout Plain Layout

import threading
\end_layout

\begin_layout Plain Layout

SIZE =4
\end_layout

\begin_layout Plain Layout

class client(threading.Thread):
\end_layout

\begin_layout Plain Layout

    def __init__(self,c):
\end_layout

\begin_layout Plain Layout

        threading.Thread.__init__(self)
\end_layout

\begin_layout Plain Layout

        self.conn = c
\end_layout

\begin_layout Plain Layout

        self.stopIt = False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   def mrecv(self):
\end_layout

\begin_layout Plain Layout

        data = self.conn.recv(SIZE)
\end_layout

\begin_layout Plain Layout

        self.conn.send('OK')
\end_layout

\begin_layout Plain Layout

        return self.conn.recv(int(data))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

   def run(self):
\end_layout

\begin_layout Plain Layout

        while not self.stopIt:
\end_layout

\begin_layout Plain Layout

            msg = self.mrecv()
\end_layout

\begin_layout Plain Layout

            print 'recieved-> ',msg
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

soc1 = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
\end_layout

\begin_layout Plain Layout

soc1.connect(('127.0.0.1',5432)) soc1.send('WILL SEND')
\end_layout

\begin_layout Plain Layout

# telling server we will send data from here
\end_layout

\begin_layout Plain Layout

soc2 = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
\end_layout

\begin_layout Plain Layout

soc2.connect(('127.0.0.1',5432))
\end_layout

\begin_layout Plain Layout

soc2.send('WILL RECV') # telling server we will recieve data from here
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def msend(conn,msg):     
\end_layout

\begin_layout Plain Layout

	if len(msg)<=999 and len(msg)>0:
\end_layout

\begin_layout Plain Layout

        conn.send(str(len(msg)))
\end_layout

\begin_layout Plain Layout

        if conn.recv(2) == 'OK':
\end_layout

\begin_layout Plain Layout

            conn.send(msg)
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        conn.send(str(999))
\end_layout

\begin_layout Plain Layout

        if conn.recv(2) == 'OK':
\end_layout

\begin_layout Plain Layout

            conn.send(msg[:999])
\end_layout

\begin_layout Plain Layout

            msend(conn,msg[1000:]) # calling recursive
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thr = client(soc2)
\end_layout

\begin_layout Plain Layout

thr.start() 
\end_layout

\begin_layout Plain Layout

try:
\end_layout

\begin_layout Plain Layout

    while 1:
\end_layout

\begin_layout Plain Layout

        msend(soc1,raw_input())
\end_layout

\begin_layout Plain Layout

except:
\end_layout

\begin_layout Plain Layout

    print 'closing'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

thr.stopIt=True
\end_layout

\begin_layout Plain Layout

msend(soc1,'bye!!') # for stoping the thread
\end_layout

\begin_layout Plain Layout

thr.conn.close()
\end_layout

\begin_layout Plain Layout

soc1.close()
\end_layout

\begin_layout Plain Layout

soc2.close()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
